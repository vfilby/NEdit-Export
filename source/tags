!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/darren@hiebert.com/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	4.0.3	//
ACCUMULATE	shell.c	80;"	d	file:
ACTION_BOOL_PARAM_OR_TOGGLE	menu.c	3307;"	d	file:
ACTION_ROUTINE_SYM	interpret.h	/^    	C_FUNCTION_SYM, MACRO_FUNCTION_SYM, ACTION_ROUTINE_SYM};$/;"	e	enum:symTypes
ADDEQ	parse.c	75;"	d	file:
ADD_BR_OFF	parse.c	38;"	d	file:
ADD_IMMED	parse.c	37;"	d	file:
ADD_OP	parse.c	35;"	d	file:
ADD_SYM	parse.c	36;"	d	file:
ALNUM_CHAR_SIZE	regularExp.c	370;"	d	file:
AND	parse.c	84;"	d	file:
ANDEQ	parse.c	80;"	d	file:
ANY	regularExp.c	116;"	d	file:
ANY_BUT	regularExp.c	112;"	d	file:
ANY_OF	regularExp.c	111;"	d	file:
APP_CLASS	nc.c	69;"	d	file:
APP_CLASS	nedit.h	25;"	d
APP_NAME	nc.c	68;"	d	file:
APP_NAME	nedit.h	24;"	d
ARG_SYM	interpret.h	/^enum symTypes {CONST_SYM, GLOBAL_SYM, LOCAL_SYM, ARG_SYM, PROC_VALUE_SYM,$/;"	e	enum:symTypes
ARRAY_DIM_SEP	interpret.h	24;"	d
ARRAY_TAG	interpret.h	/^enum typeTags {NO_TAG, INT_TAG, STRING_TAG, ARRAY_TAG};$/;"	e	enum:typeTags
ASCII_Digits	regularExp.c	/^static unsigned char  ASCII_Digits [] = "0123456789"; \/* Same for all *\/$/;"	v	file:
AUTOSAVE_CHAR_LIMIT	nedit.h	14;"	d
AUTOSAVE_CHAR_LIMIT	nedit.h	17;"	d
AUTOSAVE_OP_LIMIT	nedit.h	19;"	d
AUTO_INDENT	nedit.h	/^enum indentStyle {NO_AUTO_INDENT, AUTO_INDENT, SMART_INDENT};$/;"	e	enum:indentStyle
AUTO_LOAD_MACRO_FILE_NAME	macro.c	78;"	d	file:
A_ATOM_PAIR	textSel.c	/^	A_ATOM_PAIR, A_MOTIF_DESTINATION};$/;"	e	file:	enum:atomIndex
A_CLIPBOARD	textSel.c	/^	A_INSERT_SELECTION, A_DELETE, A_CLIPBOARD, A_INSERT_INFO,$/;"	e	file:	enum:atomIndex
A_DELETE	textSel.c	/^	A_INSERT_SELECTION, A_DELETE, A_CLIPBOARD, A_INSERT_INFO,$/;"	e	file:	enum:atomIndex
A_INSERT_INFO	textSel.c	/^	A_INSERT_SELECTION, A_DELETE, A_CLIPBOARD, A_INSERT_INFO,$/;"	e	file:	enum:atomIndex
A_INSERT_SELECTION	textSel.c	/^	A_INSERT_SELECTION, A_DELETE, A_CLIPBOARD, A_INSERT_INFO,$/;"	e	file:	enum:atomIndex
A_MOTIF_DESTINATION	textSel.c	/^	A_ATOM_PAIR, A_MOTIF_DESTINATION};$/;"	e	file:	enum:atomIndex
A_MULTIPLE	textSel.c	/^enum atomIndex {A_TEXT, A_TARGETS, A_MULTIPLE, A_TIMESTAMP,$/;"	e	file:	enum:atomIndex
A_TARGETS	textSel.c	/^enum atomIndex {A_TEXT, A_TARGETS, A_MULTIPLE, A_TIMESTAMP,$/;"	e	file:	enum:atomIndex
A_TEXT	textSel.c	/^enum atomIndex {A_TEXT, A_TARGETS, A_MULTIPLE, A_TIMESTAMP,$/;"	e	file:	enum:atomIndex
A_TIMESTAMP	textSel.c	/^enum atomIndex {A_TEXT, A_TARGETS, A_MULTIPLE, A_TIMESTAMP,$/;"	e	file:	enum:atomIndex
AbortMacroCommand	macro.c	/^void AbortMacroCommand(WindowInfo *window)$/;"	f
AbortShellCommand	shell.c	/^void AbortShellCommand(WindowInfo *window)$/;"	f
Actions	menu.c	/^static XtActionsRec Actions[] = {$/;"	v	file:
AddBGMenuAction	menu.c	/^void AddBGMenuAction(Widget widget)$/;"	f
AddBranchOffset	interpret.c	/^int AddBranchOffset(Inst *to, char **msg)$/;"	f
AddBreakAddr	interpret.c	/^void AddBreakAddr(Inst *addr)$/;"	f
AddContinueAddr	interpret.c	/^void AddContinueAddr(Inst *addr)$/;"	f
AddImmediate	interpret.c	/^int AddImmediate(void *value, char **msg)$/;"	f
AddLastCommandActionHook	macro.c	/^void AddLastCommandActionHook(XtAppContext context)$/;"	f
AddMark	selection.c	/^void AddMark(WindowInfo *window, Widget widget, char label)$/;"	f
AddOp	interpret.c	/^int AddOp(int op, char **msg)$/;"	f
AddSmallIcon	window.c	/^void AddSmallIcon(Widget shell)$/;"	f
AddSym	interpret.c	/^int AddSym(Symbol *sym, char **msg)$/;"	f
AddTagsFile	tags.c	/^int AddTagsFile(char *tagSpec)$/;"	f
AddToPrevOpenMenu	menu.c	/^void AddToPrevOpenMenu(const char *filename)$/;"	f
AllocString	interpret.c	/^char *AllocString(int length)$/;"	f
AllocateSparseArrayEntry	interpret.c	/^SparseArrayEntry *AllocateSparseArrayEntry(void)$/;"	f
AllocatedSparseArrayEntries	interpret.c	/^static SparseArrayEntryWrapper *AllocatedSparseArrayEntries = NULL; $/;"	v	file:
AllocatedStrings	interpret.c	/^static char *AllocatedStrings = NULL;$/;"	v	file:
AllocatedStringsDiffer	preferences.c	/^int AllocatedStringsDiffer(const char *s1, const char *s2)$/;"	f
ArgV0	nedit.c	/^char *ArgV0;$/;"	v
ArrayCopy	interpret.c	/^int ArrayCopy(DataValue *dstArray, DataValue *srcArray)$/;"	f
ArrayDelete	interpret.c	/^void ArrayDelete(DataValue *theArray, char *keyStr)$/;"	f
ArrayDeleteAll	interpret.c	/^void ArrayDeleteAll(DataValue *theArray)$/;"	f
ArrayGet	interpret.c	/^int ArrayGet(DataValue *theArray, char *keyStr, DataValue *theValue)$/;"	f
ArrayInsert	interpret.c	/^int ArrayInsert(DataValue *theArray, char *keyStr, DataValue *theValue)$/;"	f
ArrayNew	interpret.c	/^struct SparseArrayEntry *ArrayNew(void)$/;"	f
ArraySize	interpret.c	/^int ArraySize(DataValue *theArray)$/;"	f
AttachHighlightToWidget	highlight.c	/^void AttachHighlightToWidget(Widget widget, WindowInfo *window)$/;"	f
AutoIndentTypes	preferences.c	/^static char *AutoIndentTypes[N_INDENT_STYLES+3] = {"None", "Auto",$/;"	v	file:
AutoWrapTypes	preferences.c	/^static char *AutoWrapTypes[N_WRAP_STYLES+3] = {"None", "Newline", "Continuous",$/;"	v	file:
BACK	regularExp.c	150;"	d	file:
BACKWARD	tags.c	/^enum searchDirection {FORWARD, BACKWARD};$/;"	e	file:	enum:searchDirection
BACK_REF	regularExp.c	157;"	d	file:
BACK_REF_CI	regularExp.c	158;"	d	file:
BAD_FONT	preferences.c	/^enum fontStatus {GOOD_FONT, BAD_PRIMARY, BAD_FONT, BAD_SIZE, BAD_SPACING};$/;"	e	file:	enum:fontStatus
BAD_PRIMARY	preferences.c	/^enum fontStatus {GOOD_FONT, BAD_PRIMARY, BAD_FONT, BAD_SIZE, BAD_SPACING};$/;"	e	file:	enum:fontStatus
BAD_SIZE	preferences.c	/^enum fontStatus {GOOD_FONT, BAD_PRIMARY, BAD_FONT, BAD_SIZE, BAD_SPACING};$/;"	e	file:	enum:fontStatus
BAD_SPACING	preferences.c	/^enum fontStatus {GOOD_FONT, BAD_PRIMARY, BAD_FONT, BAD_SIZE, BAD_SPACING};$/;"	e	file:	enum:fontStatus
BANNER_WAIT_TIME	macro.c	86;"	d	file:
BANNER_WAIT_TIME	shell.c	76;"	d	file:
BGMenuCmdDialog	userCmds.c	/^static Widget BGMenuCmdDialog = NULL;$/;"	v	file:
BGMenuItems	userCmds.c	/^static menuItemRec *BGMenuItems[MAX_ITEMS_PER_MENU];$/;"	v	file:
BGMenuPasteReplayBtn	userCmds.c	/^static Widget BGMenuPasteReplayBtn = NULL;$/;"	v	file:
BG_MENU_CMDS	userCmds.c	/^enum dialogTypes {SHELL_CMDS, MACRO_CMDS, BG_MENU_CMDS};$/;"	e	file:	enum:dialogTypes
BINARY_NUMERIC_OPERATION	interpret.c	931;"	d	file:
BLOCK_CURSOR	textDisp.h	/^enum cursorStyles {NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR, BLOCK_CURSOR,$/;"	e	enum:cursorStyles
BLOCK_DELETE	undo.h	/^		BLOCK_INSERT, BLOCK_REPLACE, BLOCK_DELETE};$/;"	e	enum:undoTypes
BLOCK_INSERT	undo.h	/^		BLOCK_INSERT, BLOCK_REPLACE, BLOCK_DELETE};$/;"	e	enum:undoTypes
BLOCK_REPLACE	undo.h	/^		BLOCK_INSERT, BLOCK_REPLACE, BLOCK_DELETE};$/;"	e	enum:undoTypes
BOL	regularExp.c	101;"	d	file:
BOLD_FONT	highlightData.c	/^enum fontTypes {PLAIN_FONT, ITALIC_FONT, BOLD_FONT, BOLD_ITALIC_FONT};$/;"	e	file:	enum:fontTypes
BOLD_ITALIC_FONT	highlightData.c	/^enum fontTypes {PLAIN_FONT, ITALIC_FONT, BOLD_FONT, BOLD_ITALIC_FONT};$/;"	e	file:	enum:fontTypes
BORDER	highlightData.c	2107;"	d	file:
BORDER	smartIndent.c	880;"	d	file:
BOTTOM_MARGIN	textDisp.c	38;"	d	file:
BOWORD	regularExp.c	103;"	d	file:
BRACE	regularExp.c	143;"	d	file:
BRANCH	regularExp.c	149;"	d	file:
BREAK	parse.c	71;"	d	file:
BTN_TEXT_OFFSET	preferences.c	2881;"	d	file:
Back_Ref_End	regularExp.c	/^static unsigned char  *Back_Ref_End   [10]; \/* Back_Ref_End [0] are not      *\/$/;"	v	file:
Back_Ref_Start	regularExp.c	/^static unsigned char  *Back_Ref_Start [10]; \/* Back_Ref_Start [0] and        *\/$/;"	v	file:
BeginBlockDrag	textDrag.c	/^void BeginBlockDrag(TextWidget tw)$/;"	f
BeginCreatingProgram	interpret.c	/^void BeginCreatingProgram(void)$/;"	f
BeginGotoMarkCommand	selection.c	/^void BeginGotoMarkCommand(WindowInfo *window, int extend)$/;"	f
BeginISearch	search.c	/^void BeginISearch(WindowInfo *window, int direction)$/;"	f
BeginLearn	macro.c	/^void BeginLearn(WindowInfo *window)$/;"	f
BeginMarkCommand	selection.c	/^void BeginMarkCommand(WindowInfo *window)$/;"	f
BeginSmartIndent	smartIndent.c	/^void BeginSmartIndent(WindowInfo *window, int warn)$/;"	f
BlockDragSelection	textDrag.c	/^void BlockDragSelection(TextWidget tw, int x, int y, int dragType)$/;"	f
Bookmark	nedit.h	/^} Bookmark;$/;"	t
Brace	regularExp.c	/^static struct brace_counts *Brace;$/;"	v	file:
Brace_Char	regularExp.c	/^static unsigned char  Brace_Char;$/;"	v	file:
BufAddModifyCB	textBuf.c	/^void BufAddModifyCB(textBuffer *buf, bufModifyCallbackProc bufModifiedCB,$/;"	f
BufCharWidth	textBuf.c	/^int BufCharWidth(char c, int indent, int tabDist, char nullSubsChar)$/;"	f
BufClearRect	textBuf.c	/^void BufClearRect(textBuffer *buf, int start, int end, int rectStart,$/;"	f
BufCopyFromBuf	textBuf.c	/^void BufCopyFromBuf(textBuffer *fromBuf, textBuffer *toBuf, int fromStart,$/;"	f
BufCountBackwardNLines	textBuf.c	/^int BufCountBackwardNLines(textBuffer *buf, int startPos, int nLines)$/;"	f
BufCountDispChars	textBuf.c	/^int BufCountDispChars(textBuffer *buf, int lineStartPos, int targetPos)$/;"	f
BufCountForwardDispChars	textBuf.c	/^int BufCountForwardDispChars(textBuffer *buf, int lineStartPos, int nChars)$/;"	f
BufCountForwardNLines	textBuf.c	/^int BufCountForwardNLines(textBuffer *buf, int startPos, int nLines)$/;"	f
BufCountLines	textBuf.c	/^int BufCountLines(textBuffer *buf, int startPos, int endPos)$/;"	f
BufCreate	textBuf.c	/^textBuffer *BufCreate(void)$/;"	f
BufCreatePreallocated	textBuf.c	/^textBuffer *BufCreatePreallocated(int requestedSize)$/;"	f
BufEndOfLine	textBuf.c	/^int BufEndOfLine(textBuffer *buf, int pos)$/;"	f
BufExpandCharacter	textBuf.c	/^int BufExpandCharacter(char c, int indent, char *outStr, int tabDist,$/;"	f
BufFree	textBuf.c	/^void BufFree(textBuffer *buf)$/;"	f
BufGetAll	textBuf.c	/^char *BufGetAll(textBuffer *buf)$/;"	f
BufGetCharacter	textBuf.c	/^char BufGetCharacter(textBuffer *buf, int pos)$/;"	f
BufGetExpandedChar	textBuf.c	/^int BufGetExpandedChar(textBuffer *buf, int pos, int indent, char *outStr)$/;"	f
BufGetHighlightPos	textBuf.c	/^int BufGetHighlightPos(textBuffer *buf, int *start, int *end,$/;"	f
BufGetHighlightText	textBuf.c	/^char *BufGetHighlightText(textBuffer *buf)$/;"	f
BufGetLineText	textBuf.c	/^char *BufGetLineText(textBuffer *buf, int pos)$/;"	f
BufGetRange	textBuf.c	/^char *BufGetRange(textBuffer *buf, int start, int end)$/;"	f
BufGetSecSelectPos	textBuf.c	/^int BufGetSecSelectPos(textBuffer *buf, int *start, int *end,$/;"	f
BufGetSecSelectText	textBuf.c	/^char *BufGetSecSelectText(textBuffer *buf)$/;"	f
BufGetSelectionPos	textBuf.c	/^int BufGetSelectionPos(textBuffer *buf, int *start, int *end,$/;"	f
BufGetSelectionText	textBuf.c	/^char *BufGetSelectionText(textBuffer *buf)$/;"	f
BufGetTabDistance	textBuf.c	/^int BufGetTabDistance(textBuffer *buf)$/;"	f
BufGetTextInRect	textBuf.c	/^char *BufGetTextInRect(textBuffer *buf, int start, int end,$/;"	f
BufHighlight	textBuf.c	/^void BufHighlight(textBuffer *buf, int start, int end)$/;"	f
BufInsert	textBuf.c	/^void BufInsert(textBuffer *buf, int pos, const char *text)$/;"	f
BufInsertCol	textBuf.c	/^void BufInsertCol(textBuffer *buf, int column, int startPos, const char *text,$/;"	f
BufOverlayRect	textBuf.c	/^void BufOverlayRect(textBuffer *buf, int startPos, int rectStart,$/;"	f
BufRectHighlight	textBuf.c	/^void BufRectHighlight(textBuffer *buf, int start, int end,$/;"	f
BufRectSelect	textBuf.c	/^void BufRectSelect(textBuffer *buf, int start, int end, int rectStart,$/;"	f
BufRemove	textBuf.c	/^void BufRemove(textBuffer *buf, int start, int end)$/;"	f
BufRemoveModifyCB	textBuf.c	/^void BufRemoveModifyCB(textBuffer *buf, bufModifyCallbackProc bufModifiedCB,$/;"	f
BufRemoveRect	textBuf.c	/^void BufRemoveRect(textBuffer *buf, int start, int end, int rectStart,$/;"	f
BufRemoveSecSelect	textBuf.c	/^void BufRemoveSecSelect(textBuffer *buf)$/;"	f
BufRemoveSelected	textBuf.c	/^void BufRemoveSelected(textBuffer *buf)$/;"	f
BufReplace	textBuf.c	/^void BufReplace(textBuffer *buf, int start, int end, const char *text)$/;"	f
BufReplaceRect	textBuf.c	/^void BufReplaceRect(textBuffer *buf, int start, int end, int rectStart,$/;"	f
BufReplaceSecSelect	textBuf.c	/^void BufReplaceSecSelect(textBuffer *buf, char *text)$/;"	f
BufReplaceSelected	textBuf.c	/^void BufReplaceSelected(textBuffer *buf, char *text)$/;"	f
BufSearchBackward	textBuf.c	/^int BufSearchBackward(textBuffer *buf, int startPos, char *searchChars,$/;"	f
BufSearchForward	textBuf.c	/^int BufSearchForward(textBuffer *buf, int startPos, char *searchChars,$/;"	f
BufSecRectSelect	textBuf.c	/^void BufSecRectSelect(textBuffer *buf, int start, int end,$/;"	f
BufSecondarySelect	textBuf.c	/^void BufSecondarySelect(textBuffer *buf, int start, int end)$/;"	f
BufSecondaryUnselect	textBuf.c	/^void BufSecondaryUnselect(textBuffer *buf)$/;"	f
BufSelect	textBuf.c	/^void BufSelect(textBuffer *buf, int start, int end)$/;"	f
BufSetAll	textBuf.c	/^void BufSetAll(textBuffer *buf, const char *text)$/;"	f
BufSetTabDistance	textBuf.c	/^void BufSetTabDistance(textBuffer *buf, int tabDist)$/;"	f
BufStartOfLine	textBuf.c	/^int BufStartOfLine(textBuffer *buf, int pos)$/;"	f
BufSubstituteNullChars	textBuf.c	/^int BufSubstituteNullChars(char *string, int length, textBuffer *buf)$/;"	f
BufUnhighlight	textBuf.c	/^void BufUnhighlight(textBuffer *buf)$/;"	f
BufUnselect	textBuf.c	/^void BufUnselect(textBuffer *buf)$/;"	f
BufUnsubstituteNullChars	textBuf.c	/^void BufUnsubstituteNullChars(char *string, textBuffer *buf)$/;"	f
BuiltInSubr	interpret.h	/^typedef int (*BuiltInSubr)(WindowInfo *window, DataValue *argList, int nArgs,$/;"	t
CAN_CROSS_LINE_BOUNDARIES	highlight.c	83;"	d	file:
CARET_CURSOR	textDisp.h	/^enum cursorStyles {NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR, BLOCK_CURSOR,$/;"	e	enum:cursorStyles
CHARACTER_POS	textDisp.c	/^enum positionTypes {CURSOR_POS, CHARACTER_POS};$/;"	e	file:	enum:positionTypes
CHARSET	nedit.h	62;"	d
CHAR_TYPED	text.h	/^enum smartIndentCallbackReasons {NEWLINE_INDENT_NEEDED, CHAR_TYPED};$/;"	e	enum:smartIndentCallbackReasons
CHECK_CLASS_ESCAPE	regularExp.c	361;"	d	file:
CHECK_ESCAPE	regularExp.c	360;"	d	file:
CLEAR_ALL_LOCKS	nedit.h	104;"	d
CLICKED_IN_SELECTION	textP.h	/^	CLICKED_IN_SELECTION,  PRIMARY_DRAG, PRIMARY_RECT_DRAG, SECONDARY_DRAG,$/;"	e	enum:dragStates
CLOSE	regularExp.c	171;"	d	file:
COLOR_ONLY	highlight.h	5;"	d
COM_FAILURE	server.h	4;"	d
COM_OK	server.h	3;"	d
CONCAT	parse.c	82;"	d	file:
CONST_SYM	interpret.h	/^enum symTypes {CONST_SYM, GLOBAL_SYM, LOCAL_SYM, ARG_SYM, PROC_VALUE_SYM,$/;"	e	enum:symTypes
CONTINUE	parse.c	72;"	d	file:
CONTINUOUS_WRAP	nedit.h	/^enum wrapStyle {NO_WRAP, NEWLINE_WRAP, CONTINUOUS_WRAP};$/;"	e	enum:wrapStyle
CONVERT_FAIL	regexConvert.c	41;"	d	file:
CREATE	file.h	3;"	d
CURSOR_POS	textDisp.c	/^enum positionTypes {CURSOR_POS, CHARACTER_POS};$/;"	e	file:	enum:positionTypes
CVSID	file.c	/^static const char CVSID[] = "$Id: file.c,v 1.22 2001\/08\/04 20:49:20 tringali Exp $";$/;"	v	file:
CVSID	help.c	/^static const char CVSID[] = "$Id: help.c,v 1.43 2001\/08\/06 20:38:51 tringali Exp $";$/;"	v	file:
CVSID	highlight.c	/^static const char CVSID[] = "$Id: highlight.c,v 1.14 2001\/07\/29 17:51:49 amai Exp $";$/;"	v	file:
CVSID	highlightData.c	/^static const char CVSID[] = "$Id: highlightData.c,v 1.13 2001\/04\/13 17:50:50 tringali Exp $";$/;"	v	file:
CVSID	interpret.c	/^static const char CVSID[] = "$Id: interpret.c,v 1.14 2001\/08\/02 17:26:50 amai Exp $";$/;"	v	file:
CVSID	macro.c	/^static const char CVSID[] = "$Id: macro.c,v 1.29 2001\/08\/02 22:59:58 slobasso Exp $";$/;"	v	file:
CVSID	menu.c	/^static const char CVSID[] = "$Id: menu.c,v 1.34 2001\/08\/04 20:49:20 tringali Exp $";$/;"	v	file:
CVSID	nc.c	/^static const char CVSID[] = "$Id: nc.c,v 1.9 2001\/08\/04 20:49:21 tringali Exp $";$/;"	v	file:
CVSID	nedit.c	/^static const char CVSID[] = "$Id: nedit.c,v 1.14 2001\/08\/04 20:49:21 tringali Exp $";$/;"	v	file:
CVSID	parse.c	/^static const char CVSID[] = "$Id: parse.y,v 1.15 2001\/07\/11 21:35:50 amai Exp $";$/;"	v	file:
CVSID	preferences.c	/^static const char CVSID[] = "$Id: preferences.c,v 1.27 2001\/07\/17 07:31:57 amai Exp $";$/;"	v	file:
CVSID	rbTree.c	/^static const char CVSID[] = "$Id: rbTree.c,v 1.2 2001\/03\/06 19:49:47 slobasso Exp $";$/;"	v	file:
CVSID	regexConvert.c	/^static const char CVSID[] = "$Id: regexConvert.c,v 1.3 2001\/03\/19 16:30:07 slobasso Exp $";$/;"	v	file:
CVSID	regularExp.c	/^static const char CVSID[] = "$Id: regularExp.c,v 1.7 2001\/04\/06 09:49:56 amai Exp $";$/;"	v	file:
CVSID	search.c	/^static const char CVSID[] = "$Id: search.c,v 1.30 2001\/07\/18 13:00:58 amai Exp $";$/;"	v	file:
CVSID	selection.c	/^static const char CVSID[] = "$Id: selection.c,v 1.8 2001\/04\/16 23:20:11 slobasso Exp $";$/;"	v	file:
CVSID	server.c	/^static const char CVSID[] = "$Id: server.c,v 1.8 2001\/08\/04 20:49:21 tringali Exp $";$/;"	v	file:
CVSID	shell.c	/^static const char CVSID[] = "$Id: shell.c,v 1.11 2001\/08\/04 20:49:21 tringali Exp $";$/;"	v	file:
CVSID	shift.c	/^static const char CVSID[] = "$Id: shift.c,v 1.7 2001\/03\/13 16:48:23 slobasso Exp $";$/;"	v	file:
CVSID	smartIndent.c	/^static const char CVSID[] = "$Id: smartIndent.c,v 1.9 2001\/04\/13 17:50:50 tringali Exp $";$/;"	v	file:
CVSID	tags.c	/^static const char CVSID[] = "$Id: tags.c,v 1.12 2001\/07\/24 21:54:45 tringali Exp $";$/;"	v	file:
CVSID	text.c	/^static const char CVSID[] = "$Id: text.c,v 1.15 2001\/07\/31 11:58:46 amai Exp $";$/;"	v	file:
CVSID	textBuf.c	/^static const char CVSID[] = "$Id: textBuf.c,v 1.9 2001\/07\/25 14:36:43 amai Exp $";$/;"	v	file:
CVSID	textDisp.c	/^static const char CVSID[] = "$Id: textDisp.c,v 1.9 2001\/03\/19 16:30:07 slobasso Exp $";$/;"	v	file:
CVSID	textDrag.c	/^static const char CVSID[] = "$Id: textDrag.c,v 1.3 2001\/02\/26 23:38:03 edg Exp $";$/;"	v	file:
CVSID	textSel.c	/^static const char CVSID[] = "$Id: textSel.c,v 1.3 2001\/02\/26 23:38:03 edg Exp $";$/;"	v	file:
CVSID	undo.c	/^static const char CVSID[] = "$Id: undo.c,v 1.5 2001\/03\/23 14:41:09 slobasso Exp $";$/;"	v	file:
CVSID	userCmds.c	/^static const char CVSID[] = "$Id: userCmds.c,v 1.12 2001\/04\/14 09:51:30 amai Exp $";$/;"	v	file:
CVSID	window.c	/^static const char CVSID[] = "$Id: window.c,v 1.28 2001\/08\/04 20:49:21 tringali Exp $";$/;"	v	file:
C_FUNCTION_SYM	interpret.h	/^    	C_FUNCTION_SYM, MACRO_FUNCTION_SYM, ACTION_ROUTINE_SYM};$/;"	e	enum:symTypes
CancelBlockDrag	textDrag.c	/^void CancelBlockDrag(TextWidget tw)$/;"	f
CancelMacroOrLearn	macro.c	/^void CancelMacroOrLearn(WindowInfo *window)$/;"	f
CheckCloseDim	menu.c	/^void CheckCloseDim(void)$/;"	f
CheckForChangesToFile	file.c	/^void CheckForChangesToFile(WindowInfo *window)$/;"	f
CheckMacroString	macro.c	/^int CheckMacroString(Widget dialogParent, char *string, char *errIn,$/;"	f
CheckPrefsChangesSaved	preferences.c	/^int CheckPrefsChangesSaved(Widget dialogParent)$/;"	f
CheckReadOnly	file.c	/^int CheckReadOnly(WindowInfo *window)$/;"	f
ChooseFonts	preferences.c	/^void ChooseFonts(WindowInfo *window, int forWindow)$/;"	f
ClearModeMessage	window.c	/^void ClearModeMessage(WindowInfo *window)$/;"	f
ClearRedoList	undo.c	/^void ClearRedoList(WindowInfo *window)$/;"	f
ClearUndoList	undo.c	/^void ClearUndoList(WindowInfo *window)$/;"	f
CloseAllFilesAndWindows	file.c	/^int CloseAllFilesAndWindows(void)$/;"	f
CloseFileAndWindow	file.c	/^int CloseFileAndWindow(WindowInfo *window, int preResponse)$/;"	f
ClosePane	window.c	/^void ClosePane(WindowInfo *window)$/;"	f
CloseWindow	window.c	/^void CloseWindow(WindowInfo *window)$/;"	f
Closed_Parens	regularExp.c	/^static int            Closed_Parens;   \/* Bit flags indicating () closure. *\/$/;"	v	file:
Code_Emit_Ptr	regexConvert.c	/^static unsigned char *Code_Emit_Ptr;   \/* When Code_Emit_Ptr is set to$/;"	v	file:
Code_Emit_Ptr	regularExp.c	/^static unsigned char *Code_Emit_Ptr;   \/* When Code_Emit_Ptr is set to$/;"	v	file:
ColText	preferences.c	/^static Widget RowText, ColText;$/;"	v	file:
ColorOfNamedStyle	highlightData.c	/^char *ColorOfNamedStyle(char *styleName)$/;"	f
CommonDialog	smartIndent.c	/^} CommonDialog = {NULL};$/;"	v	file:
CommonMacros	smartIndent.c	/^static char *CommonMacros = NULL;$/;"	v	file:
CompileRE	regularExp.c	/^regexp * CompileRE (const char *exp, char **errorText, int defaultFlags) {$/;"	f
Compute_Size	regexConvert.c	/^static unsigned char  Compute_Size;$/;"	v	file:
Compute_Size	regularExp.c	/^static unsigned char  Compute_Size;    \/* Address of this used as flag. *\/$/;"	v	file:
ContinueMacro	interpret.c	/^int ContinueMacro(RestartData *continuation, DataValue *result, char **msg)$/;"	f
ControlCodeTable	textBuf.c	/^static const char *ControlCodeTable[32] = {$/;"	v	file:
ControlCodeTable	textBuf.c	/^static const char *ControlCodeTable[64] = {$/;"	v	file:
ConvertRE	regexConvert.c	/^char * ConvertRE (char *exp, char **errorText, char *cap_parens) {$/;"	f
ConvertSubstituteRE	regexConvert.c	/^void ConvertSubstituteRE ($/;"	f
Convert_Size	regexConvert.c	/^static unsigned long  Convert_Size;    \/* Address of this used as flag. *\/$/;"	v	file:
Convert_Str	regexConvert.c	/^static unsigned char *Convert_Str;$/;"	v	file:
CopyAllocatedString	preferences.c	/^char *CopyAllocatedString(const char *string)$/;"	f
CopyToClipboard	textSel.c	/^void CopyToClipboard(Widget w, Time time)$/;"	f
CreateBGMenu	menu.c	/^Widget CreateBGMenu(WindowInfo *window)$/;"	f
CreateLanguageModeMenu	preferences.c	/^Widget CreateLanguageModeMenu(Widget parent, XtCallbackProc cbProc, void *cbArg)$/;"	f
CreateLanguageModeSubMenu	preferences.c	/^Widget CreateLanguageModeSubMenu(WindowInfo *window, Widget parent, char *name,$/;"	f
CreateMenuBar	menu.c	/^Widget CreateMenuBar(Widget parent, WindowInfo *window)$/;"	f
CreateNEditPrefDB	preferences.c	/^XrmDatabase CreateNEditPrefDB(int *argcInOut, char **argvInOut)$/;"	f
CreateWindow	window.c	/^WindowInfo *CreateWindow(char *name, char *geometry, int iconic)$/;"	f
Cross_Regex_Backref	regularExp.c	/^static regexp *Cross_Regex_Backref;$/;"	v	file:
Current_Delimiters	regularExp.c	/^static unsigned char *Current_Delimiters;  \/* Current delimiter table *\/$/;"	v	file:
DECR	parse.c	96;"	d	file:
DEFAULT_EM_TAB_DIST	preferences.c	123;"	d	file:
DEFAULT_INDENT	preferences.c	121;"	d	file:
DEFAULT_TAB_DIST	preferences.c	122;"	d	file:
DEFAULT_WRAP	preferences.c	120;"	d	file:
DEFER_PARSING	highlight.h	4;"	d
DELETE	parse.c	94;"	d	file:
DIGIT	regularExp.c	121;"	d	file:
DIM_CURSOR	textDisp.h	/^enum cursorStyles {NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR, BLOCK_CURSOR,$/;"	e	enum:cursorStyles
DIVEQ	parse.c	78;"	d	file:
DOSEARCH	search.c	4011;"	d	file:
DOSEARCHWORD	search.c	3912;"	d	file:
DOS_FILE_FORMAT	nedit.h	/^enum fileFormats {UNIX_FILE_FORMAT, DOS_FILE_FORMAT, MAC_FILE_FORMAT};$/;"	e	enum:fileFormats
DRAG_CANCELED	textP.h	/^	SECONDARY_RECT_DRAG, PRIMARY_BLOCK_DRAG, DRAG_CANCELED, MOUSE_PAN};$/;"	e	enum:dragStates
DRAG_COPY	textDrag.h	/^enum blockDragTypes {USE_LAST, DRAG_COPY, DRAG_MOVE, DRAG_OVERLAY_MOVE,$/;"	e	enum:blockDragTypes
DRAG_MOVE	textDrag.h	/^enum blockDragTypes {USE_LAST, DRAG_COPY, DRAG_MOVE, DRAG_OVERLAY_MOVE,$/;"	e	enum:blockDragTypes
DRAG_OVERLAY_COPY	textDrag.h	/^    	DRAG_OVERLAY_COPY};$/;"	e	enum:blockDragTypes
DRAG_OVERLAY_MOVE	textDrag.h	/^enum blockDragTypes {USE_LAST, DRAG_COPY, DRAG_MOVE, DRAG_OVERLAY_MOVE,$/;"	e	enum:blockDragTypes
DataValue	interpret.h	/^} DataValue;$/;"	t
DefTagHashSize	tags.c	/^static int DefTagHashSize = 10000;$/;"	v	file:
DefaultCommonMacros	smartIndent.c	/^static char DefaultCommonMacros[] = "#\\n\\$/;"	v	file:
DefaultIndentSpecs	smartIndent.c	/^static smartIndentRec DefaultIndentSpecs[N_DEFAULT_INDENT_SPECS] = {$/;"	v	file:
DefaultPatternSets	highlightData.c	/^static char *DefaultPatternSets[] = {$/;"	v	file:
Default_Delimiters	regularExp.c	/^static unsigned char  Default_Delimiters [UCHAR_MAX] = {0};$/;"	v	file:
Default_Meta_Char	regularExp.c	/^static unsigned char  Default_Meta_Char [] = "{.*+?[(|)^<>$";$/;"	v	file:
DeleteTagsFile	tags.c	/^int DeleteTagsFile(char *filename)$/;"	f
DetermineLanguageMode	preferences.c	/^void DetermineLanguageMode(WindowInfo *window, int forceNewDefaults)$/;"	f
DimPasteReplayBtns	userCmds.c	/^void DimPasteReplayBtns(int sensitive)$/;"	f
DimSelectionDepUserMenuItems	userCmds.c	/^void DimSelectionDepUserMenuItems(WindowInfo *window, int sensitive)$/;"	f
DoFindDlog	search.c	/^void DoFindDlog(WindowInfo *window, int direction, int searchType,$/;"	f
DoFindReplaceDlog	search.c	/^void DoFindReplaceDlog(WindowInfo *window, int direction, int searchType,$/;"	f
DoMacro	macro.c	/^void DoMacro(WindowInfo *window, char *macro, char *errInName)$/;"	f
DoNamedBGMenuCmd	userCmds.c	/^int DoNamedBGMenuCmd(WindowInfo *window, char *itemName)$/;"	f
DoNamedMacroMenuCmd	userCmds.c	/^int DoNamedMacroMenuCmd(WindowInfo *window, char *itemName)$/;"	f
DoNamedShellMenuCmd	userCmds.c	/^int DoNamedShellMenuCmd(WindowInfo *window, char *itemName, int fromMacro)$/;"	f
DoReplaceMultiFileDlog	search.c	/^void DoReplaceMultiFileDlog(WindowInfo *window)$/;"	f
DoShellMenuCmd	shell.c	/^void DoShellMenuCmd(WindowInfo *window, char *command, int input, int output,$/;"	f
DoneWithSizeDialog	preferences.c	/^static int DoneWithSizeDialog;$/;"	v	file:
DoneWithTabsDialog	preferences.c	/^static int DoneWithTabsDialog;$/;"	v	file:
DoneWithWrapDialog	preferences.c	/^static int DoneWithWrapDialog;$/;"	v	file:
DowncaseSelection	shift.c	/^void DowncaseSelection(WindowInfo *window)$/;"	f
DumpTree	rbTree.c	/^static void DumpTree(rbTreeNode *base)$/;"	f	file:
ELSE	parse.c	69;"	d	file:
EMIT_CLASS_BYTES	regularExp.c	363;"	d	file:
EMIT_NODE	regularExp.c	365;"	d	file:
END	regularExp.c	97;"	d	file:
EOL	regularExp.c	102;"	d	file:
EOWORD	regularExp.c	104;"	d	file:
EQ	parse.c	89;"	d	file:
EQUIVALENT_STYLE	highlight.c	74;"	d	file:
ERROR_DIALOGS	shell.c	81;"	d	file:
EVERY	regularExp.c	117;"	d	file:
EXACTLY	regularExp.c	109;"	d	file:
EXCHANGE_SECONDARY	textSel.c	/^	EXCHANGE_SECONDARY};$/;"	e	file:	enum:selectNotifyActions
EditBGMenu	userCmds.c	/^void EditBGMenu(WindowInfo *window)$/;"	f
EditCommonSmartIndentMacro	smartIndent.c	/^void EditCommonSmartIndentMacro(void)$/;"	f
EditExistingFile	file.c	/^WindowInfo *EditExistingFile(WindowInfo *inWindow, char *name, char *path,$/;"	f
EditHighlightPatterns	highlightData.c	/^void EditHighlightPatterns(WindowInfo *window)$/;"	f
EditHighlightStyles	highlightData.c	/^void EditHighlightStyles(Widget parent, char *initialStyle)$/;"	f
EditLanguageModes	preferences.c	/^void EditLanguageModes(Widget parent)$/;"	f
EditMacroMenu	userCmds.c	/^void EditMacroMenu(WindowInfo *window)$/;"	f
EditNewFile	file.c	/^void EditNewFile(char *geometry, int iconic, char *languageMode,$/;"	f
EditShellMenu	userCmds.c	/^void EditShellMenu(WindowInfo *window)$/;"	f
EditSmartIndentMacros	smartIndent.c	/^void EditSmartIndentMacros(WindowInfo *window)$/;"	f
EmTabLabel	preferences.c	/^static Widget TabDistText, EmTabText, EmTabToggle, UseTabsToggle, EmTabLabel;$/;"	v	file:
EmTabText	preferences.c	/^static Widget TabDistText, EmTabText, EmTabToggle, UseTabsToggle, EmTabLabel;$/;"	v	file:
EmTabToggle	preferences.c	/^static Widget TabDistText, EmTabText, EmTabToggle, UseTabsToggle, EmTabLabel;$/;"	v	file:
EnableCountingQuantifier	regularExp.c	/^void EnableCountingQuantifier (int is_enabled) {$/;"	f
Enable_Counting_Quantifier	regularExp.c	/^static int            Enable_Counting_Quantifier = 1;$/;"	v	file:
EndISearch	search.c	/^void EndISearch(WindowInfo *window)$/;"	f
EndSmartIndent	smartIndent.c	/^void EndSmartIndent(WindowInfo *window)$/;"	f
End_Ptr_Ptr	regularExp.c	/^static unsigned char **End_Ptr_Ptr;         \/* Ditto for `endp'.             *\/$/;"	v	file:
ErrMsg	interpret.c	/^static char *ErrMsg;		    \/* global for returning error messages$/;"	v	file:
ErrMsg	parse.c	/^static char *ErrMsg;$/;"	v	file:
Error_Ptr	regexConvert.c	/^static char         **Error_Ptr;       \/* Place to store error messages so$/;"	v	file:
Error_Ptr	regularExp.c	/^static char         **Error_Ptr;       \/* Place to store error messages so$/;"	v	file:
Error_Text	regexConvert.c	/^static char           Error_Text [128];\/* Sting to build error messages in. *\/$/;"	v	file:
Error_Text	regularExp.c	/^static char           Error_Text [128];\/* Sting to build error messages in. *\/$/;"	v	file:
EscapeChars	macro.c	/^static char EscapeChars[] = "\\\\\\"\\n\\t\\b\\r\\f\\a\\v";$/;"	v	file:
EscapeSensitiveChars	preferences.c	/^char *EscapeSensitiveChars(const char *string)$/;"	f
ExchangeSelections	textSel.c	/^void ExchangeSelections(Widget w, Time time)$/;"	f
ExecCursorLine	shell.c	/^void ExecCursorLine(WindowInfo *window, int fromMacro)$/;"	f
ExecRE	regularExp.c	/^int ExecRE ($/;"	f
ExecShellCommand	shell.c	/^void ExecShellCommand(WindowInfo *window, char *command, int fromMacro)$/;"	f
ExecuteMacro	interpret.c	/^int ExecuteMacro(WindowInfo *window, Program *prog, int nArgs, DataValue *args,$/;"	f
Extent_Ptr	regularExp.c	/^static unsigned char  *Extent_Ptr;$/;"	v	file:
FILL_MASK	export.c	78;"	d	file:
FILL_MASK	textDisp.c	44;"	d	file:
FLASH_DELIMIT	nedit.h	/^enum showMatchingStyle {NO_FLASH, FLASH_DELIMIT, FLASH_RANGE};$/;"	e	enum:showMatchingStyle
FLASH_DELIMIT_STRING	nedit.h	59;"	d
FLASH_RANGE	nedit.h	/^enum showMatchingStyle {NO_FLASH, FLASH_DELIMIT, FLASH_RANGE};$/;"	e	enum:showMatchingStyle
FLASH_RANGE_STRING	nedit.h	60;"	d
FOR	parse.c	70;"	d	file:
FORCE_LOCKED_BIT	nedit.h	84;"	d
FORCE_READ_ONLY	file.h	5;"	d
FORMAT_SAMPLE_CHARS	file.c	74;"	d	file:
FORMAT_SAMPLE_LINES	file.c	73;"	d	file:
FORWARD	tags.c	/^enum searchDirection {FORWARD, BACKWARD};$/;"	e	file:	enum:searchDirection
FORWARD	undo.c	46;"	d	file:
FROM_EITHER	shell.h	/^enum inSrcs {FROM_SELECTION, FROM_WINDOW, FROM_EITHER, FROM_NONE};$/;"	e	enum:inSrcs
FROM_NONE	shell.h	/^enum inSrcs {FROM_SELECTION, FROM_WINDOW, FROM_EITHER, FROM_NONE};$/;"	e	enum:inSrcs
FROM_SELECTION	shell.h	/^enum inSrcs {FROM_SELECTION, FROM_WINDOW, FROM_EITHER, FROM_NONE};$/;"	e	enum:inSrcs
FROM_WINDOW	shell.h	/^enum inSrcs {FROM_SELECTION, FROM_WINDOW, FROM_EITHER, FROM_NONE};$/;"	e	enum:inSrcs
FULL	menu.c	/^enum menuModes {FULL, SHORT};$/;"	e	file:	enum:menuModes
FillLoopAddrs	interpret.c	/^void FillLoopAddrs(Inst *breakAddr, Inst *continueAddr)$/;"	f
FillSelection	shift.c	/^void FillSelection(WindowInfo *window)$/;"	f
FilterSelection	shell.c	/^void FilterSelection(WindowInfo *window, char *command, int fromMacro)$/;"	f
FindDefinition	tags.c	/^void FindDefinition(WindowInfo *window, Time time,char *arg)$/;"	f
FindLanguageMode	preferences.c	/^int FindLanguageMode(const char *languageName)$/;"	f
FindPatternSet	highlightData.c	/^patternSet *FindPatternSet(const char *langModeName)$/;"	f
FindWindowWithFile	window.c	/^WindowInfo *FindWindowWithFile(char *name, char *path)$/;"	f
FinishBlockDrag	textDrag.c	/^void FinishBlockDrag(TextWidget tw)$/;"	f
FinishCreatingProgram	interpret.c	/^Program *FinishCreatingProgram(void)$/;"	f
FinishLearn	macro.c	/^void FinishLearn(void)$/;"	f
FlashMatching	search.c	/^void FlashMatching(WindowInfo *window, Widget textW)$/;"	f
FocusWindow	interpret.c	/^static WindowInfo *FocusWindow;	    \/* window on which macro commands operate *\/$/;"	v	file:
FontOfNamedStyle	highlightData.c	/^XFontStruct *FontOfNamedStyle(WindowInfo *window, char *styleName)$/;"	f
FontTypeNames	highlightData.c	/^char *FontTypeNames[N_FONT_TYPES] = {"Plain", "Italic", "Bold", "Bold Italic"};$/;"	v
FrameP	interpret.c	/^static DataValue *FrameP;   	    \/* frame pointer (start of local variables$/;"	v	file:
FreeHighlightingData	highlight.c	/^void FreeHighlightingData(WindowInfo *window)$/;"	f
FreeProgram	interpret.c	/^void FreeProgram(Program *prog)$/;"	f
FreeRestartData	interpret.c	/^void FreeRestartData(RestartData *context)$/;"	f
GE	parse.c	86;"	d	file:
GET_OFFSET	regularExp.c	327;"	d	file:
GET_ONE_RSRC	nedit.h	74;"	d
GET_OP_CODE	regularExp.c	325;"	d	file:
GLOBAL_SYM	interpret.h	/^enum symTypes {CONST_SYM, GLOBAL_SYM, LOCAL_SYM, ARG_SYM, PROC_VALUE_SYM,$/;"	e	enum:symTypes
GOOD_FONT	preferences.c	/^enum fontStatus {GOOD_FONT, BAD_PRIMARY, BAD_FONT, BAD_SIZE, BAD_SPACING};$/;"	e	file:	enum:fontStatus
GT	parse.c	85;"	d	file:
GarbageCollectStrings	interpret.c	/^void GarbageCollectStrings(void)$/;"	f
GetAnySelection	selection.c	/^char *GetAnySelection(WindowInfo *window)$/;"	f
GetMenuActions	menu.c	/^XtActionsRec *GetMenuActions(int *nActions)$/;"	f
GetPC	interpret.c	/^Inst *GetPC(void)$/;"	f
GetPaneByIndex	window.c	/^Widget GetPaneByIndex(WindowInfo *window, int paneIndex)$/;"	f
GetPrefAutoIndent	preferences.c	/^int GetPrefAutoIndent(int langMode)$/;"	f
GetPrefAutoSave	preferences.c	/^int GetPrefAutoSave(void)$/;"	f
GetPrefBGMenuBtn	preferences.c	/^char *GetPrefBGMenuBtn(void)$/;"	f
GetPrefBeepOnSearchWrap	preferences.c	/^int GetPrefBeepOnSearchWrap(void)$/;"	f
GetPrefBoldFont	preferences.c	/^XFontStruct *GetPrefBoldFont(void)$/;"	f
GetPrefBoldFontName	preferences.c	/^char *GetPrefBoldFontName(void)$/;"	f
GetPrefBoldItalicFont	preferences.c	/^XFontStruct *GetPrefBoldItalicFont(void)$/;"	f
GetPrefBoldItalicFontName	preferences.c	/^char *GetPrefBoldItalicFontName(void)$/;"	f
GetPrefCols	preferences.c	/^int GetPrefCols(void)$/;"	f
GetPrefDelimiters	preferences.c	/^char *GetPrefDelimiters(void)$/;"	f
GetPrefEmTabDist	preferences.c	/^int GetPrefEmTabDist(int langMode)$/;"	f
GetPrefFindReplaceUsesSelection	preferences.c	/^int GetPrefFindReplaceUsesSelection(void)$/;"	f
GetPrefFontList	preferences.c	/^XmFontList GetPrefFontList(void)$/;"	f
GetPrefFontName	preferences.c	/^char *GetPrefFontName(void)$/;"	f
GetPrefGeometry	preferences.c	/^char *GetPrefGeometry(void)$/;"	f
GetPrefHighlightSyntax	preferences.c	/^int GetPrefHighlightSyntax(void)$/;"	f
GetPrefISearchLine	preferences.c	/^int GetPrefISearchLine(void)$/;"	f
GetPrefInsertTabs	preferences.c	/^int GetPrefInsertTabs(void)$/;"	f
GetPrefItalicFont	preferences.c	/^XFontStruct *GetPrefItalicFont(void)$/;"	f
GetPrefItalicFontName	preferences.c	/^char *GetPrefItalicFontName(void)$/;"	f
GetPrefKeepSearchDlogs	preferences.c	/^int GetPrefKeepSearchDlogs(void)$/;"	f
GetPrefLineNums	preferences.c	/^int GetPrefLineNums(void)$/;"	f
GetPrefMapDelete	preferences.c	/^int GetPrefMapDelete(void)$/;"	f
GetPrefMaxPrevOpenFiles	preferences.c	/^int GetPrefMaxPrevOpenFiles(void)$/;"	f
GetPrefReplaceDefScope	preferences.c	/^int GetPrefReplaceDefScope(void)$/;"	f
GetPrefRepositionDialogs	preferences.c	/^int GetPrefRepositionDialogs(void)$/;"	f
GetPrefRows	preferences.c	/^int GetPrefRows(void)$/;"	f
GetPrefSaveOldVersion	preferences.c	/^int GetPrefSaveOldVersion(void)$/;"	f
GetPrefSearch	preferences.c	/^int GetPrefSearch(void)$/;"	f
GetPrefSearchDlogs	preferences.c	/^int GetPrefSearchDlogs(void)$/;"	f
GetPrefSearchWraps	preferences.c	/^int GetPrefSearchWraps(void)$/;"	f
GetPrefServerName	preferences.c	/^char *GetPrefServerName(void)$/;"	f
GetPrefShell	preferences.c	/^char *GetPrefShell(void)$/;"	f
GetPrefShortMenus	preferences.c	/^int GetPrefShortMenus(void)$/;"	f
GetPrefShowMatching	preferences.c	/^int GetPrefShowMatching(void)$/;"	f
GetPrefShowPathInWindowsMenu	preferences.c	/^int GetPrefShowPathInWindowsMenu(void)$/;"	f
GetPrefSmartTags	preferences.c	/^int GetPrefSmartTags(void)$/;"	f
GetPrefSortOpenPrevMenu	preferences.c	/^int GetPrefSortOpenPrevMenu(void)$/;"	f
GetPrefStatsLine	preferences.c	/^int GetPrefStatsLine(void)$/;"	f
GetPrefStdOpenDialog	preferences.c	/^int GetPrefStdOpenDialog(void)$/;"	f
GetPrefStickyCaseSenseBtn	preferences.c	/^int GetPrefStickyCaseSenseBtn(void)$/;"	f
GetPrefTabDist	preferences.c	/^int GetPrefTabDist(int langMode)$/;"	f
GetPrefTagFile	preferences.c	/^char *GetPrefTagFile(void)$/;"	f
GetPrefWarnExit	preferences.c	/^int GetPrefWarnExit(void)$/;"	f
GetPrefWarnFileMods	preferences.c	/^int GetPrefWarnFileMods(void)$/;"	f
GetPrefWrap	preferences.c	/^int GetPrefWrap(int langMode)$/;"	f
GetPrefWrapMargin	preferences.c	/^int GetPrefWrapMargin(void)$/;"	f
GetReplayMacro	macro.c	/^char *GetReplayMacro(void)$/;"	f
GetSelection	window.c	/^int GetSelection(Widget widget, int *left, int *right)$/;"	f
GetSimpleSelection	window.c	/^int GetSimpleSelection(textBuffer *buf, int *left, int *right)$/;"	f
GetTextRange	window.c	/^char *GetTextRange(Widget widget, int left, int right)$/;"	f
GetWindowDelimiters	preferences.c	/^char *GetWindowDelimiters(WindowInfo *window)$/;"	f
GlobalSymList	interpret.c	/^static Symbol *GlobalSymList = NULL;$/;"	v	file:
GotoLineNumber	selection.c	/^void GotoLineNumber(WindowInfo *window)$/;"	f
GotoMark	selection.c	/^void GotoMark(WindowInfo *window, Widget w, char label, int extendSel)$/;"	f
GotoMarkDialog	selection.c	/^void GotoMarkDialog(WindowInfo *window, int extend)$/;"	f
GotoMatchingCharacter	search.c	/^void GotoMatchingCharacter(WindowInfo *window)$/;"	f
GotoSelectedLineNumber	selection.c	/^void GotoSelectedLineNumber(WindowInfo *window, Time time)$/;"	f
HAS_WIDTH	regexConvert.c	48;"	d	file:
HAS_WIDTH	regularExp.c	343;"	d	file:
HEAVY_CURSOR	textDisp.h	/^	HEAVY_CURSOR};$/;"	e	enum:cursorStyles
HELP_ACTIONS	help.h	/^	HELP_MACRO_SUBRS, HELP_ACTIONS, HELP_PATTERNS, HELP_SMART_INDENT,$/;"	e	enum:HelpTopic
HELP_BINDING	help.h	/^	HELP_RESOURCES, HELP_BINDING, HELP_LEARN, HELP_MACRO_LANG,$/;"	e	enum:HelpTopic
HELP_BUGS	help.h	/^	HELP_BUGS, HELP_MAILING_LIST, HELP_DISTRIBUTION, HELP_TABS_DIALOG};$/;"	e	enum:HelpTopic
HELP_CLIPBOARD	help.h	/^	HELP_CLIPBOARD, HELP_INDENT, HELP_TABS, HELP_PROGRAMMER, HELP_TAGS,$/;"	e	enum:HelpTopic
HELP_COMMAND_LINE	help.h	/^	HELP_REGEX_EXAMPLE, HELP_COMMAND_LINE, HELP_SERVER, HELP_CUSTOMIZE,$/;"	e	enum:HelpTopic
HELP_CUSTOMIZE	help.h	/^	HELP_REGEX_EXAMPLE, HELP_COMMAND_LINE, HELP_SERVER, HELP_CUSTOMIZE,$/;"	e	enum:HelpTopic
HELP_DISTRIBUTION	help.h	/^	HELP_BUGS, HELP_MAILING_LIST, HELP_DISTRIBUTION, HELP_TABS_DIALOG};$/;"	e	enum:HelpTopic
HELP_FILL	help.h	/^	HELP_MOUSE, HELP_KEYBOARD, HELP_FILL, HELP_FORMAT, HELP_SYNTAX,$/;"	e	enum:HelpTopic
HELP_FORMAT	help.h	/^	HELP_MOUSE, HELP_KEYBOARD, HELP_FILL, HELP_FORMAT, HELP_SYNTAX,$/;"	e	enum:HelpTopic
HELP_INDENT	help.h	/^	HELP_CLIPBOARD, HELP_INDENT, HELP_TABS, HELP_PROGRAMMER, HELP_TAGS,$/;"	e	enum:HelpTopic
HELP_KEYBOARD	help.h	/^	HELP_MOUSE, HELP_KEYBOARD, HELP_FILL, HELP_FORMAT, HELP_SYNTAX,$/;"	e	enum:HelpTopic
HELP_LEARN	help.h	/^	HELP_RESOURCES, HELP_BINDING, HELP_LEARN, HELP_MACRO_LANG,$/;"	e	enum:HelpTopic
HELP_MACRO_LANG	help.h	/^	HELP_RESOURCES, HELP_BINDING, HELP_LEARN, HELP_MACRO_LANG,$/;"	e	enum:HelpTopic
HELP_MACRO_SUBRS	help.h	/^	HELP_MACRO_SUBRS, HELP_ACTIONS, HELP_PATTERNS, HELP_SMART_INDENT,$/;"	e	enum:HelpTopic
HELP_MAILING_LIST	help.h	/^	HELP_BUGS, HELP_MAILING_LIST, HELP_DISTRIBUTION, HELP_TABS_DIALOG};$/;"	e	enum:HelpTopic
HELP_MOUSE	help.h	/^	HELP_MOUSE, HELP_KEYBOARD, HELP_FILL, HELP_FORMAT, HELP_SYNTAX,$/;"	e	enum:HelpTopic
HELP_PATTERNS	help.h	/^	HELP_MACRO_SUBRS, HELP_ACTIONS, HELP_PATTERNS, HELP_SMART_INDENT,$/;"	e	enum:HelpTopic
HELP_PREFERENCES	help.h	/^	HELP_RECOVERY, HELP_PREFERENCES, HELP_SHELL, HELP_REGEX_BASICS,$/;"	e	enum:HelpTopic
HELP_PROGRAMMER	help.h	/^	HELP_CLIPBOARD, HELP_INDENT, HELP_TABS, HELP_PROGRAMMER, HELP_TAGS,$/;"	e	enum:HelpTopic
HELP_RECOVERY	help.h	/^	HELP_RECOVERY, HELP_PREFERENCES, HELP_SHELL, HELP_REGEX_BASICS,$/;"	e	enum:HelpTopic
HELP_REGEX_ADV	help.h	/^	HELP_REGEX_ESC_SEQ, HELP_REGEX_PAREN, HELP_REGEX_ADV,$/;"	e	enum:HelpTopic
HELP_REGEX_BASICS	help.h	/^	HELP_RECOVERY, HELP_PREFERENCES, HELP_SHELL, HELP_REGEX_BASICS,$/;"	e	enum:HelpTopic
HELP_REGEX_ESC_SEQ	help.h	/^	HELP_REGEX_ESC_SEQ, HELP_REGEX_PAREN, HELP_REGEX_ADV,$/;"	e	enum:HelpTopic
HELP_REGEX_EXAMPLE	help.h	/^	HELP_REGEX_EXAMPLE, HELP_COMMAND_LINE, HELP_SERVER, HELP_CUSTOMIZE,$/;"	e	enum:HelpTopic
HELP_REGEX_PAREN	help.h	/^	HELP_REGEX_ESC_SEQ, HELP_REGEX_PAREN, HELP_REGEX_ADV,$/;"	e	enum:HelpTopic
HELP_RESOURCES	help.h	/^	HELP_RESOURCES, HELP_BINDING, HELP_LEARN, HELP_MACRO_LANG,$/;"	e	enum:HelpTopic
HELP_SEARCH	help.h	/^enum HelpTopic {HELP_VERSION, HELP_START, HELP_SEARCH, HELP_SELECT,$/;"	e	enum:HelpTopic
HELP_SELECT	help.h	/^enum HelpTopic {HELP_VERSION, HELP_START, HELP_SEARCH, HELP_SELECT,$/;"	e	enum:HelpTopic
HELP_SERVER	help.h	/^	HELP_REGEX_EXAMPLE, HELP_COMMAND_LINE, HELP_SERVER, HELP_CUSTOMIZE,$/;"	e	enum:HelpTopic
HELP_SHELL	help.h	/^	HELP_RECOVERY, HELP_PREFERENCES, HELP_SHELL, HELP_REGEX_BASICS,$/;"	e	enum:HelpTopic
HELP_SMART_INDENT	help.h	/^	HELP_MACRO_SUBRS, HELP_ACTIONS, HELP_PATTERNS, HELP_SMART_INDENT,$/;"	e	enum:HelpTopic
HELP_START	help.h	/^enum HelpTopic {HELP_VERSION, HELP_START, HELP_SEARCH, HELP_SELECT,$/;"	e	enum:HelpTopic
HELP_SYNTAX	help.h	/^	HELP_MOUSE, HELP_KEYBOARD, HELP_FILL, HELP_FORMAT, HELP_SYNTAX,$/;"	e	enum:HelpTopic
HELP_TABS	help.h	/^	HELP_CLIPBOARD, HELP_INDENT, HELP_TABS, HELP_PROGRAMMER, HELP_TAGS,$/;"	e	enum:HelpTopic
HELP_TABS_DIALOG	help.h	/^	HELP_BUGS, HELP_MAILING_LIST, HELP_DISTRIBUTION, HELP_TABS_DIALOG};$/;"	e	enum:HelpTopic
HELP_TAGS	help.h	/^	HELP_CLIPBOARD, HELP_INDENT, HELP_TABS, HELP_PROGRAMMER, HELP_TAGS,$/;"	e	enum:HelpTopic
HELP_VERSION	help.h	/^enum HelpTopic {HELP_VERSION, HELP_START, HELP_SEARCH, HELP_SELECT,$/;"	e	enum:HelpTopic
HIGHLIGHT_MASK	export.c	81;"	d	file:
HIGHLIGHT_MASK	textDisp.c	47;"	d	file:
HSDialog	highlightData.c	/^} HSDialog = {NULL};$/;"	v	file:
HS_H_MARGIN	highlightData.c	1634;"	d	file:
HS_LEFT_MARGIN_POS	highlightData.c	1632;"	d	file:
HS_LIST_RIGHT	highlightData.c	1631;"	d	file:
HS_RIGHT_MARGIN_POS	highlightData.c	1633;"	d	file:
H_MARGIN	preferences.c	2087;"	d	file:
HandleXSelections	textSel.c	/^void HandleXSelections(Widget w)$/;"	f
HeaderText	preferences.c	/^static const char HeaderText[] = "\\$/;"	v	file:
Help	help.c	/^void Help(Widget parent, enum HelpTopic topic)$/;"	f
HelpText	help.c	/^static const char *const HelpText[NUM_TOPICS] = {$/;"	v	file:
HelpTextPanes	help.c	/^static Widget HelpTextPanes[NUM_TOPICS] = {NULL};$/;"	v	file:
HelpTitles	help.c	/^static const char *const HelpTitles[NUM_TOPICS] = {$/;"	v	file:
HelpTopic	help.h	/^enum HelpTopic {HELP_VERSION, HELP_START, HELP_SEARCH, HELP_SELECT,$/;"	g
HelpWindows	help.c	/^static Widget HelpWindows[NUM_TOPICS] = {NULL}; $/;"	v	file:
HighlightDialog	highlightData.c	/^} HighlightDialog = {NULL, NULL, NULL};$/;"	v	file:
HighlightStyles	highlightData.c	/^static highlightStyleRec *HighlightStyles[MAX_HIGHLIGHT_STYLES];$/;"	v	file:
HistStart	search.c	/^static int HistStart = 0;$/;"	v	file:
IF	parse.c	67;"	d	file:
IF_NO_ELSE	parse.c	74;"	d	file:
IN	parse.c	91;"	d	file:
INCR	parse.c	95;"	d	file:
INC_COUNT	regularExp.c	152;"	d	file:
INDEX_SIZE	regularExp.c	322;"	d	file:
INIT_COUNT	regularExp.c	151;"	d	file:
INSENSITIVE	regularExp.c	349;"	d	file:
INSERT_WAITING	textSel.c	/^enum insertResultFlags {INSERT_WAITING, UNSUCCESSFUL_INSERT, SUCCESSFUL_INSERT};$/;"	e	file:	enum:insertResultFlags
INSTRUCTION_LIMIT	interpret.c	54;"	d	file:
INT_TAG	interpret.h	/^enum typeTags {NO_TAG, INT_TAG, STRING_TAG, ARRAY_TAG};$/;"	e	enum:typeTags
IO_BUF_SIZE	shell.c	69;"	d	file:
IS_ANY_LOCKED	nedit.h	103;"	d
IS_ANY_LOCKED_IGNORING_PERM	nedit.h	102;"	d
IS_ANY_LOCKED_IGNORING_USER	nedit.h	101;"	d
IS_DELIM	regularExp.c	131;"	d	file:
IS_FORCE_LOCKED	nedit.h	96;"	d
IS_PERM_LOCKED	nedit.h	94;"	d
IS_PLAIN	highlight.c	69;"	d	file:
IS_QUANTIFIER	regexConvert.c	42;"	d	file:
IS_QUANTIFIER	regularExp.c	334;"	d	file:
IS_STYLED	highlight.c	70;"	d	file:
IS_TMBD_LOCKED	nedit.h	98;"	d
IS_USER_LOCKED	nedit.h	92;"	d
ITALIC_FONT	highlightData.c	/^enum fontTypes {PLAIN_FONT, ITALIC_FONT, BOLD_FONT, BOLD_ITALIC_FONT};$/;"	e	file:	enum:fontTypes
IgnoredActions	macro.c	/^static char* IgnoredActions[] = {"focusIn", "focusOut"};$/;"	v	file:
ImportPrefFile	preferences.c	/^void ImportPrefFile(const char *filename, int convertOld)$/;"	f
ImportedFile	preferences.c	/^static char *ImportedFile = NULL;$/;"	v	file:
InPtr	parse.c	/^static char *InPtr;$/;"	v	file:
IncludeFile	file.c	/^int IncludeFile(WindowInfo *window, const char *name)$/;"	f
InitMacroGlobals	interpret.c	/^void InitMacroGlobals(void)$/;"	f
InitServerCommunication	server.c	/^void InitServerCommunication(void)$/;"	f
InitiatingWindow	interpret.c	/^	*InitiatingWindow = NULL;   \/* window from which macro was run *\/$/;"	v	file:
InsertClipboard	textSel.c	/^void InsertClipboard(Widget w, Time time, int isColumnar)$/;"	f
InsertPrimarySelection	textSel.c	/^void InsertPrimarySelection(Widget w, Time time, int isColumnar)$/;"	f
Inst	interpret.h	/^typedef int (*Inst)(void);$/;"	t
InstallIteratorSymbol	interpret.c	/^Symbol *InstallIteratorSymbol()$/;"	f
InstallMenuActions	menu.c	/^void InstallMenuActions(XtAppContext context)$/;"	f
InstallSymbol	interpret.c	/^Symbol *InstallSymbol(const char *name, int type, DataValue value)$/;"	f
InvalidateWindowMenus	menu.c	/^void InvalidateWindowMenus(void)$/;"	f
IsServer	nedit.c	/^Boolean IsServer = False;$/;"	v
Is_Case_Insensitive	regularExp.c	/^static int            Is_Case_Insensitive;$/;"	v	file:
LAST_PAREN	regularExp.c	173;"	d	file:
LAZY_BRACE	regularExp.c	144;"	d	file:
LAZY_PLUS	regularExp.c	142;"	d	file:
LAZY_QUESTION	regularExp.c	140;"	d	file:
LAZY_STAR	regularExp.c	138;"	d	file:
LE	parse.c	88;"	d	file:
LEFT_MARGIN	textDisp.c	39;"	d	file:
LEFT_MARGIN_POS	preferences.c	2085;"	d	file:
LEFT_MARGIN_POS	userCmds.c	70;"	d	file:
LETTER	regularExp.c	123;"	d	file:
LIST_DIALOG_BUTTON	macro.c	/^	SHELL_CMD_STATUS, LIST_DIALOG_BUTTON};$/;"	e	file:	enum:retGlobalSyms
LIST_RIGHT	highlightData.c	2108;"	d	file:
LIST_RIGHT	preferences.c	2084;"	d	file:
LIST_RIGHT	userCmds.c	72;"	d	file:
LMDialog	preferences.c	/^} LMDialog = {NULL};$/;"	v	file:
LMHasHighlightPatterns	highlightData.c	/^int LMHasHighlightPatterns(char *languageMode)$/;"	f
LOCAL_SYM	interpret.h	/^enum symTypes {CONST_SYM, GLOBAL_SYM, LOCAL_SYM, ARG_SYM, PROC_VALUE_SYM,$/;"	e	enum:symTypes
LOCKED_BIT_TO_MASK	nedit.h	87;"	d
LOOK_AHEAD_CLOSE	regularExp.c	166;"	d	file:
LOOP_STACK_SIZE	interpret.c	52;"	d	file:
LT	parse.c	87;"	d	file:
LanguageModeName	preferences.c	/^char *LanguageModeName(int mode)$/;"	f
LanguageModes	preferences.c	/^static languageModeRec *LanguageModes[MAX_LANGUAGE_MODES];$/;"	v	file:
LastCommand	macro.c	/^static char *LastCommand = NULL;$/;"	v	file:
LastSearchPos	help.c	/^static int LastSearchPos = 0;$/;"	v	file:
LastSearchString	help.c	/^static char LastSearchString[DF_MAX_PROMPT_LENGTH] = "";$/;"	v	file:
LastSearchTopic	help.c	/^static int LastSearchTopic = -1;$/;"	v	file:
LastSearchWasAllTopics	help.c	/^static int LastSearchWasAllTopics = False;$/;"	v	file:
Letter_Char	regularExp.c	/^static unsigned char  Letter_Char [ALNUM_CHAR_SIZE];  \/* init_ansi_classes () *\/$/;"	v	file:
LoadBGMenuCmdsString	userCmds.c	/^int LoadBGMenuCmdsString(char *inString)$/;"	f
LoadHighlightString	highlightData.c	/^int LoadHighlightString(char *inString, int convertOld)$/;"	f
LoadMacroCmdsString	userCmds.c	/^int LoadMacroCmdsString(char *inString)$/;"	f
LoadShellCmdsString	userCmds.c	/^int LoadShellCmdsString(char *inString)$/;"	f
LoadSmartIndentCommonString	smartIndent.c	/^int LoadSmartIndentCommonString(char *inString)$/;"	f
LoadSmartIndentString	smartIndent.c	/^int LoadSmartIndentString(char *inString)$/;"	f
LoadStylesString	highlightData.c	/^int LoadStylesString(char *inString)$/;"	f
LocalSymList	interpret.c	/^Symbol *LocalSymList = NULL;		 \/* symbols local to the program *\/$/;"	v
LookupStringConstSymbol	interpret.c	/^Symbol *LookupStringConstSymbol(const char *value)$/;"	f
LookupSymbol	interpret.c	/^Symbol *LookupSymbol(const char *name)$/;"	f
LookupTag	tags.c	/^int LookupTag(const char *name, const char **file, $/;"	f
LoopStack	interpret.c	/^static Inst *LoopStack[LOOP_STACK_SIZE]; \/* addresses of break, cont stmts *\/$/;"	v	file:
LoopStackPtr	interpret.c	/^static Inst **LoopStackPtr = LoopStack;  \/*  to fill at the end of a loop *\/$/;"	v	file:
MACRO_CMDS	userCmds.c	/^enum dialogTypes {SHELL_CMDS, MACRO_CMDS, BG_MENU_CMDS};$/;"	e	file:	enum:dialogTypes
MACRO_CMD_TOP	userCmds.c	74;"	d	file:
MACRO_DONE	interpret.h	/^enum execReturnCodes {MACRO_TIME_LIMIT, MACRO_PREEMPT, MACRO_DONE, MACRO_ERROR};$/;"	e	enum:execReturnCodes
MACRO_ERROR	interpret.h	/^enum execReturnCodes {MACRO_TIME_LIMIT, MACRO_PREEMPT, MACRO_DONE, MACRO_ERROR};$/;"	e	enum:execReturnCodes
MACRO_EVENT_MARKER	interpret.h	5;"	d
MACRO_FUNCTION_SYM	interpret.h	/^    	C_FUNCTION_SYM, MACRO_FUNCTION_SYM, ACTION_ROUTINE_SYM};$/;"	e	enum:symTypes
MACRO_PREEMPT	interpret.h	/^enum execReturnCodes {MACRO_TIME_LIMIT, MACRO_PREEMPT, MACRO_DONE, MACRO_ERROR};$/;"	e	enum:execReturnCodes
MACRO_TIME_LIMIT	interpret.h	/^enum execReturnCodes {MACRO_TIME_LIMIT, MACRO_PREEMPT, MACRO_DONE, MACRO_ERROR};$/;"	e	enum:execReturnCodes
MAC_FILE_FORMAT	nedit.h	/^enum fileFormats {UNIX_FILE_FORMAT, DOS_FILE_FORMAT, MAC_FILE_FORMAT};$/;"	e	enum:fileFormats
MAGIC	regularExp.c	66;"	d	file:
MARGIN_SPACING	preferences.c	2880;"	d	file:
MAXDUPTAGS	tags.c	60;"	d	file:
MAXLINE	tags.c	58;"	d	file:
MAXNODENAMELEN	nc.c	63;"	d	file:
MAXNODENAMELEN	nc.c	65;"	d	file:
MAXNODENAMELEN	server.c	65;"	d	file:
MAXNODENAMELEN	server.c	67;"	d	file:
MAXUSERNAMELEN	nc.c	58;"	d	file:
MAXUSERNAMELEN	server.c	60;"	d	file:
MAX_ACCEL_LEN	preferences.h	8;"	d
MAX_ACTION_ARGS	macro.c	83;"	d	file:
MAX_ARGS	interpret.h	2;"	d
MAX_COMPILED_SIZE	regularExp.c	378;"	d	file:
MAX_DISP_LINE_LEN	textDisp.c	53;"	d	file:
MAX_ERR_MSG_LEN	interpret.c	51;"	d	file:
MAX_EXP_CHAR_LEN	textBuf.h	4;"	d
MAX_FILE_EXTENSIONS	preferences.c	77;"	d	file:
MAX_FONT_LEN	nedit.h	21;"	d
MAX_HIGHLIGHT_STYLES	highlightData.c	62;"	d	file:
MAX_ITEMS_PER_MENU	userCmds.c	67;"	d	file:
MAX_LANGUAGE_MODES	preferences.h	5;"	d
MAX_LEARN_MSG_LEN	macro.c	430;"	d	file:
MAX_MACRO_ACTIONS	macro.c	82;"	d	file:
MAX_MARKS	nedit.h	22;"	d
MAX_OUT_DIALOG_COLS	shell.c	73;"	d	file:
MAX_OUT_DIALOG_ROWS	shell.c	72;"	d	file:
MAX_PANES	nedit.h	11;"	d
MAX_PATTERNS	highlightData.c	66;"	d	file:
MAX_SEARCH_HISTORY	nedit.h	10;"	d
MAX_SHELL_CMD_LEN	shell.c	70;"	d	file:
MAX_SHORTENED_ITEMS	nedit.h	50;"	d
MAX_STRING_CONST_LEN	parse.c	42;"	d	file:
MAX_SYM_LEN	interpret.h	4;"	d
MAX_TAG_LEN	tags.c	59;"	d	file:
MAX_TAG_LENGTH	export.c	118;"	d	file:
MAX_TIMEOUT_MSG_LEN	macro.c	1485;"	d	file:
MAX_WORD_DELIMITERS	preferences.c	74;"	d	file:
MIN_LINE_NUM_COLS	nedit.h	23;"	d
MKSTRING	nedit.h	64;"	d
MODEQ	parse.c	79;"	d	file:
MOD_CHECK_INTERVAL	file.c	80;"	d	file:
MOUSE_PAN	textP.h	/^	SECONDARY_RECT_DRAG, PRIMARY_BLOCK_DRAG, DRAG_CANCELED, MOUSE_PAN};$/;"	e	enum:dragStates
MULEQ	parse.c	77;"	d	file:
MacroCmdDialog	userCmds.c	/^static Widget MacroCmdDialog = NULL;$/;"	v	file:
MacroEndBoundary	smartIndent.c	/^static char MacroEndBoundary[] = "--End-of-Macro--";$/;"	v	file:
MacroFocusWindow	interpret.c	/^WindowInfo *MacroFocusWindow(void)$/;"	f
MacroMenuItems	userCmds.c	/^static menuItemRec *MacroMenuItems[MAX_ITEMS_PER_MENU];$/;"	v	file:
MacroPasteReplayBtn	userCmds.c	/^static Widget MacroPasteReplayBtn = NULL;$/;"	v	file:
MacroRecordActionHook	macro.c	/^static XtActionHookId MacroRecordActionHook = 0;$/;"	v	file:
MacroRecordBuf	macro.c	/^static textBuffer *MacroRecordBuf = NULL;$/;"	v	file:
MacroRecordWindow	macro.c	/^static WindowInfo *MacroRecordWindow = NULL;$/;"	v	file:
MacroRunWindow	interpret.c	/^WindowInfo *MacroRunWindow(void)$/;"	f
MacroSubrNames	macro.c	/^static char *MacroSubrNames[N_MACRO_SUBRS] = {"length", "get_range", "t_print",$/;"	v	file:
MacroSubrs	macro.c	/^static BuiltInSubr MacroSubrs[N_MACRO_SUBRS] = {lengthMS, getRangeMS, tPrintMS,$/;"	v	file:
MacroWindowCloseActions	macro.c	/^int MacroWindowCloseActions(WindowInfo *window)$/;"	f
MakeQuotedString	preferences.c	/^char *MakeQuotedString(const char *string)$/;"	f
MakeSelectionVisible	window.c	/^void MakeSelectionVisible(WindowInfo *window, Widget textPane)$/;"	f
MarkArrayContentsAsUsed	interpret.c	/^static void MarkArrayContentsAsUsed(SparseArrayEntry *arrayPtr)$/;"	f	file:
MarkDialog	selection.c	/^void MarkDialog(WindowInfo *window)$/;"	f
MarkPrefsChanged	preferences.c	/^void MarkPrefsChanged(void)$/;"	f
Match_Newline	regularExp.c	/^static int            Match_Newline;$/;"	v	file:
MatchingChars	search.c	/^static charMatchTable MatchingChars[N_MATCH_CHARS] = {$/;"	v	file:
Meta_Char	regexConvert.c	/^static unsigned char  Meta_Char [] = ".*+?[(|)^<>$";$/;"	v	file:
Meta_Char	regularExp.c	/^static unsigned char *Meta_Char;$/;"	v	file:
ModifyReturnedValue	interpret.c	/^void ModifyReturnedValue(RestartData *context, DataValue dv)$/;"	f
MouseActions	macro.c	/^static char* MouseActions[] = {"grab_focus", "extend_adjust", "extend_start",$/;"	v	file:
MovePrimarySelection	textSel.c	/^void MovePrimarySelection(Widget w, Time time, int isColumnar)$/;"	f
NBBY	shell.c	41;"	d	file:
NBGMenuItems	userCmds.c	/^static int NBGMenuItems = 0;$/;"	v	file:
NE	parse.c	90;"	d	file:
NEDIT_DB_FILE_NAME	menu.c	77;"	d	file:
NEDIT_DB_FILE_NAME	menu.c	79;"	d	file:
NEEDS_BREAK	interpret.c	60;"	d	file:
NEEDS_CONTINUE	interpret.c	61;"	d	file:
NEG_LOOK_OPEN	regularExp.c	165;"	d	file:
NEWLINE	regularExp.c	351;"	d	file:
NEWLINE_INDENT_NEEDED	text.h	/^enum smartIndentCallbackReasons {NEWLINE_INDENT_NEEDED, CHAR_TYPED};$/;"	e	enum:smartIndentCallbackReasons
NEWLINE_WRAP	nedit.h	/^enum wrapStyle {NO_WRAP, NEWLINE_WRAP, CONTINUOUS_WRAP};$/;"	e	enum:wrapStyle
NEXT_PTR_SIZE	regularExp.c	321;"	d	file:
NHighlightStyles	highlightData.c	/^static int NHighlightStyles = 0;$/;"	v	file:
NHist	search.c	/^static int NHist = 0;$/;"	v	file:
NLanguageModes	preferences.c	/^static int NLanguageModes = 0;$/;"	v	file:
NMacroMenuItems	userCmds.c	/^static int NMacroMenuItems = 0;$/;"	v	file:
NODE_SIZE	regularExp.c	323;"	d	file:
NORMAL_CURSOR	textDisp.h	/^enum cursorStyles {NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR, BLOCK_CURSOR,$/;"	e	enum:cursorStyles
NOT	parse.c	93;"	d	file:
NOTHING	regularExp.c	148;"	d	file:
NOT_BOUNDARY	regularExp.c	105;"	d	file:
NOT_CLICKED	textP.h	/^enum dragStates {NOT_CLICKED, PRIMARY_CLICKED, SECONDARY_CLICKED,$/;"	e	enum:dragStates
NOT_DELIM	regularExp.c	132;"	d	file:
NOT_DIGIT	regularExp.c	122;"	d	file:
NOT_LETTER	regularExp.c	124;"	d	file:
NOT_SPACE	regularExp.c	127;"	d	file:
NOT_SPACE_NL	regularExp.c	128;"	d	file:
NOT_WORD_CHAR	regularExp.c	130;"	d	file:
NO_AUTO_INDENT	nedit.h	/^enum indentStyle {NO_AUTO_INDENT, AUTO_INDENT, SMART_INDENT};$/;"	e	enum:indentStyle
NO_CAPTURE	regularExp.c	348;"	d	file:
NO_CLICKS	textP.h	/^enum multiClickStates {NO_CLICKS, ONE_CLICK, TWO_CLICKS, THREE_CLICKS};$/;"	e	enum:multiClickStates
NO_CONNECTION	server.h	2;"	d
NO_FLASH	nedit.h	/^enum showMatchingStyle {NO_FLASH, FLASH_DELIMIT, FLASH_RANGE};$/;"	e	enum:showMatchingStyle
NO_FLASH_STRING	nedit.h	58;"	d
NO_HINT	textDisp.h	5;"	d
NO_NEWLINE	regularExp.c	352;"	d	file:
NO_PAREN	regexConvert.c	51;"	d	file:
NO_PAREN	regularExp.c	346;"	d	file:
NO_SBC_DIALOG_RESPONSE	file.h	10;"	d
NO_TAG	interpret.h	/^enum typeTags {NO_TAG, INT_TAG, STRING_TAG, ARRAY_TAG};$/;"	e	enum:typeTags
NO_WRAP	nedit.h	/^enum wrapStyle {NO_WRAP, NEWLINE_WRAP, CONTINUOUS_WRAP};$/;"	e	enum:wrapStyle
NPatternSets	highlightData.c	/^static int NPatternSets = 0;$/;"	v	file:
NPrevOpen	menu.c	/^static int NPrevOpen = 0;$/;"	v	file:
NSUBEXP	regexConvert.c	39;"	d	file:
NSUBEXP	regularExp.h	8;"	d
NShellMenuItems	userCmds.c	/^static int NShellMenuItems = 0;$/;"	v	file:
NSmartIndentSpecs	smartIndent.c	/^static int NSmartIndentSpecs = 0;$/;"	v	file:
NUMBER	parse.c	64;"	d	file:
NUM_TOPICS	help.h	11;"	d
NWindows	window.c	/^int NWindows(void)$/;"	f
N_ARGS_ARG_SYM	interpret.c	63;"	d	file:
N_ATOMS	textSel.c	43;"	d	file:
N_CLIP_TARGETS	textSel.c	42;"	d	file:
N_DEFAULT_INDENT_SPECS	smartIndent.c	132;"	d	file:
N_DEFAULT_PATTERN_SETS	highlightData.c	194;"	d	file:
N_DEFAULT_PATTERN_SETS	highlightData.c	196;"	d	file:
N_FLASH_CHARS	search.c	228;"	d	file:
N_FONT_TYPES	highlightData.c	69;"	d	file:
N_INDENT_STYLES	preferences.c	105;"	d	file:
N_MACRO_SUBRS	macro.c	307;"	d	file:
N_MATCH_CHARS	search.c	227;"	d	file:
N_OPS	interpret.h	11;"	d
N_REPLACEMENTS	textBuf.c	1222;"	d	file:
N_RETURN_GLOBALS	macro.c	356;"	d	file:
N_SELECT_TARGETS	textSel.c	41;"	d	file:
N_SHOW_MATCHING_STYLES	preferences.c	109;"	d	file:
N_SPECIAL_VARS	macro.c	326;"	d	file:
N_WRAP_STYLES	preferences.c	102;"	d	file:
NamedStyleExists	highlightData.c	/^int NamedStyleExists(char *styleName)$/;"	f
Num_Braces	regularExp.c	/^static int            Num_Braces;      \/* Number of general {m,n} constructs.$/;"	v	file:
ONE_CHAR_DELETE	undo.h	/^enum undoTypes {UNDO_NOOP, ONE_CHAR_INSERT, ONE_CHAR_REPLACE, ONE_CHAR_DELETE,$/;"	e	enum:undoTypes
ONE_CHAR_INSERT	undo.h	/^enum undoTypes {UNDO_NOOP, ONE_CHAR_INSERT, ONE_CHAR_REPLACE, ONE_CHAR_DELETE,$/;"	e	enum:undoTypes
ONE_CHAR_REPLACE	undo.h	/^enum undoTypes {UNDO_NOOP, ONE_CHAR_INSERT, ONE_CHAR_REPLACE, ONE_CHAR_DELETE,$/;"	e	enum:undoTypes
ONE_CLICK	textP.h	/^enum multiClickStates {NO_CLICKS, ONE_CLICK, TWO_CLICKS, THREE_CLICKS};$/;"	e	enum:multiClickStates
OPEN	regularExp.c	168;"	d	file:
OPERAND	regularExp.c	326;"	d	file:
OP_ADD	interpret.h	/^enum operations {OP_RETURN_NO_VAL, OP_RETURN, OP_PUSH_SYM, OP_DUP, OP_ADD,$/;"	e	enum:operations
OP_AND	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_ARRAY_ASSIGN	interpret.h	/^    OP_ARRAY_ASSIGN, OP_BEGIN_ARRAY_ITER, OP_ARRAY_ITER, OP_IN_ARRAY,$/;"	e	enum:operations
OP_ARRAY_DELETE	interpret.h	/^    OP_ARRAY_DELETE};$/;"	e	enum:operations
OP_ARRAY_ITER	interpret.h	/^    OP_ARRAY_ASSIGN, OP_BEGIN_ARRAY_ITER, OP_ARRAY_ITER, OP_IN_ARRAY,$/;"	e	enum:operations
OP_ARRAY_REF	interpret.h	/^    OP_BRANCH_TRUE, OP_BRANCH_FALSE, OP_BRANCH_NEVER, OP_ARRAY_REF,$/;"	e	enum:operations
OP_ASSIGN	interpret.h	/^    OP_POWER, OP_CONCAT, OP_ASSIGN, OP_SUBR_CALL, OP_FETCH_RET_VAL, OP_BRANCH,$/;"	e	enum:operations
OP_BEGIN_ARRAY_ITER	interpret.h	/^    OP_ARRAY_ASSIGN, OP_BEGIN_ARRAY_ITER, OP_ARRAY_ITER, OP_IN_ARRAY,$/;"	e	enum:operations
OP_BIT_AND	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_BIT_OR	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_BRANCH	interpret.h	/^    OP_POWER, OP_CONCAT, OP_ASSIGN, OP_SUBR_CALL, OP_FETCH_RET_VAL, OP_BRANCH,$/;"	e	enum:operations
OP_BRANCH_FALSE	interpret.h	/^    OP_BRANCH_TRUE, OP_BRANCH_FALSE, OP_BRANCH_NEVER, OP_ARRAY_REF,$/;"	e	enum:operations
OP_BRANCH_NEVER	interpret.h	/^    OP_BRANCH_TRUE, OP_BRANCH_FALSE, OP_BRANCH_NEVER, OP_ARRAY_REF,$/;"	e	enum:operations
OP_BRANCH_TRUE	interpret.h	/^    OP_BRANCH_TRUE, OP_BRANCH_FALSE, OP_BRANCH_NEVER, OP_ARRAY_REF,$/;"	e	enum:operations
OP_CODE_SIZE	regularExp.c	320;"	d	file:
OP_CONCAT	interpret.h	/^    OP_POWER, OP_CONCAT, OP_ASSIGN, OP_SUBR_CALL, OP_FETCH_RET_VAL, OP_BRANCH,$/;"	e	enum:operations
OP_DECR	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_DIV	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_DUP	interpret.h	/^enum operations {OP_RETURN_NO_VAL, OP_RETURN, OP_PUSH_SYM, OP_DUP, OP_ADD,$/;"	e	enum:operations
OP_EQ	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_FETCH_RET_VAL	interpret.h	/^    OP_POWER, OP_CONCAT, OP_ASSIGN, OP_SUBR_CALL, OP_FETCH_RET_VAL, OP_BRANCH,$/;"	e	enum:operations
OP_GE	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_GT	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_INCR	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_IN_ARRAY	interpret.h	/^    OP_ARRAY_ASSIGN, OP_BEGIN_ARRAY_ITER, OP_ARRAY_ITER, OP_IN_ARRAY,$/;"	e	enum:operations
OP_LE	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_LT	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_MOD	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_MUL	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_NE	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_NEGATE	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_NOT	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_OR	interpret.h	/^    OP_GE, OP_LE, OP_EQ, OP_NE, OP_BIT_AND, OP_BIT_OR, OP_AND, OP_OR, OP_NOT,$/;"	e	enum:operations
OP_POWER	interpret.h	/^    OP_POWER, OP_CONCAT, OP_ASSIGN, OP_SUBR_CALL, OP_FETCH_RET_VAL, OP_BRANCH,$/;"	e	enum:operations
OP_PUSH_SYM	interpret.h	/^enum operations {OP_RETURN_NO_VAL, OP_RETURN, OP_PUSH_SYM, OP_DUP, OP_ADD,$/;"	e	enum:operations
OP_RETURN	interpret.h	/^enum operations {OP_RETURN_NO_VAL, OP_RETURN, OP_PUSH_SYM, OP_DUP, OP_ADD,$/;"	e	enum:operations
OP_RETURN_NO_VAL	interpret.h	/^enum operations {OP_RETURN_NO_VAL, OP_RETURN, OP_PUSH_SYM, OP_DUP, OP_ADD,$/;"	e	enum:operations
OP_SUB	interpret.h	/^    OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEGATE, OP_INCR, OP_DECR, OP_GT, OP_LT,$/;"	e	enum:operations
OP_SUBR_CALL	interpret.h	/^    OP_POWER, OP_CONCAT, OP_ASSIGN, OP_SUBR_CALL, OP_FETCH_RET_VAL, OP_BRANCH,$/;"	e	enum:operations
OR	parse.c	83;"	d	file:
OREQ	parse.c	81;"	d	file:
OUTPUT_FLUSH_FREQ	shell.c	74;"	d	file:
OUTPUT_TO_DIALOG	shell.c	84;"	d	file:
OUTPUT_TO_STRING	shell.c	85;"	d	file:
OpFns	interpret.c	/^static int (*OpFns[N_OPS])() = {returnNoVal, returnVal, pushSymVal, dupStack,$/;"	v	file:
OpTable	nc.c	/^static XrmOptionDescRec OpTable[] = {$/;"	v	file:
OpTable	preferences.c	/^static XrmOptionDescRec OpTable[] = {$/;"	v	file:
OpenSelectedFile	selection.c	/^void OpenSelectedFile(WindowInfo *window, Time time)$/;"	f
PANE_MIN_HEIGHT	window.c	84;"	d	file:
PAREN	regexConvert.c	52;"	d	file:
PAREN	regularExp.c	347;"	d	file:
PARSE_SUBPATS_FROM_START	highlight.h	3;"	d
PASS_2_REPARSE_CHUNK_SIZE	highlight.c	59;"	d	file:
PC	interpret.c	/^static Inst *PC;		    \/* program counter during execution *\/$/;"	v	file:
PEEK	interpret.c	866;"	d	file:
PEEK_INT	interpret.c	905;"	d	file:
PEEK_STRING	interpret.c	893;"	d	file:
PERMANENT_MENU_ITEM	menu.h	2;"	d
PERM_LOCKED_BIT	nedit.h	83;"	d
PLAIN_FONT	highlightData.c	/^enum fontTypes {PLAIN_FONT, ITALIC_FONT, BOLD_FONT, BOLD_ITALIC_FONT};$/;"	e	file:	enum:fontTypes
PLAIN_LANGUAGE_MODE	preferences.h	2;"	d
PLAIN_STYLE	highlight.c	68;"	d	file:
PLUS	regularExp.c	141;"	d	file:
POP	interpret.c	856;"	d	file:
POP_INT	interpret.c	869;"	d	file:
POP_STRING	interpret.c	881;"	d	file:
POS_LOOK_OPEN	regularExp.c	164;"	d	file:
POW	parse.c	97;"	d	file:
PREFERRED_GAP_SIZE	textBuf.c	34;"	d	file:
PREF_FILE_NAME	preferences.c	71;"	d	file:
PREF_READ_ONLY	file.h	6;"	d
PRIMARY_BLOCK_DRAG	textP.h	/^	SECONDARY_RECT_DRAG, PRIMARY_BLOCK_DRAG, DRAG_CANCELED, MOUSE_PAN};$/;"	e	enum:dragStates
PRIMARY_CLICKED	textP.h	/^enum dragStates {NOT_CLICKED, PRIMARY_CLICKED, SECONDARY_CLICKED,$/;"	e	enum:dragStates
PRIMARY_DRAG	textP.h	/^	CLICKED_IN_SELECTION,  PRIMARY_DRAG, PRIMARY_RECT_DRAG, SECONDARY_DRAG,$/;"	e	enum:dragStates
PRIMARY_MASK	export.c	80;"	d	file:
PRIMARY_MASK	textDisp.c	46;"	d	file:
PRIMARY_RECT_DRAG	textP.h	/^	CLICKED_IN_SELECTION,  PRIMARY_DRAG, PRIMARY_RECT_DRAG, SECONDARY_DRAG,$/;"	e	enum:dragStates
PROC_VALUE_SYM	interpret.h	/^enum symTypes {CONST_SYM, GLOBAL_SYM, LOCAL_SYM, ARG_SYM, PROC_VALUE_SYM,$/;"	e	enum:symTypes
PROGRAM_SIZE	interpret.c	50;"	d	file:
PROMPT_SBC_DIALOG_RESPONSE	file.h	8;"	d
PUSH	interpret.c	861;"	d	file:
PUSH_INT	interpret.c	917;"	d	file:
PUSH_STRING	interpret.c	924;"	d	file:
PUT_OFFSET_L	regularExp.c	328;"	d	file:
PUT_OFFSET_R	regularExp.c	329;"	d	file:
Paren_Has_Width	regularExp.c	/^static int            Paren_Has_Width; \/* Bit flags indicating ()'s that are$/;"	v	file:
ParseError	preferences.c	/^int ParseError(Widget toDialog, const char *stringStart, const char *stoppedAt,$/;"	f
ParseMacro	parse.c	/^Program *ParseMacro(char *expr, char **msg, char **stoppedAt)$/;"	f
PatternSets	highlightData.c	/^static patternSet *PatternSets[MAX_LANGUAGE_MODES];$/;"	v	file:
PreemptMacro	interpret.c	/^void PreemptMacro(void)$/;"	f
PreemptRequest	interpret.c	/^static int PreemptRequest;  	    \/* passes preemption requests from called$/;"	v	file:
PrefData	preferences.c	/^} PrefData;$/;"	v	file:
PrefDescrip	nc.c	/^static PrefDescripRec PrefDescrip[] = {$/;"	v	file:
PrefDescrip	preferences.c	/^static PrefDescripRec PrefDescrip[] = {$/;"	v	file:
Preferences	nc.c	/^} Preferences;$/;"	v	file:
PrefsHaveChanged	preferences.c	/^static int PrefsHaveChanged = False;$/;"	v	file:
PrevOpen	menu.c	/^static char **PrevOpen;$/;"	v	file:
Prev_Is_BOL	regularExp.c	/^static int Prev_Is_BOL;$/;"	v	file:
Prev_Is_Delim	regularExp.c	/^static int Prev_Is_Delim;$/;"	v	file:
PrintString	file.c	/^void PrintString(const char *string, int length, Widget parent, const char *jobName)$/;"	f
PrintWindow	file.c	/^void PrintWindow(WindowInfo *window, int selectedOnly)$/;"	f
Prog	interpret.c	/^static Inst Prog[PROGRAM_SIZE]; 	 \/* the program *\/$/;"	v	file:
ProgP	interpret.c	/^static Inst *ProgP;			 \/* next free spot for code gen. *\/$/;"	v	file:
Program	interpret.h	/^} Program;$/;"	t
PromoteToGlobal	interpret.c	/^Symbol *PromoteToGlobal(Symbol *sym)$/;"	f
PromptForExistingFile	file.c	/^int PromptForExistingFile(WindowInfo *window, char *prompt, char *fullname)$/;"	f
PromptForHTMLFile	export.c	/^int PromptForHTMLFile(WindowInfo *window, char *prompt, char *fullname )$/;"	f
PromptForNewFile	file.c	/^int PromptForNewFile(WindowInfo *window, char *prompt, char *fullname,$/;"	f
QUESTION	regularExp.c	139;"	d	file:
RCS_SIZE	tags.c	766;"	d	file:
READ_STATUS	macro.c	/^enum retGlobalSyms {STRING_DIALOG_BUTTON, SEARCH_END, READ_STATUS,$/;"	e	file:	enum:retGlobalSyms
REDFLT_CASE_INSENSITIVE	regularExp.h	/^  REDFLT_CASE_INSENSITIVE = 1$/;"	e
REDFLT_STANDARD	regularExp.h	/^  REDFLT_STANDARD         = 0,$/;"	e
REGEX_START_OFFSET	regularExp.c	376;"	d	file:
REG_FAIL	regularExp.c	333;"	d	file:
REG_INFINITY	regularExp.c	354;"	d	file:
REG_ONE	regexConvert.c	55;"	d	file:
REG_ONE	regularExp.c	356;"	d	file:
REG_ZERO	regexConvert.c	54;"	d	file:
REG_ZERO	regularExp.c	355;"	d	file:
RELOAD_FILE_AFTER	shell.c	83;"	d	file:
REMOVE_SECONDARY	textSel.c	/^enum selectNotifyActions {UNSELECT_SECONDARY, REMOVE_SECONDARY,$/;"	e	file:	enum:selectNotifyActions
REPARSE_CHUNK_SIZE	highlight.c	64;"	d	file:
REPEAT_IN_SEL	macro.h	3;"	d
REPEAT_TO_END	macro.h	2;"	d
REPLACE_SELECTION	shell.c	82;"	d	file:
REPL_DEF_SCOPE_SELECTION	search.h	/^			      REPL_DEF_SCOPE_SELECTION,$/;"	e	enum:ReplaceAllDefaultScope
REPL_DEF_SCOPE_SMART	search.h	/^			      REPL_DEF_SCOPE_SMART };				  $/;"	e	enum:ReplaceAllDefaultScope
REPL_DEF_SCOPE_WINDOW	search.h	/^enum ReplaceAllDefaultScope { REPL_DEF_SCOPE_WINDOW,$/;"	e	enum:ReplaceAllDefaultScope
REPL_SCOPE_MULTI	search.h	/^enum ReplaceScope { REPL_SCOPE_WIN, REPL_SCOPE_SEL, REPL_SCOPE_MULTI };$/;"	e	enum:ReplaceScope
REPL_SCOPE_SEL	search.h	/^enum ReplaceScope { REPL_SCOPE_WIN, REPL_SCOPE_SEL, REPL_SCOPE_MULTI };$/;"	e	enum:ReplaceScope
REPL_SCOPE_WIN	search.h	/^enum ReplaceScope { REPL_SCOPE_WIN, REPL_SCOPE_SEL, REPL_SCOPE_MULTI };$/;"	e	enum:ReplaceScope
RETURN	parse.c	73;"	d	file:
REVERSE	undo.c	47;"	d	file:
RE_DEFAULT_FLAG	regularExp.h	/^} RE_DEFAULT_FLAG;$/;"	t
RIGHT_MARGIN	textDisp.c	40;"	d	file:
RIGHT_MARGIN_POS	preferences.c	2086;"	d	file:
RIGHT_MARGIN_POS	userCmds.c	71;"	d	file:
Rcs	tags.c	/^static struct rcs       *Rcs[RCS_SIZE];$/;"	v	file:
RcsStats	tags.c	/^static struct rcs_stats  RcsStats;$/;"	v	file:
ReadMacroFile	macro.c	/^int ReadMacroFile(WindowInfo *window, char *fileName, int warnNotExist)$/;"	f
ReadMacroInitFile	macro.c	/^void ReadMacroInitFile(WindowInfo *window)$/;"	f
ReadMacroString	macro.c	/^int ReadMacroString(WindowInfo *window, char *string, char *errIn)$/;"	f
ReadNEditDB	menu.c	/^void ReadNEditDB(void)$/;"	f
ReadNumericField	preferences.c	/^int ReadNumericField(char **inPtr, int *value)$/;"	f
ReadQuotedString	preferences.c	/^int ReadQuotedString(char **inPtr, char **errMsg, char **string)$/;"	f
ReadSymbolicField	preferences.c	/^char *ReadSymbolicField(char **inPtr)$/;"	f
ReadSymbolicFieldTextWidget	preferences.c	/^char *ReadSymbolicFieldTextWidget(Widget textW, char *fieldName, int silent)$/;"	f
Redo	undo.c	/^void Redo(WindowInfo *window)$/;"	f
RedundantActions	macro.c	/^static char* RedundantActions[] = {"open_dialog", "save_as_dialog",$/;"	v	file:
Reg_Input	regularExp.c	/^static unsigned char  *Reg_Input;           \/* String-input pointer.         *\/$/;"	v	file:
Reg_Parse	regexConvert.c	/^static unsigned char *Reg_Parse;       \/* Input scan ptr (scans user's regex) *\/$/;"	v	file:
Reg_Parse	regularExp.c	/^static unsigned char *Reg_Parse;       \/* Input scan ptr (scans user's regex) *\/$/;"	v	file:
Reg_Size	regularExp.c	/^static unsigned long  Reg_Size;        \/* Size of compiled regex code. *\/$/;"	v	file:
RegisterMacroSubroutines	macro.c	/^void RegisterMacroSubroutines(void)$/;"	f
RemoveBackupFile	file.c	/^void RemoveBackupFile(WindowInfo *window)$/;"	f
RemoveFromMultiReplaceDialog	search.c	/^void RemoveFromMultiReplaceDialog(WindowInfo *doomedWindow)$/;"	f
RemoveWidgetHighlight	highlight.c	/^void RemoveWidgetHighlight(Widget widget)$/;"	f
RenameHighlightPattern	highlightData.c	/^void RenameHighlightPattern(char *oldName, char *newName)$/;"	f
RepeatDialog	macro.c	/^void RepeatDialog(WindowInfo *window)$/;"	f
RepeatMacro	macro.c	/^void RepeatMacro(WindowInfo *window, char *command, int how)$/;"	f
ReplaceAll	search.c	/^int ReplaceAll(WindowInfo *window, char *searchString, char *replaceString,$/;"	f
ReplaceAllDefaultScope	search.h	/^enum ReplaceAllDefaultScope { REPL_DEF_SCOPE_WINDOW,$/;"	g
ReplaceAllInString	search.c	/^char *ReplaceAllInString(char *inString, char *searchString,$/;"	f
ReplaceAndSearch	search.c	/^int ReplaceAndSearch(WindowInfo *window, int direction, char *searchString,$/;"	f
ReplaceChars	macro.c	/^static char ReplaceChars[] = "\\\\\\"ntbrfav";$/;"	v	file:
ReplaceDefScopeStrings	preferences.c	/^static char *ReplaceDefScopeStrings[] = {$/;"	v	file:
ReplaceFindSame	search.c	/^int ReplaceFindSame(WindowInfo *window, int direction, int searchWrap)$/;"	f
ReplaceHistory	search.c	/^static char *ReplaceHistory[MAX_SEARCH_HISTORY];$/;"	v	file:
ReplaceInSelection	search.c	/^int ReplaceInSelection(WindowInfo *window, char *searchString,$/;"	f
ReplaceSame	search.c	/^int ReplaceSame(WindowInfo *window, int direction, int searchWrap)$/;"	f
ReplaceScope	search.h	/^enum ReplaceScope { REPL_SCOPE_WIN, REPL_SCOPE_SEL, REPL_SCOPE_MULTI };$/;"	g
Replay	macro.c	/^void Replay(WindowInfo *window)$/;"	f
ReplayMacro	macro.c	/^static char *ReplayMacro = NULL;$/;"	v	file:
RestartData	interpret.h	/^} RestartData;$/;"	t
RestoreNEditPrefs	preferences.c	/^void RestoreNEditPrefs(XrmDatabase prefDB, XrmDatabase appDB)$/;"	f
ResumeMacroExecution	macro.c	/^void ResumeMacroExecution(WindowInfo *window)$/;"	f
ReturnGlobalNames	macro.c	/^static char *ReturnGlobalNames[N_RETURN_GLOBALS] = {"$string_dialog_button",$/;"	v	file:
ReturnGlobals	macro.c	/^static Symbol *ReturnGlobals[N_RETURN_GLOBALS];$/;"	v	file:
ReturnShellCommandOutput	macro.c	/^void ReturnShellCommandOutput(WindowInfo *window, char *outText, int status)$/;"	f
RevertToSaved	file.c	/^void RevertToSaved(WindowInfo *window)$/;"	f
RowColumnPrefDialog	preferences.c	/^void RowColumnPrefDialog(Widget parent)$/;"	f
RowText	preferences.c	/^static Widget RowText, ColText;$/;"	v	file:
RunMacroAsSubrCall	interpret.c	/^void RunMacroAsSubrCall(Program *prog)$/;"	f
SEARCHMAX	nedit.h	9;"	d
SEARCH_BACKWARD	search.h	/^enum SearchDirection {SEARCH_FORWARD, SEARCH_BACKWARD};$/;"	e	enum:SearchDirection
SEARCH_CASE_SENSE	search.h	/^      	SEARCH_LITERAL, SEARCH_CASE_SENSE, SEARCH_REGEX, $/;"	e	enum:SearchType
SEARCH_CASE_SENSE_STRING	search.h	60;"	d
SEARCH_CASE_SENSE_WORD	search.h	/^	SEARCH_LITERAL_WORD, SEARCH_CASE_SENSE_WORD, SEARCH_REGEX_NOCASE };$/;"	e	enum:SearchType
SEARCH_CASE_SENSE_WORD_STRING	search.h	62;"	d
SEARCH_END	macro.c	/^enum retGlobalSyms {STRING_DIALOG_BUTTON, SEARCH_END, READ_STATUS,$/;"	e	file:	enum:retGlobalSyms
SEARCH_FORWARD	search.h	/^enum SearchDirection {SEARCH_FORWARD, SEARCH_BACKWARD};$/;"	e	enum:SearchDirection
SEARCH_LITERAL	search.h	/^      	SEARCH_LITERAL, SEARCH_CASE_SENSE, SEARCH_REGEX, $/;"	e	enum:SearchType
SEARCH_LITERAL_STRING	search.h	59;"	d
SEARCH_LITERAL_WORD	search.h	/^	SEARCH_LITERAL_WORD, SEARCH_CASE_SENSE_WORD, SEARCH_REGEX_NOCASE };$/;"	e	enum:SearchType
SEARCH_LITERAL_WORD_STRING	search.h	61;"	d
SEARCH_REGEX	search.h	/^      	SEARCH_LITERAL, SEARCH_CASE_SENSE, SEARCH_REGEX, $/;"	e	enum:SearchType
SEARCH_REGEX_NOCASE	search.h	/^	SEARCH_LITERAL_WORD, SEARCH_CASE_SENSE_WORD, SEARCH_REGEX_NOCASE };$/;"	e	enum:SearchType
SEARCH_REGEX_NOCASE_STRING	search.h	64;"	d
SEARCH_REGEX_STRING	search.h	63;"	d
SECONDARY_CLICKED	textP.h	/^enum dragStates {NOT_CLICKED, PRIMARY_CLICKED, SECONDARY_CLICKED,$/;"	e	enum:dragStates
SECONDARY_DRAG	textP.h	/^	CLICKED_IN_SELECTION,  PRIMARY_DRAG, PRIMARY_RECT_DRAG, SECONDARY_DRAG,$/;"	e	enum:dragStates
SECONDARY_MASK	export.c	79;"	d	file:
SECONDARY_MASK	textDisp.c	45;"	d	file:
SECONDARY_RECT_DRAG	textP.h	/^	SECONDARY_RECT_DRAG, PRIMARY_BLOCK_DRAG, DRAG_CANCELED, MOUSE_PAN};$/;"	e	enum:dragStates
SELECT_THRESHOLD	text.c	59;"	d	file:
SENSITIVE	regularExp.c	350;"	d	file:
SET_BIT	regularExp.c	336;"	d	file:
SET_BR_OFF	parse.c	39;"	d	file:
SET_FORCE_LOCKED	nedit.h	97;"	d
SET_LOCKED_BY_REASON	nedit.h	88;"	d
SET_ONE_RSRC	nedit.h	67;"	d
SET_PERM_LOCKED	nedit.h	95;"	d
SET_TMBD_LOCKED	nedit.h	99;"	d
SET_USER_LOCKED	nedit.h	93;"	d
SGI_WINDOW_TITLE	nedit.h	27;"	d
SGI_WINDOW_TITLE_LEN	nedit.h	28;"	d
SHELL_CMDS	userCmds.c	/^enum dialogTypes {SHELL_CMDS, MACRO_CMDS, BG_MENU_CMDS};$/;"	e	file:	enum:dialogTypes
SHELL_CMD_STATUS	macro.c	/^	SHELL_CMD_STATUS, LIST_DIALOG_BUTTON};$/;"	e	file:	enum:retGlobalSyms
SHELL_CMD_TOP	userCmds.c	73;"	d	file:
SHIFT_LEFT	shift.h	/^enum ShiftDirection {SHIFT_LEFT, SHIFT_RIGHT};$/;"	e	enum:ShiftDirection
SHIFT_RIGHT	shift.h	/^enum ShiftDirection {SHIFT_LEFT, SHIFT_RIGHT};$/;"	e	enum:ShiftDirection
SHORT	menu.c	/^enum menuModes {FULL, SHORT};$/;"	e	file:	enum:menuModes
SIMILAR	regularExp.c	110;"	d	file:
SIMPLE	regexConvert.c	49;"	d	file:
SIMPLE	regularExp.c	344;"	d	file:
SMART_INDENT	nedit.h	/^enum indentStyle {NO_AUTO_INDENT, AUTO_INDENT, SMART_INDENT};$/;"	e	enum:indentStyle
SPACE	regularExp.c	125;"	d	file:
SPACE_NL	regularExp.c	126;"	d	file:
STACK_SIZE	interpret.h	3;"	d
STAR	regularExp.c	137;"	d	file:
STAT_DONE	interpret.c	/^enum opStatusCodes {STAT_OK=2, STAT_DONE, STAT_ERROR, STAT_PREEMPT};$/;"	e	file:	enum:opStatusCodes
STAT_ERROR	interpret.c	/^enum opStatusCodes {STAT_OK=2, STAT_DONE, STAT_ERROR, STAT_PREEMPT};$/;"	e	file:	enum:opStatusCodes
STAT_OK	interpret.c	/^enum opStatusCodes {STAT_OK=2, STAT_DONE, STAT_ERROR, STAT_PREEMPT};$/;"	e	file:	enum:opStatusCodes
STAT_PREEMPT	interpret.c	/^enum opStatusCodes {STAT_OK=2, STAT_DONE, STAT_ERROR, STAT_PREEMPT};$/;"	e	file:	enum:opStatusCodes
STAT_SHADOW_THICKNESS	window.c	88;"	d	file:
STRING	parse.c	65;"	d	file:
STRING_DIALOG_BUTTON	macro.c	/^enum retGlobalSyms {STRING_DIALOG_BUTTON, SEARCH_END, READ_STATUS,$/;"	e	file:	enum:retGlobalSyms
STRING_TAG	interpret.h	/^enum typeTags {NO_TAG, INT_TAG, STRING_TAG, ARRAY_TAG};$/;"	e	enum:typeTags
STRSAVE	tags.c	62;"	d	file:
STYLE_LOOKUP_MASK	export.c	82;"	d	file:
STYLE_LOOKUP_MASK	textDisp.c	48;"	d	file:
SUBEQ	parse.c	76;"	d	file:
SUCCESSFUL_INSERT	textSel.c	/^enum insertResultFlags {INSERT_WAITING, UNSUCCESSFUL_INSERT, SUCCESSFUL_INSERT};$/;"	e	file:	enum:insertResultFlags
SUPPRESS_CREATE_WARN	file.h	4;"	d
SYMBOL	parse.c	66;"	d	file:
SafeGC	macro.c	/^void SafeGC(void)$/;"	f
SaveNEditPrefs	preferences.c	/^void SaveNEditPrefs(Widget parent, int quietly)$/;"	f
SaveUndoInformation	undo.c	/^void SaveUndoInformation(WindowInfo *window, int pos, int nInserted,$/;"	f
SaveWindow	file.c	/^int SaveWindow(WindowInfo *window)$/;"	f
SaveWindowAs	file.c	/^int SaveWindowAs(WindowInfo *window, char *newName, int addWrap)$/;"	f
SearchAndReplace	search.c	/^int SearchAndReplace(WindowInfo *window, int direction, char *searchString,$/;"	f
SearchAndSelect	search.c	/^int SearchAndSelect(WindowInfo *window, int direction, char *searchString,$/;"	f
SearchAndSelectIncremental	search.c	/^int SearchAndSelectIncremental(WindowInfo *window, int direction,$/;"	f
SearchAndSelectSame	search.c	/^int SearchAndSelectSame(WindowInfo *window, int direction, int searchWrap)$/;"	f
SearchDirection	search.h	/^enum SearchDirection {SEARCH_FORWARD, SEARCH_BACKWARD};$/;"	g
SearchForSelected	search.c	/^void SearchForSelected(WindowInfo *window, int direction, int searchType,$/;"	f
SearchHistory	search.c	/^static char *SearchHistory[MAX_SEARCH_HISTORY];$/;"	v	file:
SearchMethodStrings	preferences.c	/^static char *SearchMethodStrings[] = {$/;"	v	file:
SearchSelectedCallData	search.c	/^} SearchSelectedCallData;$/;"	t	file:
SearchString	search.c	/^int SearchString(const char *string, const char *searchString, int direction,$/;"	f
SearchType	search.h	/^enum SearchType {$/;"	g
SearchTypeHistory	search.c	/^static int SearchTypeHistory[MAX_SEARCH_HISTORY];$/;"	v	file:
SearchWindow	search.c	/^int SearchWindow(WindowInfo *window, int direction, char *searchString,$/;"	f
SelectNumberedLine	selection.c	/^void SelectNumberedLine(WindowInfo *window, int lineNum)$/;"	f
SelectToMatchingCharacter	search.c	/^void SelectToMatchingCharacter(WindowInfo *window)$/;"	f
SelectionInfo	search.c	/^} SelectionInfo;$/;"	t	file:
SendSecondarySelection	textSel.c	/^void SendSecondarySelection(Widget w, Time time, int removeAfter)$/;"	f
ServerExistsAtom	server.c	/^static Atom ServerExistsAtom = 0;$/;"	v	file:
ServerMainLoop	server.c	/^void ServerMainLoop(XtAppContext context)$/;"	f
ServerRequestAtom	server.c	/^static Atom ServerRequestAtom = 0;$/;"	v	file:
SetAutoIndent	window.c	/^void SetAutoIndent(WindowInfo *window, int state)$/;"	f
SetAutoWrap	window.c	/^void SetAutoWrap(WindowInfo *window, int state)$/;"	f
SetBGMenuRedoSensitivity	userCmds.c	/^void SetBGMenuRedoSensitivity(WindowInfo *window, int sensitive)$/;"	f
SetBGMenuUndoSensitivity	userCmds.c	/^void SetBGMenuUndoSensitivity(WindowInfo *window, int sensitive)$/;"	f
SetEmTabDist	window.c	/^void SetEmTabDist(WindowInfo *window, int emTabDist)$/;"	f
SetFonts	window.c	/^void SetFonts(WindowInfo *window, char *fontName, char *italicName,$/;"	f
SetISearchTextCallbacks	search.c	/^void SetISearchTextCallbacks(WindowInfo *window)$/;"	f
SetLangModeMenu	preferences.c	/^void SetLangModeMenu(Widget optMenu, const char *modeName)$/;"	f
SetLanguageMode	preferences.c	/^void SetLanguageMode(WindowInfo *window, int mode, int forceNewDefaults)$/;"	f
SetMacroFocusWindow	interpret.c	/^void SetMacroFocusWindow(WindowInfo *window)$/;"	f
SetModeMessage	window.c	/^void SetModeMessage(WindowInfo *window, char *message)$/;"	f
SetOverstrike	window.c	/^void SetOverstrike(WindowInfo *window, int overstrike)$/;"	f
SetPrefAutoIndent	preferences.c	/^void SetPrefAutoIndent(int state)$/;"	f
SetPrefAutoSave	preferences.c	/^void SetPrefAutoSave(int state)$/;"	f
SetPrefBeepOnSearchWrap	preferences.c	/^void SetPrefBeepOnSearchWrap(int state)$/;"	f
SetPrefBoldFont	preferences.c	/^void SetPrefBoldFont(char *fontName)$/;"	f
SetPrefBoldItalicFont	preferences.c	/^void SetPrefBoldItalicFont(char *fontName)$/;"	f
SetPrefCols	preferences.c	/^void SetPrefCols(int nCols)$/;"	f
SetPrefEmTabDist	preferences.c	/^void SetPrefEmTabDist(int tabDist)$/;"	f
SetPrefFindReplaceUsesSelection	preferences.c	/^void SetPrefFindReplaceUsesSelection(int state)$/;"	f
SetPrefFont	preferences.c	/^void SetPrefFont(char *fontName)$/;"	f
SetPrefGeometry	preferences.c	/^void SetPrefGeometry(const char *geometry)$/;"	f
SetPrefHighlightSyntax	preferences.c	/^void SetPrefHighlightSyntax(int state)$/;"	f
SetPrefISearchLine	preferences.c	/^void SetPrefISearchLine(int state)$/;"	f
SetPrefInsertTabs	preferences.c	/^void SetPrefInsertTabs(int state)$/;"	f
SetPrefItalicFont	preferences.c	/^void SetPrefItalicFont(char *fontName)$/;"	f
SetPrefKeepSearchDlogs	preferences.c	/^void SetPrefKeepSearchDlogs(int state)$/;"	f
SetPrefLineNums	preferences.c	/^void SetPrefLineNums(int state)$/;"	f
SetPrefMapDelete	preferences.c	/^void SetPrefMapDelete(int state)$/;"	f
SetPrefReplaceDefScope	preferences.c	/^void SetPrefReplaceDefScope(int scope)$/;"	f
SetPrefRepositionDialogs	preferences.c	/^void SetPrefRepositionDialogs(int state)$/;"	f
SetPrefRows	preferences.c	/^void SetPrefRows(int nRows)$/;"	f
SetPrefSaveOldVersion	preferences.c	/^void SetPrefSaveOldVersion(int state)$/;"	f
SetPrefSearch	preferences.c	/^void SetPrefSearch(int searchType)$/;"	f
SetPrefSearchDlogs	preferences.c	/^void SetPrefSearchDlogs(int state)$/;"	f
SetPrefSearchWraps	preferences.c	/^void SetPrefSearchWraps(int state)$/;"	f
SetPrefShell	preferences.c	/^void SetPrefShell(const char *shell)$/;"	f
SetPrefShortMenus	preferences.c	/^void SetPrefShortMenus(int state)$/;"	f
SetPrefShowMatching	preferences.c	/^void SetPrefShowMatching(int state)$/;"	f
SetPrefShowPathInWindowsMenu	preferences.c	/^void SetPrefShowPathInWindowsMenu(int state)$/;"	f
SetPrefSmartTags	preferences.c	/^void SetPrefSmartTags(int state)$/;"	f
SetPrefSortOpenPrevMenu	preferences.c	/^void SetPrefSortOpenPrevMenu(int state)$/;"	f
SetPrefStatsLine	preferences.c	/^void SetPrefStatsLine(int state)$/;"	f
SetPrefStdOpenDialog	preferences.c	/^void SetPrefStdOpenDialog(int state)$/;"	f
SetPrefTabDist	preferences.c	/^void SetPrefTabDist(int tabDist)$/;"	f
SetPrefTagFile	preferences.c	/^void SetPrefTagFile(const char *tagFileName)$/;"	f
SetPrefWarnExit	preferences.c	/^void SetPrefWarnExit(int state)$/;"	f
SetPrefWarnFileMods	preferences.c	/^void SetPrefWarnFileMods(int state)$/;"	f
SetPrefWrap	preferences.c	/^void SetPrefWrap(int state)$/;"	f
SetPrefWrapMargin	preferences.c	/^void SetPrefWrapMargin(int margin)$/;"	f
SetREDefaultWordDelimiters	regularExp.c	/^void SetREDefaultWordDelimiters (char *delimiters) {$/;"	f
SetShowMatching	window.c	/^void SetShowMatching(WindowInfo *window, int state)$/;"	f
SetTabDist	window.c	/^void SetTabDist(WindowInfo *window, int tabDist)$/;"	f
SetWindowModified	window.c	/^void SetWindowModified(WindowInfo *window, int modified)$/;"	f
SetWrapMargin	window.c	/^void SetWrapMargin(WindowInfo *window, int margin)$/;"	f
ShellCmdDialog	userCmds.c	/^static Widget ShellCmdDialog = NULL;$/;"	v	file:
ShellCmdToMacroString	shell.c	/^void ShellCmdToMacroString(WindowInfo *window, char *command, char *input)$/;"	f
ShellMenuItems	userCmds.c	/^static menuItemRec *ShellMenuItems[MAX_ITEMS_PER_MENU];$/;"	v	file:
ShiftDirection	shift.h	/^enum ShiftDirection {SHIFT_LEFT, SHIFT_RIGHT};$/;"	g
ShiftSelection	shift.c	/^void ShiftSelection(WindowInfo *window, int direction, int byTab)$/;"	f
ShiftText	shift.c	/^char *ShiftText(char *text, int direction, int tabsAllowed, int tabDist,$/;"	f
ShortMenuWindow	menu.c	/^static WindowInfo *ShortMenuWindow;$/;"	v	file:
ShowISearchLine	window.c	/^void ShowISearchLine(WindowInfo *window, int state)$/;"	f
ShowLineNumbers	window.c	/^void ShowLineNumbers(WindowInfo *window, int state)$/;"	f
ShowMatchingTypes	preferences.c	/^static char *ShowMatchingTypes[] = {"Off", "Delimiter", "Range", $/;"	v	file:
ShowStatsLine	window.c	/^void ShowStatsLine(WindowInfo *window, int state)$/;"	f
SkipDelimiter	preferences.c	/^int SkipDelimiter(char **inPtr, char **errMsg)$/;"	f
SmartIndentCB	smartIndent.c	/^void SmartIndentCB(Widget w, XtPointer clientData, XtPointer callData) $/;"	f
SmartIndentDialog	smartIndent.c	/^} SmartIndentDialog = {NULL};$/;"	v	file:
SmartIndentMacrosAvailable	smartIndent.c	/^int SmartIndentMacrosAvailable(char *languageModeName)$/;"	f
SmartIndentSpecs	smartIndent.c	/^static smartIndentRec *SmartIndentSpecs[MAX_LANGUAGE_MODES];$/;"	v	file:
SparseArrayEntry	interpret.h	/^} SparseArrayEntry;$/;"	t
SparseArrayEntryWrapper	interpret.c	/^} SparseArrayEntryWrapper;$/;"	t	file:
SpecialVarNames	macro.c	/^static char *SpecialVarNames[N_SPECIAL_VARS] = {"$cursor", "$line", "$column",$/;"	v	file:
SpecialVars	macro.c	/^static BuiltInSubr SpecialVars[N_SPECIAL_VARS] = {cursorMV, lineMV, columnMV,$/;"	v	file:
SplitWindow	window.c	/^void SplitWindow(WindowInfo *window)$/;"	f
Stack	interpret.c	/^static DataValue *Stack;	    \/* the stack *\/$/;"	v	file:
StackOverflowMsg	interpret.c	/^static char *StackOverflowMsg = "macro stack overflow";$/;"	v	file:
StackP	interpret.c	/^static DataValue *StackP;	    \/* next free spot on stack *\/$/;"	v	file:
StackUnderflowMsg	interpret.c	/^static char *StackUnderflowMsg = "macro stack underflow";$/;"	v	file:
StartHighlighting	highlight.c	/^void StartHighlighting(WindowInfo *window, int warn)$/;"	f
StartLoopAddrList	interpret.c	/^void StartLoopAddrList(void)$/;"	f
Start_Of_String	regularExp.c	/^static unsigned char  *Start_Of_String;     \/* Beginning of input, for ^     *\/$/;"	v	file:
Start_Ptr_Ptr	regularExp.c	/^static unsigned char **Start_Ptr_Ptr;       \/* Pointer to `startp' array.    *\/$/;"	v	file:
StopHandlingXSelections	textSel.c	/^void StopHandlingXSelections(Widget w)$/;"	f
StopHighlighting	highlight.c	/^void StopHighlighting(WindowInfo *window)$/;"	f
StringToNumberMsg	interpret.c	/^static char *StringToNumberMsg = "string could not be converted to number";$/;"	v	file:
StringToSearchType	search.c	/^int StringToSearchType(const char * string, int *searchType) $/;"	f
SubstituteRE	regularExp.c	/^void SubstituteRE ($/;"	f
Succ_Is_Delim	regularExp.c	/^static int Succ_Is_Delim;$/;"	v	file:
Succ_Is_EOL	regularExp.c	/^static int Succ_Is_EOL;$/;"	v	file:
SwapCode	interpret.c	/^void SwapCode(Inst *start, Inst *boundary, Inst *end)$/;"	f
Symbol	interpret.h	/^} Symbol;$/;"	t
SymbolRec	interpret.h	/^typedef struct SymbolRec {$/;"	s
SyntaxHighlightModifyCB	highlight.c	/^void SyntaxHighlightModifyCB(int pos, int nInserted, int nDeleted,$/;"	f
TEMPORARY_MENU_ITEM	menu.h	3;"	d
TEST_BIT	regularExp.c	337;"	d	file:
TEST_COUNT	regularExp.c	153;"	d	file:
TEXTP_H	textP.h	8;"	d
THREE_CLICKS	textP.h	/^enum multiClickStates {NO_CLICKS, ONE_CLICK, TWO_CLICKS, THREE_CLICKS};$/;"	e	enum:multiClickStates
TOO_MUCH_BINARY_DATA_LOCKED_BIT	nedit.h	85;"	d
TOP_MARGIN	textDisp.c	37;"	d	file:
TO_DIALOG	shell.h	/^enum outDests {TO_SAME_WINDOW, TO_NEW_WINDOW, TO_DIALOG};$/;"	e	enum:outDests
TO_NEW_WINDOW	shell.h	/^enum outDests {TO_SAME_WINDOW, TO_NEW_WINDOW, TO_DIALOG};$/;"	e	enum:outDests
TO_SAME_WINDOW	shell.h	/^enum outDests {TO_SAME_WINDOW, TO_NEW_WINDOW, TO_DIALOG};$/;"	e	enum:outDests
TWO_CLICKS	textP.h	/^enum multiClickStates {NO_CLICKS, ONE_CLICK, TWO_CLICKS, THREE_CLICKS};$/;"	e	enum:multiClickStates
TabDistText	preferences.c	/^static Widget TabDistText, EmTabText, EmTabToggle, UseTabsToggle, EmTabLabel;$/;"	v	file:
TabsDialogForWindow	preferences.c	/^static WindowInfo *TabsDialogForWindow;$/;"	v	file:
TabsPrefDialog	preferences.c	/^void TabsPrefDialog(Widget parent, WindowInfo *forWindow)$/;"	f
Tags	tags.c	/^static tag **Tags = NULL;$/;"	v	file:
TagsFileList	tags.c	/^tagFile *TagsFileList = NULL;       \/* list of loaded tags files *\/$/;"	v
TakeMotifDestination	textSel.c	/^void TakeMotifDestination(Widget w, Time time)$/;"	f
TempShowISearch	window.c	/^void TempShowISearch(WindowInfo *window, int state)$/;"	f
TempStringPrefs	preferences.c	/^} TempStringPrefs;$/;"	v	file:
TestHighlightPatterns	highlight.c	/^int TestHighlightPatterns(patternSet *patSet)$/;"	f
TestNode	rbTree.c	/^typedef struct TestNode {$/;"	s	file:
TestNode	rbTree.c	/^} TestNode;$/;"	t	file:
TextClassPart	textP.h	/^} TextClassPart;$/;"	t
TextClassRec	textP.h	/^} TextClassRec;$/;"	t
TextColPasteClipboard	text.c	/^void TextColPasteClipboard(Widget w, Time time)$/;"	f
TextCopyClipboard	text.c	/^void TextCopyClipboard(Widget w, Time time)$/;"	f
TextCutClipboard	text.c	/^void TextCutClipboard(Widget w, Time time)$/;"	f
TextDAttachHighlightData	textDisp.c	/^void TextDAttachHighlightData(textDisp *textD, textBuffer *styleBuffer,$/;"	f
TextDBlankCursor	textDisp.c	/^void TextDBlankCursor(textDisp *textD)$/;"	f
TextDCountBackwardNLines	textDisp.c	/^int TextDCountBackwardNLines(textDisp *textD, int startPos, int nLines)$/;"	f
TextDCountForwardNLines	textDisp.c	/^int TextDCountForwardNLines(textDisp *textD, int startPos, int nLines,$/;"	f
TextDCountLines	textDisp.c	/^int TextDCountLines(textDisp *textD, int startPos, int endPos,$/;"	f
TextDCreate	textDisp.c	/^textDisp *TextDCreate(Widget widget, Widget hScrollBar, Widget vScrollBar,$/;"	f
TextDEndOfLine	textDisp.c	/^int TextDEndOfLine(textDisp *textD, int pos, int startPosIsLineStart)$/;"	f
TextDFree	textDisp.c	/^void TextDFree(textDisp *textD)$/;"	f
TextDGetBuffer	textDisp.c	/^textBuffer *TextDGetBuffer(textDisp *textD)$/;"	f
TextDGetInsertPosition	textDisp.c	/^int TextDGetInsertPosition(textDisp *textD)$/;"	f
TextDGetScroll	textDisp.c	/^void TextDGetScroll(textDisp *textD, int *topLineNum, int *horizOffset)$/;"	f
TextDInSelection	textDisp.c	/^int TextDInSelection(textDisp *textD, int x, int y)$/;"	f
TextDInsert	textDisp.c	/^void TextDInsert(textDisp *textD, char *text)$/;"	f
TextDMaintainAbsLineNum	textDisp.c	/^void TextDMaintainAbsLineNum(textDisp *textD, int state)$/;"	f
TextDMakeInsertPosVisible	textDisp.c	/^void TextDMakeInsertPosVisible(textDisp *textD)$/;"	f
TextDMaxFontWidth	textDisp.c	/^int TextDMaxFontWidth(textDisp *textD, Boolean considerStyles)$/;"	f
TextDMinFontWidth	textDisp.c	/^int TextDMinFontWidth(textDisp *textD, Boolean considerStyles)$/;"	f
TextDMoveDown	textDisp.c	/^int TextDMoveDown(textDisp *textD)$/;"	f
TextDMoveLeft	textDisp.c	/^int TextDMoveLeft(textDisp *textD)$/;"	f
TextDMoveRight	textDisp.c	/^int TextDMoveRight(textDisp *textD)$/;"	f
TextDMoveUp	textDisp.c	/^int TextDMoveUp(textDisp *textD)$/;"	f
TextDOffsetWrappedColumn	textDisp.c	/^int TextDOffsetWrappedColumn(textDisp *textD, int row, int column)$/;"	f
TextDOffsetWrappedRow	textDisp.c	/^int TextDOffsetWrappedRow(textDisp *textD, int row)$/;"	f
TextDOverstrike	textDisp.c	/^void TextDOverstrike(textDisp *textD, char *text)$/;"	f
TextDPosOfPreferredCol	textDisp.c	/^int TextDPosOfPreferredCol(textDisp *textD, int column, int lineStartPos)$/;"	f
TextDPosToLineAndCol	textDisp.c	/^int TextDPosToLineAndCol(textDisp *textD, int pos, int *lineNum, int *column)$/;"	f
TextDPositionToXY	textDisp.c	/^int TextDPositionToXY(textDisp *textD, int pos, int *x, int *y)$/;"	f
TextDPreferredColumn	textDisp.c	/^int TextDPreferredColumn(textDisp *textD, int *visLineNum, int *lineStartPos)$/;"	f
TextDRedisplayRange	textDisp.c	/^void TextDRedisplayRange(textDisp *textD, int start, int end)$/;"	f
TextDRedisplayRect	textDisp.c	/^void TextDRedisplayRect(textDisp *textD, int left, int top, int width,$/;"	f
TextDResize	textDisp.c	/^void TextDResize(textDisp *textD, int width, int height)$/;"	f
TextDSetBuffer	textDisp.c	/^void TextDSetBuffer(textDisp *textD, textBuffer *buffer)$/;"	f
TextDSetCursorStyle	textDisp.c	/^void TextDSetCursorStyle(textDisp *textD, int style)$/;"	f
TextDSetFont	textDisp.c	/^void TextDSetFont(textDisp *textD, XFontStruct *fontStruct)$/;"	f
TextDSetInsertPosition	textDisp.c	/^void TextDSetInsertPosition(textDisp *textD, int newPos)$/;"	f
TextDSetLineNumberArea	textDisp.c	/^void TextDSetLineNumberArea(textDisp *textD, int lineNumLeft, int lineNumWidth,$/;"	f
TextDSetScroll	textDisp.c	/^void TextDSetScroll(textDisp *textD, int topLineNum, int horizOffset)$/;"	f
TextDSetWrapMode	textDisp.c	/^void TextDSetWrapMode(textDisp *textD, int wrap, int wrapMargin)$/;"	f
TextDStartOfLine	textDisp.c	/^int TextDStartOfLine(textDisp *textD, int pos)$/;"	f
TextDUnblankCursor	textDisp.c	/^void TextDUnblankCursor(textDisp *textD)$/;"	f
TextDXYToCharPos	textDisp.c	/^int TextDXYToCharPos(textDisp *textD, int x, int y)$/;"	f
TextDXYToPosition	textDisp.c	/^int TextDXYToPosition(textDisp *textD, int x, int y)$/;"	f
TextDXYToUnconstrainedPosition	textDisp.c	/^void TextDXYToUnconstrainedPosition(textDisp *textD, int x, int y, int *row,$/;"	f
TextFirstVisibleLine	text.c	/^int TextFirstVisibleLine(Widget w)$/;"	f
TextFirstVisiblePos	text.c	/^int TextFirstVisiblePos(Widget w)$/;"	f
TextGetActions	text.c	/^XtActionsRec *TextGetActions(int *nActions)$/;"	f
TextGetBuffer	text.c	/^textBuffer *TextGetBuffer(Widget w)$/;"	f
TextGetCursorPos	text.c	/^int TextGetCursorPos(Widget w)$/;"	f
TextGetMaxFontWidth	text.c	/^int TextGetMaxFontWidth(Widget w, Boolean considerStyles)$/;"	f
TextGetMinFontWidth	text.c	/^int TextGetMinFontWidth(Widget w, Boolean considerStyles)$/;"	f
TextGetScroll	text.c	/^void TextGetScroll(Widget w, int *topLineNum, int *horizOffset)$/;"	f
TextGetWrapped	text.c	/^char *TextGetWrapped(Widget w, int startPos, int endPos, int *outLen)$/;"	f
TextHandleXSelections	text.c	/^void TextHandleXSelections(Widget w)$/;"	f
TextInsertAtCursor	text.c	/^void TextInsertAtCursor(Widget w, char *chars, XEvent *event,$/;"	f
TextLastVisiblePos	text.c	/^int TextLastVisiblePos(Widget w)$/;"	f
TextNumVisibleLines	text.c	/^int TextNumVisibleLines(Widget w)$/;"	f
TextPart	textP.h	/^} TextPart;$/;"	t
TextPasteClipboard	text.c	/^void TextPasteClipboard(Widget w, Time time)$/;"	f
TextPosToLineAndCol	text.c	/^int TextPosToLineAndCol(Widget w, int pos, int *lineNum, int *column)$/;"	f
TextPosToXY	text.c	/^int TextPosToXY(Widget w, int pos, int *x, int *y)$/;"	f
TextRec	textP.h	/^} TextRec;$/;"	t
TextSetBuffer	text.c	/^void TextSetBuffer(Widget w, textBuffer *buffer)$/;"	f
TextSetCursorPos	text.c	/^void TextSetCursorPos(Widget w, int pos)$/;"	f
TextSetScroll	text.c	/^void TextSetScroll(Widget w, int topLineNum, int horizOffset)$/;"	f
TextStopHandlingSelections	text.c	/^void TextStopHandlingSelections(Widget w)$/;"	f
TextVisibleWidth	text.c	/^int TextVisibleWidth(Widget w)$/;"	f
TextWidget	text.h	/^typedef struct _TextRec *TextWidget;$/;"	t
TextWidgetClass	text.h	/^typedef struct _TextClassRec *TextWidgetClass;$/;"	t
Text_H	text.h	3;"	d
TheDisplay	nc.c	/^Display *TheDisplay;$/;"	v
TheDisplay	nedit.c	/^Display *TheDisplay;$/;"	v
Total_Paren	regexConvert.c	/^static int            Total_Paren;     \/* Parentheses, (),  counter. *\/$/;"	v	file:
Total_Paren	regularExp.c	/^static int            Total_Paren;     \/* Parentheses, (),  counter. *\/$/;"	v	file:
UNARY_MINUS	parse.c	92;"	d	file:
UNARY_NUMERIC_OPERATION	interpret.c	938;"	d	file:
UNDO_NOOP	undo.h	/^enum undoTypes {UNDO_NOOP, ONE_CHAR_INSERT, ONE_CHAR_REPLACE, ONE_CHAR_DELETE,$/;"	e	enum:undoTypes
UNDO_OP_LIMIT	nedit.h	46;"	d
UNDO_OP_TRIMTO	nedit.h	47;"	d
UNDO_PURGE_LIMIT	nedit.h	39;"	d
UNDO_PURGE_TRIMTO	nedit.h	41;"	d
UNDO_WORRY_LIMIT	nedit.h	42;"	d
UNDO_WORRY_TRIMTO	nedit.h	44;"	d
UNFINISHED_STYLE	highlight.c	67;"	d	file:
UNIX_FILE_FORMAT	nedit.h	/^enum fileFormats {UNIX_FILE_FORMAT, DOS_FILE_FORMAT, MAC_FILE_FORMAT};$/;"	e	enum:fileFormats
UNSELECT_SECONDARY	textSel.c	/^enum selectNotifyActions {UNSELECT_SECONDARY, REMOVE_SECONDARY,$/;"	e	file:	enum:selectNotifyActions
UNSUCCESSFUL_INSERT	textSel.c	/^enum insertResultFlags {INSERT_WAITING, UNSUCCESSFUL_INSERT, SUCCESSFUL_INSERT};$/;"	e	file:	enum:insertResultFlags
USER_LOCKED_BIT	nedit.h	82;"	d
USE_LAST	textDrag.h	/^enum blockDragTypes {USE_LAST, DRAG_COPY, DRAG_MOVE, DRAG_OVERLAY_MOVE,$/;"	e	enum:blockDragTypes
U_CHAR_AT	regexConvert.c	43;"	d	file:
U_CHAR_AT	regularExp.c	338;"	d	file:
Undo	undo.c	/^void Undo(WindowInfo *window)$/;"	f
UndoInfo	nedit.h	/^} UndoInfo;$/;"	t
UniqueUntitledName	file.c	/^void UniqueUntitledName(char *name)$/;"	f
UpcaseSelection	shift.c	/^void UpcaseSelection(WindowInfo *window)$/;"	f
UpdateBGMenu	userCmds.c	/^void UpdateBGMenu(WindowInfo *window)$/;"	f
UpdateHighlightStyles	highlight.c	/^void UpdateHighlightStyles(WindowInfo *window)$/;"	f
UpdateLanguageModeMenu	highlightData.c	/^void UpdateLanguageModeMenu(void)$/;"	f
UpdateLineNumDisp	window.c	/^void UpdateLineNumDisp(WindowInfo *window)$/;"	f
UpdateMacroMenu	userCmds.c	/^void UpdateMacroMenu(WindowInfo *window)$/;"	f
UpdateMarkTable	selection.c	/^void UpdateMarkTable(WindowInfo *window, int pos, int nInserted,$/;"	f
UpdateMinPaneHeights	window.c	/^void UpdateMinPaneHeights(WindowInfo *window)$/;"	f
UpdateReplaceActionButtons	search.c	/^void UpdateReplaceActionButtons(WindowInfo* window)$/;"	f
UpdateShellMenu	userCmds.c	/^void UpdateShellMenu(WindowInfo *window)$/;"	f
UpdateStatsLine	window.c	/^void UpdateStatsLine(WindowInfo *window)$/;"	f
UpdateWMSizeHints	window.c	/^void UpdateWMSizeHints(WindowInfo *window)$/;"	f
UpdateWindowReadOnly	window.c	/^void UpdateWindowReadOnly(WindowInfo *window)$/;"	f
UpdateWindowTitle	window.c	/^void UpdateWindowTitle(WindowInfo *window)$/;"	f
UseTabsToggle	preferences.c	/^static Widget TabDistText, EmTabText, EmTabToggle, UseTabsToggle, EmTabLabel;$/;"	v	file:
VERTICAL_SCROLL_DELAY	text.c	62;"	d	file:
VERT_BORDER	smartIndent.c	1421;"	d	file:
WHILE	parse.c	68;"	d	file:
WHITE_SPACE_SIZE	regularExp.c	369;"	d	file:
WORD_CHAR	regularExp.c	129;"	d	file:
WORST	regexConvert.c	47;"	d	file:
WORST	regularExp.c	342;"	d	file:
White_Space	regularExp.c	/^static unsigned char  White_Space [WHITE_SPACE_SIZE]; \/* Arrays used by       *\/$/;"	v	file:
WidgetToPaneIndex	window.c	/^int WidgetToPaneIndex(WindowInfo *window, Widget w)$/;"	f
WidgetToWindow	window.c	/^WindowInfo *WidgetToWindow(Widget w)$/;"	f
WindowInfo	nedit.h	/^} WindowInfo;$/;"	t
WindowList	nedit.c	/^WindowInfo *WindowList = NULL;$/;"	v
Word_Char	regularExp.c	/^static unsigned char  Word_Char   [ALNUM_CHAR_SIZE];  \/* functions            *\/$/;"	v	file:
WrapDialogForWindow	preferences.c	/^static WindowInfo *WrapDialogForWindow;$/;"	v	file:
WrapMarginDialog	preferences.c	/^void WrapMarginDialog(Widget parent, WindowInfo *forWindow)$/;"	f
WrapText	preferences.c	/^static Widget WrapText, WrapTextLabel, WrapWindowToggle;$/;"	v	file:
WrapTextLabel	preferences.c	/^static Widget WrapText, WrapTextLabel, WrapWindowToggle;$/;"	v	file:
WrapWindowToggle	preferences.c	/^static Widget WrapText, WrapTextLabel, WrapWindowToggle;$/;"	v	file:
WriteBGMenuCmdsString	userCmds.c	/^char *WriteBGMenuCmdsString(void)$/;"	f
WriteBackupFile	file.c	/^int WriteBackupFile(WindowInfo *window)$/;"	f
WriteHighlightString	highlightData.c	/^char *WriteHighlightString(void)$/;"	f
WriteMacroCmdsString	userCmds.c	/^char *WriteMacroCmdsString(void)$/;"	f
WriteNEditDB	menu.c	/^void WriteNEditDB(void)$/;"	f
WriteShellCmdsString	userCmds.c	/^char *WriteShellCmdsString(void)$/;"	f
WriteSmartIndentCommonString	smartIndent.c	/^char *WriteSmartIndentCommonString(void)$/;"	f
WriteSmartIndentString	smartIndent.c	/^char *WriteSmartIndentString(void)$/;"	f
WriteStylesString	highlightData.c	/^char *WriteStylesString(void)$/;"	f
X_REGEX_BR	regularExp.c	159;"	d	file:
X_REGEX_BR_CI	regularExp.c	160;"	d	file:
XtOffset	text.c	53;"	d	file:
YES_SBC_DIALOG_RESPONSE	file.h	9;"	d
YYABORT	parse.c	985;"	d	file:
YYACCEPT	parse.c	987;"	d	file:
YYBYACC	parse.c	6;"	d	file:
YYDEBUG	parse.c	551;"	d	file:
YYEMPTY	parse.c	10;"	d	file:
YYERRCODE	parse.c	63;"	d	file:
YYERROR	parse.c	988;"	d	file:
YYFINAL	parse.c	549;"	d	file:
YYINITSTACKSIZE	parse.c	682;"	d	file:
YYLEX	parse.c	9;"	d	file:
YYMAJOR	parse.c	7;"	d	file:
YYMAXDEPTH	parse.c	672;"	d	file:
YYMAXDEPTH	parse.c	673;"	d	file:
YYMAXDEPTH	parse.c	679;"	d	file:
YYMAXTOKEN	parse.c	553;"	d	file:
YYMINOR	parse.c	8;"	d	file:
YYPARSE_PARAM_ARG	parse.c	1003;"	d	file:
YYPARSE_PARAM_ARG	parse.c	1006;"	d	file:
YYPARSE_PARAM_ARG	parse.c	992;"	d	file:
YYPARSE_PARAM_ARG	parse.c	995;"	d	file:
YYPARSE_PARAM_DECL	parse.c	1004;"	d	file:
YYPARSE_PARAM_DECL	parse.c	1007;"	d	file:
YYPARSE_PARAM_DECL	parse.c	993;"	d	file:
YYPARSE_PARAM_DECL	parse.c	996;"	d	file:
YYPARSE_PARAM_TYPE	parse.c	1000;"	d	file:
YYPREFIX	parse.c	15;"	d	file:
YYRECOVERING	parse.c	13;"	d	file:
YYREJECT	parse.c	986;"	d	file:
YYSTACKSIZE	parse.c	676;"	d	file:
YYSTACKSIZE	parse.c	678;"	d	file:
YYSTYPE	parse.c	/^} YYSTYPE;$/;"	t	file:
YYTABLESIZE	parse.c	198;"	d	file:
_SelectionInfo	search.c	/^typedef struct _SelectionInfo {$/;"	s	file:
_TextClassPart	textP.h	/^typedef struct _TextClassPart{$/;"	s
_TextClassRec	textP.h	/^typedef struct _TextClassRec{$/;"	s
_TextPart	textP.h	/^typedef struct _TextPart {$/;"	s
_TextRec	textP.h	/^typedef struct _TextRec {$/;"	s
_UndoInfo	nedit.h	/^typedef struct _UndoInfo {$/;"	s
_WindowInfo	nedit.h	/^typedef struct _WindowInfo {$/;"	s
_charMatchTable	search.c	/^typedef struct _charMatchTable {$/;"	s	file:
_highlightDataRec	export.c	/^typedef struct _highlightDataRec {$/;"	s	file:
_highlightDataRec	highlight.c	/^typedef struct _highlightDataRec {$/;"	s	file:
_tag	tags.h	/^typedef struct _tag {$/;"	s
_tagFile	tags.h	/^typedef struct _tagFile {$/;"	s
_textBuffer	textBuf.h	/^typedef struct _textBuffer {$/;"	s
_textDisp	textDisp.h	/^typedef struct _textDisp {$/;"	s
absTopLineNum	textDisp.h	/^    int absTopLineNum;			\/* In continuous wrap mode, the line$/;"	m	struct:_textDisp
accFocusCB	userCmds.c	/^static void accFocusCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
accKeyCB	userCmds.c	/^static void accKeyCB(Widget w, XtPointer clientData, XKeyEvent *event)$/;"	f	file:
accLoseFocusCB	userCmds.c	/^static void accLoseFocusCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
accTextW	userCmds.c	/^    Widget nameTextW, accTextW, mneTextW, cmdTextW, saveFirstBtn;$/;"	m	struct:
action	textSel.c	/^    int action;$/;"	m	struct:
actionText	textSel.c	/^    char *actionText;$/;"	m	struct:
actionToString	macro.c	/^char *actionToString(char *actionName, XEvent *event, String *params,$/;"	f
actionsList	text.c	/^static XtActionsRec actionsList[] = {$/;"	v	file:
activePaneMV	macro.c	/^static int activePaneMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
add	interpret.c	/^static int add(void)$/;"	f	file:
addLoopAddr	interpret.c	/^static void addLoopAddr(Inst *addr)$/;"	f	file:
addOutput	shell.c	/^static void addOutput(buffer **bufList, buffer *buf)$/;"	f	file:
addPadding	textBuf.c	/^static void addPadding(char *string, int startIndent, int toIndent,$/;"	f	file:
addRedoItem	undo.c	/^static void addRedoItem(WindowInfo *window, UndoInfo *redo)$/;"	f	file:
addTag	tags.c	/^static int addTag(char *name,char *file,char *search,char *path,int index)$/;"	f	file:
addTerminatingNewline	userCmds.c	/^static void addTerminatingNewline(char **string)$/;"	f	file:
addToToggleShortList	menu.c	/^static void addToToggleShortList(Widget w)$/;"	f	file:
addToWindowList	window.c	/^static void addToWindowList(WindowInfo *window) $/;"	f	file:
addUndoItem	undo.c	/^static void addUndoItem(WindowInfo *window, UndoInfo *undo)$/;"	f	file:
addWindowIcon	window.c	/^static void addWindowIcon(Widget shell)$/;"	f	file:
addWrapCB	file.c	/^static void addWrapCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
addWrapNewlines	file.c	/^static void addWrapNewlines(WindowInfo *window)$/;"	f	file:
adjustSecondarySelection	text.c	/^static void adjustSecondarySelection(TextWidget tw, int x, int y)$/;"	f	file:
adjustSelection	text.c	/^static void adjustSelection(TextWidget tw, int x, int y)$/;"	f	file:
adjustcase	regularExp.c	/^static void adjustcase (unsigned char *str, int len, unsigned char chgcase) {$/;"	f	file:
allTagsDefItem	nedit.h	/^    Widget	allTagsDefItem;$/;"	m	struct:_WindowInfo
allocColor	highlight.c	/^static Pixel allocColor(Widget w, const char *colorName)$/;"	f	file:
allocateFixedFontGCs	textDisp.c	/^static void allocateFixedFontGCs(textDisp *textD, XFontStruct *fontStruct,$/;"	f	file:
allocateGC	textDisp.c	/^static GC allocateGC(Widget w, unsigned long valueMask,$/;"	f	file:
alternative	regexConvert.c	/^static int alternative (int *flag_param) {$/;"	f	file:
alternative	regularExp.c	/^static unsigned char * alternative (int *flag_param) {$/;"	f	file:
anchor	regularExp.h	/^   char  anchor;            \/* Internal use only. *\/$/;"	m	struct:regexp
anchor	textP.h	/^    int anchor, rectAnchor;		\/* Anchors for drag operations and$/;"	m	struct:_TextPart
and	interpret.c	/^static int and(void)$/;"	f	file:
appendDeletedText	undo.c	/^static void appendDeletedText(WindowInfo *window, char *deletedText,$/;"	f	file:
appendFileMS	macro.c	/^static int appendFileMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
applyCB	highlightData.c	/^static void applyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
applyCB	smartIndent.c	/^static void applyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
applyCB	userCmds.c	/^static void applyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
applyDialogChanges	userCmds.c	/^static int applyDialogChanges(userCmdDialog *ucd)$/;"	f	file:
arrayAllocateNode	interpret.c	/^static rbTreeNode *arrayAllocateNode(rbTreeNode *src)$/;"	f	file:
arrayAssign	interpret.c	/^static int arrayAssign(void)$/;"	f	file:
arrayDisposeNode	interpret.c	/^static void arrayDisposeNode(rbTreeNode *src)$/;"	f	file:
arrayEmptyAllocator	interpret.c	/^static rbTreeNode *arrayEmptyAllocator(void)$/;"	f	file:
arrayEntryCompare	interpret.c	/^static int arrayEntryCompare(rbTreeNode *left, rbTreeNode *right)$/;"	f	file:
arrayEntryCopyToNode	interpret.c	/^static int arrayEntryCopyToNode(rbTreeNode *dst, rbTreeNode *src)$/;"	f	file:
arrayIter	interpret.c	/^static int arrayIter(void)$/;"	f	file:
arrayIterateFirst	interpret.c	/^SparseArrayEntry *arrayIterateFirst(DataValue *theArray)$/;"	f
arrayIterateNext	interpret.c	/^SparseArrayEntry *arrayIterateNext(SparseArrayEntry *iterator)$/;"	f
arrayPtr	interpret.h	/^        struct SparseArrayEntry *arrayPtr;$/;"	m	union:
arrayRef	interpret.c	/^static int arrayRef(void)$/;"	f	file:
ascent	textDisp.h	/^    int ascent, descent;		\/* Composite ascent and descent for$/;"	m	struct:_textDisp
assign	interpret.c	/^static int assign(void)      \/* assign top value to next symbol *\/$/;"	f	file:
atTabStop	shift.c	/^static int atTabStop(int pos, int tabDist)$/;"	f	file:
atom	regexConvert.c	/^static int atom (int *flag_param) {$/;"	f	file:
atom	regularExp.c	/^static unsigned char * atom (int *flag_param) {$/;"	f	file:
atomIndex	textSel.c	/^enum atomIndex {A_TEXT, A_TARGETS, A_MULTIPLE, A_TIMESTAMP,$/;"	g	file:
attempt	regularExp.c	/^static int attempt (regexp *prog, unsigned char *string) {$/;"	f	file:
autoIndent	preferences.c	/^    int autoIndent;		\/* style for auto-indent *\/$/;"	m	struct:prefData
autoIndent	textP.h	/^    Boolean autoIndent;$/;"	m	struct:_TextPart
autoIndentCB	menu.c	/^static void autoIndentCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
autoIndentDefCB	menu.c	/^static void autoIndentDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
autoIndentDefItem	nedit.h	/^    Widget	autoIndentDefItem;$/;"	m	struct:_WindowInfo
autoIndentItem	nedit.h	/^    Widget	autoIndentItem;$/;"	m	struct:_WindowInfo
autoIndentMV	macro.c	/^static int autoIndentMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
autoIndentOffCB	menu.c	/^static void autoIndentOffCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
autoIndentOffDefCB	menu.c	/^static void autoIndentOffDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
autoIndentOffDefItem	nedit.h	/^    Widget	autoIndentOffDefItem;$/;"	m	struct:_WindowInfo
autoIndentOffItem	nedit.h	/^    Widget	autoIndentOffItem;$/;"	m	struct:_WindowInfo
autoIndentW	preferences.c	/^    Widget autoIndentW;$/;"	m	struct:
autoSave	nedit.h	/^    Boolean	autoSave;		\/* is autosave turned on? *\/$/;"	m	struct:_WindowInfo
autoSave	preferences.c	/^    int autoSave;		\/* whether automatic backup feature is on *\/$/;"	m	struct:prefData
autoSaveCB	menu.c	/^static void autoSaveCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
autoSaveCharCount	nedit.h	/^    int		autoSaveCharCount;	\/* count of single characters typed$/;"	m	struct:_WindowInfo
autoSaveDefCB	menu.c	/^static void autoSaveDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
autoSaveDefItem	nedit.h	/^    Widget	autoSaveDefItem;$/;"	m	struct:_WindowInfo
autoSaveItem	nedit.h	/^    Widget	autoSaveItem;$/;"	m	struct:_WindowInfo
autoSaveOpCount	nedit.h	/^    int		autoSaveOpCount;	\/* count of editing operations "" *\/$/;"	m	struct:_WindowInfo
autoScrollProcID	textP.h	/^    XtIntervalId autoScrollProcID;	\/* id of Xt timer proc for autoscroll *\/$/;"	m	struct:_TextPart
autoScrollTimerProc	text.c	/^static void autoScrollTimerProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
autoShowInsertPos	textP.h	/^    Boolean autoShowInsertPos;$/;"	m	struct:_TextPart
autoStart	nc.c	/^    int autoStart;$/;"	m	struct:
autoWrap	textP.h	/^    Boolean autoWrap;$/;"	m	struct:_TextPart
autoWrapPastedText	textP.h	/^    Boolean autoWrapPastedText;$/;"	m	struct:_TextPart
back_ref	regularExp.c	/^static unsigned char * back_ref ($/;"	f	file:
backupFileName	file.c	/^static void backupFileName(WindowInfo *window, char *name)$/;"	f	file:
backwardCharacterAP	text.c	/^static void backwardCharacterAP(Widget w, XEvent *event, String *args,$/;"	f	file:
backwardOneContext	highlight.c	/^static int backwardOneContext(textBuffer *buf, reparseContext *context,$/;"	f	file:
backwardParagraphAP	text.c	/^static void backwardParagraphAP(Widget w, XEvent *event, String *args,$/;"	f	file:
backwardRegexSearch	search.c	/^static int backwardRegexSearch(const char *string, const char *searchString, int wrap,$/;"	f	file:
backwardWordAP	text.c	/^static void backwardWordAP(Widget w, XEvent *event, String *args,$/;"	f	file:
bannerIsUp	macro.c	/^    char bannerIsUp;$/;"	m	struct:
bannerIsUp	shell.c	/^    char bannerIsUp;$/;"	m	struct:
bannerTimeoutID	macro.c	/^    XtIntervalId bannerTimeoutID;$/;"	m	struct:
bannerTimeoutID	shell.c	/^    XtIntervalId bannerTimeoutID, flushTimeoutID;$/;"	m	struct:
bannerTimeoutProc	macro.c	/^static void bannerTimeoutProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
bannerTimeoutProc	shell.c	/^static void bannerTimeoutProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
bckError	file.c	/^static int bckError(WindowInfo *window, char *errString, char *file)$/;"	f	file:
beepMS	macro.c	/^static int beepMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
beepOnSearchWrapDefCB	menu.c	/^static void beepOnSearchWrapDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
beepOnSearchWrapDefItem	nedit.h	/^    Widget      beepOnSearchWrapDefItem;$/;"	m	struct:_WindowInfo
beginArrayIter	interpret.c	/^static int beginArrayIter(void)$/;"	f	file:
beginningOfFileAP	text.c	/^static void beginningOfFileAP(Widget w, XEvent *event, String *args,$/;"	f	file:
beginningOfLineAP	text.c	/^static void beginningOfLineAP(Widget w, XEvent *event, String *args,$/;"	f	file:
beginningOfSelectionAP	menu.c	/^static void beginningOfSelectionAP(Widget w, XEvent *event, String *args,$/;"	f	file:
bgMenuAP	menu.c	/^static void bgMenuAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
bgMenuBtn	preferences.c	/^    char bgMenuBtn[MAX_ACCEL_LEN]; \/* X event description for triggering$/;"	m	struct:prefData
bgMenuCB	userCmds.c	/^static void bgMenuCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
bgMenuCmds	preferences.c	/^    char *bgMenuCmds;$/;"	m	struct:
bgMenuDefCB	menu.c	/^static void bgMenuDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
bgMenuPane	nedit.h	/^    Widget  	bgMenuPane;$/;"	m	struct:_WindowInfo
bgMenuPostAP	menu.c	/^static void bgMenuPostAP(Widget w, XEvent *event, String *args,$/;"	f	file:
bgMenuRedoItem	nedit.h	/^    Widget  	bgMenuRedoItem;$/;"	m	struct:_WindowInfo
bgMenuUndoItem	nedit.h	/^    Widget  	bgMenuUndoItem;$/;"	m	struct:_WindowInfo
bgPixel	textDisp.h	/^    Pixel bgPixel, selectBGPixel;   	\/* Background colors *\/$/;"	m	struct:_textDisp
bitAnd	interpret.c	/^static int bitAnd(void)$/;"	f	file:
bitOr	interpret.c	/^static int bitOr(void)$/;"	f	file:
blankCursorProtrusions	textDisp.c	/^static void blankCursorProtrusions(textDisp *textD)$/;"	f	file:
blockDragTypes	textDrag.h	/^enum blockDragTypes {USE_LAST, DRAG_COPY, DRAG_MOVE, DRAG_OVERLAY_MOVE,$/;"	g
boldBrowseCB	preferences.c	/^static void boldBrowseCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
boldErrW	preferences.c	/^    Widget boldErrW;$/;"	m	struct:
boldFontName	nedit.h	/^    char	boldFontName[MAX_FONT_LEN];$/;"	m	struct:_WindowInfo
boldFontString	preferences.c	/^    char boldFontString[MAX_FONT_LEN];$/;"	m	struct:prefData
boldFontStruct	nedit.h	/^    XFontStruct *boldFontStruct;$/;"	m	struct:_WindowInfo
boldFontStruct	preferences.c	/^    XFontStruct *boldFontStruct;$/;"	m	struct:prefData
boldItalicBrowseCB	preferences.c	/^static void boldItalicBrowseCB(Widget w, XtPointer clientData,$/;"	f	file:
boldItalicErrW	preferences.c	/^    Widget boldItalicErrW;$/;"	m	struct:
boldItalicFontName	nedit.h	/^    char	boldItalicFontName[MAX_FONT_LEN];$/;"	m	struct:_WindowInfo
boldItalicFontString	preferences.c	/^    char boldItalicFontString[MAX_FONT_LEN];$/;"	m	struct:prefData
boldItalicFontStruct	nedit.h	/^    XFontStruct *boldItalicFontStruct;$/;"	m	struct:_WindowInfo
boldItalicFontStruct	preferences.c	/^    XFontStruct *boldItalicFontStruct;$/;"	m	struct:prefData
boldItalicModifiedCB	preferences.c	/^static void boldItalicModifiedCB(Widget w, XtPointer clientData,$/;"	f	file:
boldItalicW	highlightData.c	/^    Widget plainW, boldW, italicW, boldItalicW;$/;"	m	struct:
boldItalicW	preferences.c	/^    Widget boldItalicW;$/;"	m	struct:
boldModifiedCB	preferences.c	/^static void boldModifiedCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
boldW	highlightData.c	/^    Widget plainW, boldW, italicW, boldItalicW;$/;"	m	struct:
boldW	preferences.c	/^    Widget boldW;$/;"	m	struct:
brace_counts	regularExp.c	/^typedef struct brace_counts {$/;"	s	file:
brace_counts	regularExp.c	/^} brace_counts;$/;"	t	file:
branch	interpret.c	/^static int branch(void)$/;"	f	file:
branchFalse	interpret.c	/^static int branchFalse(void)$/;"	f	file:
branchNever	interpret.c	/^static int branchNever(void)$/;"	f	file:
branchTrue	interpret.c	/^static int branchTrue(void)$/;"	f	file:
branch_tail	regularExp.c	/^static void branch_tail (unsigned char *ptr, int offset, unsigned char *val) {$/;"	f	file:
browseFont	preferences.c	/^static void browseFont(Widget parent, Widget fontTextW)$/;"	f	file:
btnDownX	textP.h	/^    int btnDownX, btnDownY;		\/* Mark the position of last btn down$/;"	m	struct:_TextPart
btnDownY	textP.h	/^    int btnDownX, btnDownY;		\/* Mark the position of last btn down$/;"	m	struct:_TextPart
buf	textBuf.h	/^    char *buf;                  \/* allocated memory where the text is stored *\/$/;"	m	struct:_textBuffer
bufElem	shell.c	/^typedef struct bufElem {$/;"	s	file:
bufModifiedCB	textDisp.c	/^static void bufModifiedCB(int pos, int nInserted, int nDeleted,$/;"	f	file:
bufModifyCallbackProc	textBuf.h	/^typedef void (*bufModifyCallbackProc)(int pos, int nInserted, int nDeleted,$/;"	t
buffer	nedit.h	/^    textBuffer	*buffer;		\/* holds the text being edited *\/$/;"	m	struct:_WindowInfo
buffer	shell.c	/^} buffer;$/;"	t	file:
buffer	textDisp.h	/^    textBuffer *buffer;     	    	\/* Contains text to be displayed *\/$/;"	m	struct:_textDisp
c	search.c	/^    char c;$/;"	m	struct:_charMatchTable
calcLastChar	textDisp.c	/^static void calcLastChar(textDisp *textD)$/;"	f	file:
calcLineStarts	textDisp.c	/^static void calcLineStarts(textDisp *textD, int startLine, int endLine)$/;"	f	file:
callCursorMovementCBs	text.c	/^static void callCursorMovementCBs(Widget w, XEvent *event)$/;"	f	file:
callModifyCBs	textBuf.c	/^static void callModifyCBs(textBuffer *buf, int pos, int nDeleted,$/;"	f	file:
callSubroutine	interpret.c	/^static int callSubroutine(void)$/;"	f	file:
cancelDrag	text.c	/^static void cancelDrag(Widget w)$/;"	f	file:
cancelLearn	macro.c	/^static void cancelLearn(void)$/;"	f	file:
cancelLearnCB	menu.c	/^static void cancelLearnCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
cancelMacroItem	nedit.h	/^    Widget	cancelMacroItem;$/;"	m	struct:_WindowInfo
cancelShellCB	menu.c	/^static void cancelShellCB(Widget w, WindowInfo *window, XtPointer callData)$/;"	f	file:
cancelShellItem	nedit.h	/^    Widget	cancelShellItem;$/;"	m	struct:_WindowInfo
capitalizeAP	menu.c	/^static void capitalizeAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
cbArgs	textBuf.h	/^    void **cbArgs;		\/* caller arguments for modifyProcs above *\/$/;"	m	struct:_textBuffer
changeCase	shift.c	/^static void changeCase(WindowInfo *window, int makeUpper)$/;"	f	file:
charContext	highlight.h	/^    int charContext;$/;"	m	struct:
charContextW	highlightData.c	/^    Widget charContextW;$/;"	m	struct:
charMatchTable	search.c	/^} charMatchTable;$/;"	t	file:
charsTyped	text.h	/^    char *charsTyped;$/;"	m	struct:
checkAutoScroll	text.c	/^static void checkAutoScroll(TextWidget w, int x, int y)$/;"	f	file:
checkAutoShowInsertPos	text.c	/^static void checkAutoShowInsertPos(Widget w)$/;"	f	file:
checkCB	highlightData.c	/^static void checkCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
checkCB	smartIndent.c	/^static void checkCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
checkCB	userCmds.c	/^static void checkCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
checkDoMacroArg	nedit.c	/^static int checkDoMacroArg(char *macro)$/;"	f	file:
checkFontStatus	preferences.c	/^static int checkFontStatus(fontDialog *fd, Widget fontTextFieldW)$/;"	f	file:
checkHighlightDialogData	highlightData.c	/^static int checkHighlightDialogData(void)$/;"	f	file:
checkMacro	userCmds.c	/^static int checkMacro(userCmdDialog *ucd)$/;"	f	file:
checkMacroText	userCmds.c	/^static int checkMacroText(char *macro, Widget errorParent, Widget errFocus)$/;"	f	file:
checkMoveSelectionChange	text.c	/^static void checkMoveSelectionChange(Widget w, XEvent *event, int startPos,$/;"	f	file:
checkMultiReplaceListForDoomedW	search.c	/^static void checkMultiReplaceListForDoomedW(WindowInfo* window, $/;"	f	file:
checkReadOnly	text.c	/^static int checkReadOnly(Widget w)$/;"	f	file:
checkSmartIndentCommonDialogData	smartIndent.c	/^static int checkSmartIndentCommonDialogData(void)$/;"	f	file:
checkSmartIndentDialogData	smartIndent.c	/^static int checkSmartIndentDialogData(void)$/;"	f	file:
childPid	shell.c	/^    pid_t childPid;$/;"	m	struct:
chooseNullSubsChar	textBuf.c	/^static char chooseNullSubsChar(char hist[256])$/;"	f	file:
chunk	regexConvert.c	/^static int chunk (int paren, int *flag_param) {$/;"	f	file:
chunk	regularExp.c	/^static unsigned char * chunk (int paren, int *flag_param) {$/;"	f	file:
cleanUpServerCommunication	server.c	/^static void cleanUpServerCommunication(void)$/;"	f	file:
clearAP	menu.c	/^static void clearAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
clearRect	textDisp.c	/^static void clearRect(textDisp *textD, int style, int x, int y, $/;"	f	file:
clipboardToStringMS	macro.c	/^static int clipboardToStringMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
closeAP	menu.c	/^static void closeAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
closeCB	window.c	/^static void closeCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
closeItem	nedit.h	/^    Widget	closeItem;$/;"	m	struct:_WindowInfo
closeOnCompletion	macro.c	/^    char closeOnCompletion;$/;"	m	struct:
closePaneAP	menu.c	/^static void closePaneAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
closePaneItem	nedit.h	/^    Widget	closePaneItem;$/;"	m	struct:_WindowInfo
cmd	userCmds.c	/^    char *cmd;$/;"	m	struct:
cmdLineHelp	nc.c	/^static const char cmdLineHelp[] =$/;"	v	file:
cmdLineHelp	nedit.c	/^static char cmdLineHelp[] =$/;"	v	file:
cmdTextW	userCmds.c	/^    Widget nameTextW, accTextW, mneTextW, cmdTextW, saveFirstBtn;$/;"	m	struct:
cmpStrPtr	menu.c	/^static int cmpStrPtr(const void *strA, const void *strB)$/;"	f	file:
coalesceOutput	shell.c	/^static char *coalesceOutput(buffer **bufList, int *outLength)$/;"	f	file:
code	interpret.h	/^    Inst *code;$/;"	m	struct:
collectWritableWindows	search.c	/^static void collectWritableWindows(WindowInfo* window)$/;"	f	file:
color	highlightData.c	/^    char *color;$/;"	m	struct:
color	rbTree.h	/^    int color;                 \/* node color (rbTreeNodeBlack, rbTreeNodeRed) *\/$/;"	m	struct:rbTreeNode
color	textDisp.h	/^    Pixel color;$/;"	m	struct:
colorDistance	highlight.c	/^static double colorDistance(const XColor *c1, const XColor *c2)$/;"	f	file:
colorOnly	export.c	/^    int colorOnly;$/;"	m	struct:_highlightDataRec
colorOnly	highlight.c	/^    int colorOnly;$/;"	m	struct:_highlightDataRec
colorPatW	highlightData.c	/^    Widget colorPatW;$/;"	m	struct:
colorW	highlightData.c	/^    Widget colorW;$/;"	m	struct:
columnMV	macro.c	/^static int columnMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
columns	textP.h	/^    int rows, columns;$/;"	m	struct:_TextPart
comApplyCB	smartIndent.c	/^static void comApplyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
comCheckCB	smartIndent.c	/^static void comCheckCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
comDestroyCB	smartIndent.c	/^static void comDestroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
comDismissCB	smartIndent.c	/^static void comDismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
comOKCB	smartIndent.c	/^static void comOKCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
comRestoreCB	smartIndent.c	/^static void comRestoreCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
commonDialogCB	smartIndent.c	/^static void commonDialogCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
compareWindowNames	menu.c	/^static int compareWindowNames(const void *windowA, const void *windowB)$/;"	f	file:
compareWindowNames	search.c	/^static int compareWindowNames(const void *windowA, const void *windowB)$/;"	f	file:
compilePatterns	highlight.c	/^static highlightDataRec *compilePatterns(Widget dialogParent,$/;"	f	file:
compileREAndWarn	highlight.c	/^static regexp *compileREAndWarn(Widget parent, char *re)$/;"	f	file:
concat	interpret.c	/^static int concat(void)$/;"	f	file:
contWrapDefCB	menu.c	/^static void contWrapDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
contWrapDefItem	nedit.h	/^    Widget	contWrapDefItem;$/;"	m	struct:_WindowInfo
contWrapW	preferences.c	/^    Widget contWrapW;$/;"	m	struct:
contents	shell.c	/^    char contents[IO_BUF_SIZE];$/;"	m	struct:bufElem
context	macro.c	/^    RestartData *context;$/;"	m	struct:
contextRequirements	export.c	/^    reparseContext contextRequirements;$/;"	m	struct:
contextRequirements	highlight.c	/^    reparseContext contextRequirements;$/;"	m	struct:
continueWorkProc	macro.c	/^static Boolean continueWorkProc(XtPointer clientData)$/;"	f	file:
continueWorkProcID	macro.c	/^    XtWorkProcId continueWorkProcID;$/;"	m	struct:
continuousWrap	textDisp.h	/^    int continuousWrap;     	    	\/* Wrap long lines when displaying *\/$/;"	m	struct:_textDisp
continuousWrap	textP.h	/^    Boolean continuousWrap;$/;"	m	struct:_TextPart
continuousWrapCB	menu.c	/^static void continuousWrapCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
continuousWrapItem	nedit.h	/^    Widget  	continuousWrapItem;$/;"	m	struct:_WindowInfo
controlDialogAP	menu.c	/^static void controlDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
convertFromDosFileString	file.c	/^static void convertFromDosFileString(char *fileString, int *length)$/;"	f	file:
convertFromMacFileString	file.c	/^static void convertFromMacFileString(char *fileString, int length)$/;"	f	file:
convertMotifDestCB	textSel.c	/^static Boolean convertMotifDestCB(Widget w, Atom *selType, Atom *target,$/;"	f	file:
convertOldPatternSet	highlightData.c	/^static void convertOldPatternSet(patternSet *patSet)$/;"	f	file:
convertPatternExpr	highlightData.c	/^static void convertPatternExpr(char **patternRE, char *patSetName,$/;"	f	file:
convertSecondaryCB	textSel.c	/^static Boolean convertSecondaryCB(Widget w, Atom *selType, Atom *target,$/;"	f	file:
convertSelectionCB	textSel.c	/^static Boolean convertSelectionCB(Widget w, Atom *selType, Atom *target,$/;"	f	file:
convertToDosFileString	file.c	/^static int convertToDosFileString(char **fileString, int *length)$/;"	f	file:
convertToMacFileString	file.c	/^static void convertToMacFileString(char *fileString, int length)$/;"	f	file:
copyClipboardAP	text.c	/^static void copyClipboardAP(Widget w, XEvent *event, String *args,$/;"	f	file:
copyHighlightStyleRec	highlightData.c	/^static highlightStyleRec *copyHighlightStyleRec(highlightStyleRec *hs)$/;"	f	file:
copyIndentSpec	smartIndent.c	/^static smartIndentRec *copyIndentSpec(smartIndentRec *is)$/;"	f	file:
copyItem	nedit.h	/^    Widget	copyItem;$/;"	m	struct:_WindowInfo
copyLanguageModeRec	preferences.c	/^static languageModeRec *copyLanguageModeRec(languageModeRec *lm)$/;"	f	file:
copyLine	textBuf.c	/^static char *copyLine(const char *text, int *lineLen)$/;"	f	file:
copyMacroToEnd	userCmds.c	/^static char *copyMacroToEnd(char **inPtr, char *itemName)$/;"	f	file:
copyMenuItemRec	userCmds.c	/^static menuItemRec *copyMenuItemRec(menuItemRec *item)$/;"	f	file:
copyPatternSrc	highlightData.c	/^static highlightPattern *copyPatternSrc(highlightPattern *pat,$/;"	f	file:
copyPrimaryAP	text.c	/^static void copyPrimaryAP(Widget w, XEvent *event, String *args,$/;"	f	file:
copySubstring	userCmds.c	/^static char *copySubstring(char *string, int length)$/;"	f	file:
copyToAP	text.c	/^static void copyToAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
copyToOrEndDragAP	text.c	/^static void copyToOrEndDragAP(Widget w, XEvent *event, String *args,$/;"	f	file:
core	textP.h	/^   CorePart        core;$/;"	m	struct:_TextRec
core_class	textP.h	/^    CoreClassPart  core_class;$/;"	m	struct:_TextClassRec
count	regularExp.c	/^    unsigned long count [1]; \/* More unwarranted chumminess with compiler. *\/$/;"	m	struct:brace_counts
countLines	shift.c	/^static int countLines(char *text)$/;"	f	file:
countLines	textBuf.c	/^static int countLines(const char *string)$/;"	f	file:
countLines	textDisp.c	/^static int countLines(char *string)$/;"	f	file:
countWritableWindows	search.c	/^static int countWritableWindows(const WindowInfo* window)$/;"	f	file:
createExtString	preferences.c	/^static char *createExtString(char **extensions, int nExtensions)$/;"	f	file:
createFakeMenuItem	menu.c	/^static Widget createFakeMenuItem(Widget parent, char *name,$/;"	f	file:
createFindDlog	search.c	/^static void createFindDlog(Widget parent, WindowInfo *window)$/;"	f	file:
createHelpPanel	help.c	/^static Widget createHelpPanel(Widget parent, int topic)$/;"	f	file:
createHighlightData	highlight.c	/^static windowHighlightData *createHighlightData(WindowInfo *window,$/;"	f	file:
createHighlightStylesMenu	highlightData.c	/^static Widget createHighlightStylesMenu(Widget parent)$/;"	f	file:
createIndentString	text.c	/^static char *createIndentString(TextWidget tw, textBuffer *buf, int bufOffset,$/;"	f	file:
createMenu	menu.c	/^static Widget createMenu(Widget parent, char *name, char *label,$/;"	f	file:
createMenuItem	menu.c	/^static Widget createMenuItem(Widget parent, char *name, char *label,$/;"	f	file:
createMenuRadioToggle	menu.c	/^static Widget createMenuRadioToggle(Widget parent, char *name, char *label,$/;"	f	file:
createMenuSeparator	menu.c	/^static Widget createMenuSeparator(Widget parent, char *name, int mode)$/;"	f	file:
createMenuToggle	menu.c	/^static Widget createMenuToggle(Widget parent, char *name, char *label,$/;"	f	file:
createOutputDialog	shell.c	/^static void createOutputDialog(Widget parent, char *text)$/;"	f	file:
createPatternsString	highlightData.c	/^static char *createPatternsString(patternSet *patSet, char *indentStr)$/;"	f	file:
createReplaceDlog	search.c	/^static void createReplaceDlog(Widget parent, WindowInfo *window)$/;"	f	file:
createReplaceMultiFileDlog	search.c	/^static void createReplaceMultiFileDlog(Widget parent, WindowInfo *window) $/;"	f	file:
createSelectMenu	tags.c	/^static Widget createSelectMenu(Widget parent, char *name, char *label,$/;"	f	file:
createTextArea	window.c	/^static Widget createTextArea(Widget parent, WindowInfo *window, int rows,$/;"	f	file:
createUserMenuItem	userCmds.c	/^static Widget createUserMenuItem(Widget menuPane, char *name, menuItemRec *f,$/;"	f	file:
createUserSubMenu	userCmds.c	/^static Widget createUserSubMenu(Widget parent, char *label)$/;"	f	file:
currentWindow	tags.c	/^static WindowInfo *currentWindow;$/;"	v	file:
cursorBlinkProcID	textP.h	/^    XtIntervalId cursorBlinkProcID;	\/* id of timer proc for cursor blink *\/$/;"	m	struct:_TextPart
cursorBlinkRate	textP.h	/^    int cursorBlinkRate;$/;"	m	struct:_TextPart
cursorBlinkTimerProc	text.c	/^static void cursorBlinkTimerProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
cursorCB	textP.h	/^    XtCallbackList cursorCB;$/;"	m	struct:_TextPart
cursorFGGC	textDisp.h	/^    GC cursorFGGC;			\/* GC for drawing the cursor *\/$/;"	m	struct:_textDisp
cursorFGPixel	textP.h	/^    Pixel cursorFGPixel, lineNumFGPixel;$/;"	m	struct:_TextPart
cursorMV	macro.c	/^static int cursorMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
cursorOn	textDisp.h	/^    int cursorOn;$/;"	m	struct:_textDisp
cursorPos	nedit.h	/^    int cursorPos;$/;"	m	struct:
cursorPos	textDisp.h	/^    int cursorPos;$/;"	m	struct:_textDisp
cursorPosHint	textBuf.h	/^    int cursorPosHint;		\/* hint for reasonable cursor position after$/;"	m	struct:_textBuffer
cursorPreferredCol	textDisp.h	/^    int cursorPreferredCol;		\/* Column for vert. cursor movement *\/$/;"	m	struct:_textDisp
cursorStyle	textDisp.h	/^    int cursorStyle;			\/* One of enum cursorStyles above *\/$/;"	m	struct:_textDisp
cursorStyles	textDisp.h	/^enum cursorStyles {NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR, BLOCK_CURSOR,$/;"	g
cursorToHint	textDisp.h	/^    int cursorToHint;			\/* Tells the buffer modified callback$/;"	m	struct:_textDisp
cursorX	textDisp.h	/^    int cursorX, cursorY;		\/* X, Y pos. of cursor for blanking *\/$/;"	m	struct:_textDisp
cursorY	textDisp.h	/^    int cursorX, cursorY;		\/* X, Y pos. of cursor for blanking *\/$/;"	m	struct:_textDisp
cutClipboardAP	text.c	/^static void cutClipboardAP(Widget w, XEvent *event, String *args,$/;"	f	file:
cutItem	nedit.h	/^    Widget	cutItem;$/;"	m	struct:_WindowInfo
cutPrimaryAP	text.c	/^static void cutPrimaryAP(Widget w, XEvent *event, String *args,$/;"	f	file:
data	interpret.c	/^    SparseArrayEntry 	data; \/* LEAVE this as top entry *\/$/;"	m	struct:
date	tags.h	/^    time_t  date;$/;"	m	struct:_tagFile
deadServerTimerProc	nc.c	/^static void deadServerTimerProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
decrement	interpret.c	/^static int decrement(void)$/;"	f	file:
defaultIndentW	preferences.c	/^    Widget defaultIndentW;$/;"	m	struct:
defaultRegexFlags	search.c	/^static int defaultRegexFlags(int searchType)$/;"	f	file:
defaultTranslations	text.c	/^static char defaultTranslations[] = $/;"	v	file:
defaultWrapW	preferences.c	/^    Widget defaultWrapW;$/;"	m	struct:
deferredW	highlightData.c	/^    Widget deferredW;$/;"	m	struct:
delTag	tags.c	/^static int delTag(char *name,char *file,char *search,int index)$/;"	f	file:
delete	textBuf.c	/^static void delete(textBuffer *buf, int start, int end)$/;"	f	file:
deleteArrayElement	interpret.c	/^static int deleteArrayElement(void)$/;"	f	file:
deleteCB	highlightData.c	/^static void deleteCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
deleteCB	smartIndent.c	/^static void deleteCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
deleteEmulatedTab	text.c	/^static int deleteEmulatedTab(Widget w, XEvent *event)$/;"	f	file:
deleteNextCharacterAP	text.c	/^static void deleteNextCharacterAP(Widget w, XEvent *event, String *args,$/;"	f	file:
deleteNextWordAP	text.c	/^static void deleteNextWordAP(Widget w, XEvent *event, String *args,$/;"	f	file:
deletePendingSelection	text.c	/^static int deletePendingSelection(Widget w, XEvent *event)$/;"	f	file:
deletePreviousCharacterAP	text.c	/^static void deletePreviousCharacterAP(Widget w, XEvent *event, String *args,$/;"	f	file:
deletePreviousWordAP	text.c	/^static void deletePreviousWordAP(Widget w, XEvent *event, String *args,$/;"	f	file:
deleteRect	textBuf.c	/^static void deleteRect(textBuffer *buf, int start, int end, int rectStart,$/;"	f	file:
deleteRectFromLine	textBuf.c	/^static void deleteRectFromLine(const char *line, int rectStart, int rectEnd,$/;"	f	file:
deleteSelectionAP	text.c	/^static void deleteSelectionAP(Widget w, XEvent *event, String *args,$/;"	f	file:
deleteToEndOfLineAP	text.c	/^static void deleteToEndOfLineAP(Widget w, XEvent *event, String *args,$/;"	f	file:
deleteToStartOfLineAP	text.c	/^static void deleteToStartOfLineAP(Widget w, XEvent *event, String *args,$/;"	f	file:
deletedText	text.h	/^    char *deletedText;$/;"	m	struct:
delimitW	preferences.c	/^    Widget delimitW;$/;"	m	struct:
delimiters	preferences.c	/^    char *delimiters;$/;"	m	struct:
delimiters	preferences.c	/^    char delimiters[MAX_WORD_DELIMITERS]; \/* punctuation characters *\/$/;"	m	struct:prefData
delimiters	textP.h	/^    char *delimiters;$/;"	m	struct:_TextPart
descent	textDisp.h	/^    int ascent, descent;		\/* Composite ascent and descent for$/;"	m	struct:_textDisp
deselectAllAP	text.c	/^static void deselectAllAP(Widget w, XEvent *event, String *args,$/;"	f	file:
destroy	text.c	/^static void destroy(TextWidget w)$/;"	f	file:
destroyCB	highlightData.c	/^static void destroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
destroyCB	smartIndent.c	/^static void destroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
destroyCB	userCmds.c	/^static void destroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
destroyOutDialogCB	shell.c	/^static void destroyOutDialogCB(Widget w, XtPointer callback, XtPointer closure)$/;"	f	file:
determineUndoType	undo.c	/^static int determineUndoType(int nInserted, int nDeleted)$/;"	f	file:
dialog	macro.c	/^    Widget dialog;$/;"	m	struct:
dialogBtnCB	macro.c	/^static void dialogBtnCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
dialogCloseCB	macro.c	/^static void dialogCloseCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
dialogEmpty	highlightData.c	/^static int dialogEmpty(void)$/;"	f	file:
dialogFieldsAreEmpty	userCmds.c	/^static int dialogFieldsAreEmpty(userCmdDialog *ucd)$/;"	f	file:
dialogMS	macro.c	/^static int dialogMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
dialogType	userCmds.c	/^    int dialogType;$/;"	m	struct:
dialogTypes	userCmds.c	/^enum dialogTypes {SHELL_CMDS, MACRO_CMDS, BG_MENU_CMDS};$/;"	g	file:
dimSelDepItemsInMenu	userCmds.c	/^static void dimSelDepItemsInMenu(Widget menuPane, menuItemRec **menuList,$/;"	f	file:
direction	search.c	/^    char direction;$/;"	m	struct:_charMatchTable
direction	search.c	/^    int direction;$/;"	m	struct:
directionArg	search.c	/^static char *directionArg(int direction)$/;"	f	file:
disableTextW	userCmds.c	/^static void disableTextW(Widget textW)$/;"	f	file:
disasm	interpret.c	/^static void disasm(Program *prog, int nInstr)$/;"	f	file:
dismissCB	help.c	/^static void dismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
dismissCB	highlightData.c	/^static void dismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
dismissCB	smartIndent.c	/^static void dismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
dismissCB	userCmds.c	/^static void dismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
displayWidthMV	macro.c	/^static int displayWidthMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
divide	interpret.c	/^static int divide(void)$/;"	f	file:
dlogOutBtn	userCmds.c	/^    Widget repInpBtn, sameOutBtn, dlogOutBtn, winOutBtn, dlogShell;$/;"	m	struct:
dlogShell	userCmds.c	/^    Widget repInpBtn, sameOutBtn, dlogOutBtn, winOutBtn, dlogShell;$/;"	m	struct:
doActionCB	menu.c	/^static void doActionCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
doOpen	file.c	/^static int doOpen(WindowInfo *window, char *name, char *path, int flags)$/;"	f	file:
doRepeatDialogAction	macro.c	/^static int doRepeatDialogAction(repeatDialog *rd, XEvent *event)$/;"	f	file:
doSave	file.c	/^static int doSave(WindowInfo *window)$/;"	f	file:
done	search.c	/^    int done;$/;"	m	struct:_SelectionInfo
downCaseString	search.c	/^static void downCaseString(char *outString, const char *inString)$/;"	f	file:
dragDeleted	textP.h	/^    int dragDeleted;	    	    	\/* # of characters deleted "" *\/$/;"	m	struct:_TextPart
dragEndCB	textP.h	/^    XtCallbackList dragEndCB;$/;"	m	struct:_TextPart
dragEndCB	window.c	/^static void dragEndCB(Widget w, WindowInfo *window, dragEndCBStruct *callData) $/;"	f	file:
dragEndCBStruct	text.h	/^} dragEndCBStruct;$/;"	t
dragInsertPos	textP.h	/^    int dragInsertPos;	    	    	\/* location where text being block$/;"	m	struct:_TextPart
dragInserted	textP.h	/^    int dragInserted;	    	    	\/* # of characters inserted at drag$/;"	m	struct:_TextPart
dragNLines	textP.h	/^    int dragNLines; 	    	    	\/* # of newlines in text being drag'd *\/$/;"	m	struct:_TextPart
dragOrigBuf	textP.h	/^    textBuffer *dragOrigBuf;	    	\/* backup buffer copy used during$/;"	m	struct:_TextPart
dragRectStart	textP.h	/^    int dragRectStart;	    	    	\/* rect. offset "" *\/$/;"	m	struct:_TextPart
dragSourceDeletePos	textP.h	/^    int dragSourceDeletePos;	    	\/* location from which move source$/;"	m	struct:_TextPart
dragSourceDeleted	textP.h	/^    int dragSourceDeleted;  	    	\/* # of chars. deleted "" *\/$/;"	m	struct:_TextPart
dragSourceInserted	textP.h	/^    int dragSourceInserted; 	    	\/* # of chars. inserted when move$/;"	m	struct:_TextPart
dragStartCB	textP.h	/^    XtCallbackList dragStartCB;$/;"	m	struct:_TextPart
dragStartCB	window.c	/^static void dragStartCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
dragState	textP.h	/^    int dragState;			\/* Why is the mouse being dragged$/;"	m	struct:_TextPart
dragStates	textP.h	/^enum dragStates {NOT_CLICKED, PRIMARY_CLICKED, SECONDARY_CLICKED,$/;"	g
dragType	textP.h	/^    int dragType;   	    	    	\/* style of block drag operation *\/$/;"	m	struct:_TextPart
dragXOffset	textP.h	/^    int dragXOffset, dragYOffset;   	\/* offsets between cursor location and$/;"	m	struct:_TextPart
dragYOffset	textP.h	/^    int dragXOffset, dragYOffset;   	\/* offsets between cursor location and$/;"	m	struct:_TextPart
drawCursor	textDisp.c	/^static void drawCursor(textDisp *textD, int x, int y)$/;"	f	file:
drawString	textDisp.c	/^static void drawString(textDisp *textD, int style, int x, int y, int toX,$/;"	f	file:
dupStack	interpret.c	/^static int dupStack(void)$/;"	f	file:
editMacroOrBGMenu	userCmds.c	/^static void editMacroOrBGMenu(WindowInfo *window, int dialogType)$/;"	f	file:
eitherInpBtn	userCmds.c	/^    Widget loadAfterBtn, selInpBtn, winInpBtn, eitherInpBtn, noInpBtn;$/;"	m	struct:
emTabDist	preferences.c	/^    int emTabDist;		\/* non-zero tab dist. if emulated tabs are on *\/$/;"	m	struct:prefData
emTabDist	preferences.c	/^    int emTabDist;	$/;"	m	struct:
emTabDistMV	macro.c	/^static int emTabDistMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
emTabW	preferences.c	/^    Widget emTabW;$/;"	m	struct:
emTabsBeforeCursor	textP.h	/^    int emTabsBeforeCursor;		\/* If non-zero, number of consecutive$/;"	m	struct:_TextPart
emTabsCB	preferences.c	/^static void emTabsCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
emit_byte	regularExp.c	/^static void emit_byte (unsigned char c) {$/;"	f	file:
emit_class_byte	regularExp.c	/^static void emit_class_byte (unsigned char c) {$/;"	f	file:
emit_convert_byte	regexConvert.c	/^static void emit_convert_byte (unsigned char c) {$/;"	f	file:
emit_node	regularExp.c	/^static unsigned char * emit_node (int op_code) {$/;"	f	file:
emit_special	regularExp.c	/^static unsigned char * emit_special ($/;"	f	file:
emptyArrayMV	macro.c	/^static int emptyArrayMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
emptyLinesVisible	textDisp.c	/^static int emptyLinesVisible(textDisp *textD)$/;"	f	file:
emulateTabs	textP.h	/^    int emulateTabs;$/;"	m	struct:_TextPart
end	textBuf.h	/^    int end;$/;"	m	struct:
endDrag	text.c	/^static void endDrag(Widget w)$/;"	f	file:
endDragAP	text.c	/^static void endDragAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
endLbl	highlightData.c	/^    Widget endLbl;$/;"	m	struct:
endOfFileAP	text.c	/^static void endOfFileAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
endOfLineAP	text.c	/^static void endOfLineAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
endOfSelectionAP	menu.c	/^static void endOfSelectionAP(Widget w, XEvent *event, String *args,$/;"	f	file:
endOfWord	text.c	/^static int endOfWord(TextWidget w, int pos)$/;"	f	file:
endPos	nedit.h	/^    int		endPos;$/;"	m	struct:_UndoInfo
endRE	export.c	/^    regexp *endRE;$/;"	m	struct:_highlightDataRec
endRE	highlight.c	/^    regexp *endRE;$/;"	m	struct:_highlightDataRec
endRE	highlight.h	/^    char *endRE;$/;"	m	struct:
endSubexprs	export.c	/^    signed char endSubexprs[NSUBEXP+1];$/;"	m	struct:_highlightDataRec
endSubexprs	highlight.c	/^    signed char endSubexprs[NSUBEXP+1];$/;"	m	struct:_highlightDataRec
endW	highlightData.c	/^    Widget endW;$/;"	m	struct:
endp	regularExp.h	/^   char *endp   [NSUBEXP];  \/* Captured text ending locations. *\/$/;"	m	struct:regexp
ensureNewline	smartIndent.c	/^static char *ensureNewline(char *string)$/;"	f	file:
eq	interpret.c	/^static int eq(void)$/;"	f	file:
eraseFlash	search.c	/^static void eraseFlash(WindowInfo *window)$/;"	f	file:
errBufs	shell.c	/^    buffer *outBufs, *errBufs;$/;"	m	struct:
errCheck	interpret.c	/^static int errCheck(const char *s)$/;"	f	file:
errorLbl	highlightData.c	/^    Widget errorLbl;$/;"	m	struct:
errorRE	export.c	/^    regexp *errorRE;$/;"	m	struct:_highlightDataRec
errorRE	highlight.c	/^    regexp *errorRE;$/;"	m	struct:_highlightDataRec
errorRE	highlight.h	/^    char *errorRE;$/;"	m	struct:
errorString	export.c	/^static char *errorString(void)$/;"	f	file:
errorString	file.c	/^static char *errorString(void)$/;"	f	file:
errorW	highlightData.c	/^    Widget errorW;$/;"	m	struct:
escapeStringChars	macro.c	/^static int escapeStringChars(char *fromString, char *toString)$/;"	f	file:
escapedStringLength	macro.c	/^static int escapedStringLength(char *string)$/;"	f	file:
exchangeAP	text.c	/^static void exchangeAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
execAP	menu.c	/^static void execAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
execDialogAP	menu.c	/^static void execDialogAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
execError	interpret.c	/^static int execError(const char *s1, const char *s2)$/;"	f	file:
execLineAP	menu.c	/^static void execLineAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
execReturnCodes	interpret.h	/^enum execReturnCodes {MACRO_TIME_LIMIT, MACRO_PREEMPT, MACRO_DONE, MACRO_ERROR};$/;"	g
executeModMacro	smartIndent.c	/^static void executeModMacro(WindowInfo *window,smartIndentCBStruct *cbInfo)$/;"	f	file:
executeNewlineMacro	smartIndent.c	/^static void executeNewlineMacro(WindowInfo *window, smartIndentCBStruct *cbInfo)$/;"	f	file:
exitAP	menu.c	/^static void exitAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
exitWarnDefCB	menu.c	/^static void exitWarnDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
exitWarnDefItem	nedit.h	/^    Widget  	exitWarnDefItem;$/;"	m	struct:_WindowInfo
expandTabs	textBuf.c	/^static char *expandTabs(const char *text, int startIndent, int tabDist,$/;"	f	file:
export	export.c	/^void export(Widget w, XEvent *event, String *args, Cardinal *nArgs) {$/;"	f
exportAP	menu.c	/^static void exportAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
exportToHTML	export.c	/^static void exportToHTML( Widget w, XEvent *event, String *args, Cardinal *nArgs) {$/;"	f	file:
extW	preferences.c	/^    Widget extW;$/;"	m	struct:
extendAdjustAP	text.c	/^static void extendAdjustAP(Widget w, XEvent *event, String *args,$/;"	f	file:
extendEndAP	text.c	/^static void extendEndAP(Widget w, XEvent *event, String *args,$/;"	f	file:
extendRangeForStyleMods	textDisp.c	/^static void extendRangeForStyleMods(textDisp *textD, int *start, int *end)$/;"	f	file:
extendStartAP	text.c	/^static void extendStartAP(Widget w, XEvent *event, String *args,$/;"	f	file:
extensions	preferences.c	/^    char **extensions;$/;"	m	struct:
extentp	regularExp.h	/^   char *extentp;           \/* Points to the maximum extent of text scanned by$/;"	m	struct:regexp
fCancelCB	search.c	/^static void fCancelCB(Widget w, WindowInfo *window, caddr_t callData) $/;"	f	file:
fFocusCB	search.c	/^static void fFocusCB(Widget w, WindowInfo *window, caddr_t *callData) $/;"	f	file:
fHistIndex	nedit.h	/^    int		rHistIndex, fHistIndex;	\/* history placeholders for *\/$/;"	m	struct:_WindowInfo
fKeepCB	search.c	/^static void fKeepCB(Widget w, WindowInfo *window, caddr_t *callData) $/;"	f	file:
fUpdateActionButtons	search.c	/^static void fUpdateActionButtons(WindowInfo *window)$/;"	f	file:
fakeRegExSearch	tags.c	/^static int fakeRegExSearch(WindowInfo *window, char *searchString, $/;"	f	file:
fallbackResources	nedit.c	/^static char *fallbackResources[] = {$/;"	v	file:
fetchRetVal	interpret.c	/^static int fetchRetVal(void)$/;"	f	file:
file	tags.h	/^    const char *file;$/;"	m	struct:_tag
fileCB	selection.c	/^static void fileCB(Widget widget, WindowInfo *window, Atom *sel,$/;"	f	file:
fileChanged	nedit.h	/^    Boolean	fileChanged;		\/* has window been modified? *\/$/;"	m	struct:_WindowInfo
fileFormat	nedit.h	/^    int     	fileFormat; 	    	\/* whether to save the file straight$/;"	m	struct:_WindowInfo
fileFormatMV	macro.c	/^static int fileFormatMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
fileFormats	nedit.h	/^enum fileFormats {UNIX_FILE_FORMAT, DOS_FILE_FORMAT, MAC_FILE_FORMAT};$/;"	g
fileMode	nedit.h	/^    int		fileMode;		\/* permissions of file being edited *\/$/;"	m	struct:_WindowInfo
fileNameMV	macro.c	/^static int fileNameMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
filePathMV	macro.c	/^static int filePathMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
fileVersion	preferences.c	/^    char fileVersion[4]; 	\/* Version of nedit which wrote the .nedit$/;"	m	struct:prefData
fileWasModifiedExternally	file.c	/^static int fileWasModifiedExternally(WindowInfo *window)$/;"	f	file:
filename	nedit.h	/^    char	filename[MAXPATHLEN];	\/* name component of file being edited*\/$/;"	m	struct:_WindowInfo
filename	tags.h	/^    char *filename;$/;"	m	struct:_tagFile
filenameSet	nedit.h	/^    Boolean	filenameSet;		\/* is the window still "Untitled"? *\/ $/;"	m	struct:_WindowInfo
fillAP	menu.c	/^static void fillAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
fillFromPrimaryCB	preferences.c	/^static void fillFromPrimaryCB(Widget w, XtPointer clientData,$/;"	f	file:
fillParagraph	shift.c	/^static char *fillParagraph(char *text, int leftMargin, int firstLineIndent,$/;"	f	file:
fillParagraphs	shift.c	/^static char *fillParagraphs(char *text, int rightMargin, int tabDist,$/;"	f	file:
fillStyleString	highlight.c	/^static void fillStyleString(char **stringPtr, char **stylePtr, char *toPtr,$/;"	f	file:
fillW	preferences.c	/^    Widget fillW;$/;"	m	struct:
filterDialogAP	menu.c	/^static void filterDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
filterItem	nedit.h	/^    Widget	filterItem;$/;"	m	struct:_WindowInfo
findAP	menu.c	/^static void findAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
findAllCB	tags.c	/^static void findAllCB(Widget parent, XtPointer client_data, XtPointer call_data)$/;"	f	file:
findAllCloseCB	tags.c	/^static void findAllCloseCB(Widget parent, XtPointer client_data,$/;"	f	file:
findAllDialogAP	tags.c	/^static void findAllDialogAP(Widget dialogParent, char *string)$/;"	f	file:
findArrowKeyCB	search.c	/^static void findArrowKeyCB(Widget w, WindowInfo *window, XKeyEvent *event)$/;"	f	file:
findBtn	nedit.h	/^    Widget	findBtn;$/;"	m	struct:_WindowInfo
findBtns	nedit.h	/^    Widget	findBtns;$/;"	m	struct:_WindowInfo
findCB	menu.c	/^static void findCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
findCB	search.c	/^static void findCB(Widget w, WindowInfo *window,XmAnyCallbackStruct *callData) $/;"	f	file:
findCaseToggle	nedit.h	/^    Widget      findCaseToggle;$/;"	m	struct:_WindowInfo
findCaseToggleCB	search.c	/^static void findCaseToggleCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
findDefAP	menu.c	/^static void findDefAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
findDefCB	tags.c	/^static void findDefCB(Widget widget, WindowInfo *window, Atom *sel,$/;"	f	file:
findDefItem	nedit.h	/^    Widget	findDefItem;$/;"	m	struct:_WindowInfo
findDialogAP	menu.c	/^static void findDialogAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
findDlog	nedit.h	/^    Widget	findDlog;		\/* find dialog *\/$/;"	m	struct:_WindowInfo
findInMenuTree	userCmds.c	/^static Widget findInMenuTree(menuTreeItem *menuTree, int nTreeEntries,$/;"	f	file:
findIncrAP	menu.c	/^static void findIncrAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
findIncrCB	menu.c	/^static void findIncrCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
findIndentSpec	smartIndent.c	/^static smartIndentRec *findIndentSpec(char *modeName)$/;"	f	file:
findKeepBtn	nedit.h	/^    Widget	findKeepBtn;$/;"	m	struct:_WindowInfo
findLastLiteralCase	nedit.h	/^    Bool	findLastLiteralCase;    \/* idem, for literal mode *\/$/;"	m	struct:_WindowInfo
findLastRegexCase	nedit.h	/^    Bool	findLastRegexCase; 	\/* idem, for regex mode in find dialog *\/$/;"	m	struct:_WindowInfo
findLeftMargin	shift.c	/^static int findLeftMargin(char *text, int length, int tabDist)$/;"	f	file:
findLineEnd	textDisp.c	/^static void findLineEnd(textDisp *textD, int startPos, int startPosIsLineStart,$/;"	f	file:
findMatchingChar	search.c	/^static int findMatchingChar(textBuffer *buf, char toMatch, int charPos,$/;"	f	file:
findParagraphEnd	shift.c	/^static int findParagraphEnd(textBuffer *buf, int startPos)$/;"	f	file:
findParagraphStart	shift.c	/^static int findParagraphStart(textBuffer *buf, int startPos)$/;"	f	file:
findPatternsForWindow	highlight.c	/^static patternSet *findPatternsForWindow(WindowInfo *window, int warn)$/;"	f	file:
findRectSelBoundariesForCopy	textBuf.c	/^static void findRectSelBoundariesForCopy(textBuffer *buf, int lineStartPos,$/;"	f	file:
findRegExpToggleCB	search.c	/^static void findRegExpToggleCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
findRegexToggle	nedit.h	/^    Widget      findRegexToggle;    $/;"	m	struct:_WindowInfo
findRelativeLineStart	textDrag.c	/^static int findRelativeLineStart(textBuffer *buf, int referencePos,$/;"	f	file:
findReplaceUsesSelection	preferences.c	/^    int findReplaceUsesSelection; \/* whether the find replace dialog is automatically$/;"	m	struct:prefData
findRevToggle	nedit.h	/^    Widget	findRevToggle;$/;"	m	struct:_WindowInfo
findSafeParseRestartPos	highlight.c	/^static int findSafeParseRestartPos(textBuffer *buf,$/;"	f	file:
findSameAP	menu.c	/^static void findSameAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
findSameCB	menu.c	/^static void findSameCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
findSearchTypeBox	nedit.h	/^    Widget	findSearchTypeBox;$/;"	m	struct:_WindowInfo
findSelAP	menu.c	/^static void findSelAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
findSelCB	menu.c	/^static void findSelCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
findStripLanguageMode	userCmds.c	/^static char *findStripLanguageMode(char *menuItemName, int languageMode,$/;"	f	file:
findText	nedit.h	/^    Widget	findText;		\/* find dialog settable widgets... *\/$/;"	m	struct:_WindowInfo
findTextMargins	textDrag.c	/^static void findTextMargins(textBuffer *buf, int start, int end, int *leftMargin,$/;"	f	file:
findTextValueChangedCB	search.c	/^static void findTextValueChangedCB(Widget w, WindowInfo *window, XKeyEvent *event)$/;"	f	file:
findTopLevelParentIndex	highlight.c	/^static int findTopLevelParentIndex(highlightPattern *patList, int nPats,$/;"	f	file:
findTopicFromShellWidget	help.c	/^static int findTopicFromShellWidget(Widget shellWidget)$/;"	f	file:
findWordToggle	nedit.h	/^    Widget      findWordToggle;    $/;"	m	struct:_WindowInfo
findWrapRange	textDisp.c	/^static void findWrapRange(textDisp *textD, char *deletedText, int pos,$/;"	f	file:
finishCmdExecution	shell.c	/^static void finishCmdExecution(WindowInfo *window, int terminatedOnError)$/;"	f	file:
finishLearnCB	menu.c	/^static void finishLearnCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
finishLearnItem	nedit.h	/^    Widget	finishLearnItem;$/;"	m	struct:_WindowInfo
finishMacroCmdExecution	macro.c	/^static void finishMacroCmdExecution(WindowInfo *window)$/;"	f	file:
firstChar	textDisp.h	/^    int firstChar, lastChar;		\/* Buffer positions of first and last$/;"	m	struct:_textDisp
fixedFontWidth	textDisp.h	/^    int fixedFontWidth;			\/* Font width if all current fonts are$/;"	m	struct:_textDisp
flags	export.c	/^    int flags;$/;"	m	struct:_highlightDataRec
flags	highlight.c	/^    int flags;$/;"	m	struct:_highlightDataRec
flags	highlight.h	/^    int flags;$/;"	m	struct:
flags	shell.c	/^    int flags;$/;"	m	struct:
flashPos	nedit.h	/^    int		flashPos;		\/* position saved for erasing matching$/;"	m	struct:_WindowInfo
flashTimeoutID	nedit.h	/^    XtIntervalId flashTimeoutID;	\/* timer procedure id for getting rid$/;"	m	struct:_WindowInfo
flashTimeoutProc	search.c	/^static void flashTimeoutProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
flushTimeoutID	shell.c	/^    XtIntervalId bannerTimeoutID, flushTimeoutID;$/;"	m	struct:
flushTimeoutProc	shell.c	/^static void flushTimeoutProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
focusCB	window.c	/^static void focusCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
focusInAP	text.c	/^static void focusInAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
focusInCB	textP.h	/^    XtCallbackList focusInCB;$/;"	m	struct:_TextPart
focusOutAP	text.c	/^static void focusOutAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
focusOutCB	textP.h	/^    XtCallbackList focusOutCB;$/;"	m	struct:_TextPart
focusPaneAP	menu.c	/^static void focusPaneAP(Widget w, XEvent *event, String *args,$/;"	f	file:
focusToISearchTextCB	window.c	/^static void focusToISearchTextCB(Widget w, WindowInfo *window,$/;"	f	file:
focusWindow	interpret.h	/^    WindowInfo *focusWindow;$/;"	m	struct:
focusWindowMS	macro.c	/^static int focusWindowMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
follow	parse.c	/^static int follow(char expect, int yes, int no)$/;"	f	file:
follow2	parse.c	/^static int follow2(char expect1, int yes1, char expect2, int yes2, int no)$/;"	f	file:
follow_non_whitespace	parse.c	/^static int follow_non_whitespace(char expect, int yes, int no)$/;"	f	file:
font	highlightData.c	/^    int font;$/;"	m	struct:
font	textDisp.h	/^    XFontStruct *font;$/;"	m	struct:
fontApplyCB	preferences.c	/^static void fontApplyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
fontCB	menu.c	/^static void fontCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
fontDefCB	menu.c	/^static void fontDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
fontDestroyCB	preferences.c	/^static void fontDestroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
fontDialog	nedit.h	/^    Widget	fontDialog;		\/* NULL, unless font dialog is up *\/$/;"	m	struct:_WindowInfo
fontDialog	preferences.c	/^} fontDialog;$/;"	t	file:
fontDismissCB	preferences.c	/^static void fontDismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
fontList	nedit.h	/^    XmFontList	fontList;		\/* fontList for the primary font *\/$/;"	m	struct:_WindowInfo
fontList	preferences.c	/^    XmFontList fontList;	\/* XmFontLists corresp. to above named fonts *\/$/;"	m	struct:prefData
fontName	nedit.h	/^    char	fontName[MAX_FONT_LEN];	\/* names of the text fonts in use *\/$/;"	m	struct:_WindowInfo
fontNameBoldItalicMV	macro.c	/^static int fontNameBoldItalicMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
fontNameBoldMV	macro.c	/^static int fontNameBoldMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
fontNameItalicMV	macro.c	/^static int fontNameItalicMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
fontNameMV	macro.c	/^static int fontNameMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
fontOkCB	preferences.c	/^static void fontOkCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
fontStatus	preferences.c	/^enum fontStatus {GOOD_FONT, BAD_PRIMARY, BAD_FONT, BAD_SIZE, BAD_SPACING};$/;"	g	file:
fontString	preferences.c	/^    char fontString[MAX_FONT_LEN]; \/* names of fonts for text widget *\/$/;"	m	struct:prefData
fontStruct	textDisp.h	/^    XFontStruct *fontStruct;		\/* Font structure for primary font *\/$/;"	m	struct:_textDisp
fontStruct	textP.h	/^    XFontStruct *fontStruct;$/;"	m	struct:_TextPart
fontTypes	highlightData.c	/^enum fontTypes {PLAIN_FONT, ITALIC_FONT, BOLD_FONT, BOLD_ITALIC_FONT};$/;"	g	file:
forWindow	macro.c	/^    WindowInfo *forWindow;$/;"	m	struct:
forWindow	preferences.c	/^    int forWindow;$/;"	m	struct:
forkCommand	shell.c	/^static pid_t forkCommand(Widget parent, char *command, char *cmdDir,$/;"	f	file:
formFeedCB	menu.c	/^static void formFeedCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
formatOfFile	file.c	/^static int formatOfFile(char *fileString)$/;"	f	file:
forwardCharacterAP	text.c	/^static void forwardCharacterAP(Widget w, XEvent *event, String *args,$/;"	f	file:
forwardOneContext	highlight.c	/^static int forwardOneContext(textBuffer *buf, reparseContext *context,$/;"	f	file:
forwardParagraphAP	text.c	/^static void forwardParagraphAP(Widget w, XEvent *event, String *args,$/;"	f	file:
forwardRegexSearch	search.c	/^static int forwardRegexSearch(const char *string, const char *searchString, int wrap,$/;"	f	file:
forwardWordAP	text.c	/^static void forwardWordAP(Widget w, XEvent *event, String *args,$/;"	f	file:
frameP	interpret.h	/^    DataValue *frameP;$/;"	m	struct:
freeBufList	shell.c	/^static void freeBufList(buffer **bufList)$/;"	f	file:
freeHighlightData	highlight.c	/^static void freeHighlightData(windowHighlightData *hd)$/;"	f	file:
freeHighlightStyleRec	highlightData.c	/^static void freeHighlightStyleRec(highlightStyleRec *hs)$/;"	f	file:
freeIndentSpec	smartIndent.c	/^void freeIndentSpec(smartIndentRec *is)$/;"	f
freeItemCB	highlightData.c	/^static void freeItemCB(void *item)$/;"	f	file:
freeItemCB	userCmds.c	/^static void freeItemCB(void *item)$/;"	f	file:
freeLanguageModeRec	preferences.c	/^static void freeLanguageModeRec(languageModeRec *lm)$/;"	f	file:
freeMenuItemRec	userCmds.c	/^static void freeMenuItemRec(menuItemRec *item)$/;"	f	file:
freeNonNull	highlightData.c	/^static void freeNonNull(void *ptr)$/;"	f	file:
freePatternSet	highlightData.c	/^static void freePatternSet(patternSet *p)$/;"	f	file:
freePatternSrc	highlightData.c	/^static void freePatternSrc(highlightPattern *pat, int freeStruct)$/;"	f	file:
freePatterns	highlight.c	/^static void freePatterns(highlightDataRec *patterns)$/;"	f	file:
freeSymbolTable	interpret.c	/^static void freeSymbolTable(Symbol *symTab)$/;"	f	file:
freeUndoRecord	undo.c	/^static void freeUndoRecord(UndoInfo *undo)$/;"	f	file:
freeWritableWindowsCB	search.c	/^static void freeWritableWindowsCB(Widget* w, WindowInfo* window,$/;"	f	file:
fromMacro	shell.c	/^    char fromMacro;$/;"	m	struct:
gapEnd	textBuf.h	/^    int gapEnd;                 \/* points to the first char after the gap *\/$/;"	m	struct:_textBuffer
gapStart	textBuf.h	/^    int gapStart;  	        \/* points to the first character of the gap *\/$/;"	m	struct:_textBuffer
gc	textDisp.h	/^    GC gc, selectGC, highlightGC;	\/* GCs for drawing text *\/$/;"	m	struct:_textDisp
ge	interpret.c	/^static int ge(void)$/;"	f	file:
genAccelEventName	userCmds.c	/^static void genAccelEventName(char *text, unsigned int modifiers,$/;"	f	file:
generateAcceleratorString	userCmds.c	/^static void generateAcceleratorString(char *text, unsigned int modifiers,$/;"	f	file:
geometry	preferences.c	/^    char geometry[MAX_GEOM_STRING_LEN];	\/* per-application geometry string,$/;"	m	struct:prefData
getAbsTopLineNum	textDisp.c	/^static int getAbsTopLineNum(textDisp *textD)$/;"	f	file:
getAnySelectionCB	selection.c	/^static void getAnySelectionCB(Widget widget, char **result, Atom *sel,$/;"	f	file:
getAtom	textSel.c	/^static Atom getAtom(Display *display, int atomNum)$/;"	f	file:
getCharacterMS	macro.c	/^static int getCharacterMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
getClearCaseViewTag	window.c	/^static char *getClearCaseViewTag(void)$/;"	f	file:
getDialogDataCB	userCmds.c	/^static void *getDialogDataCB(void *oldItem, int explicitRequest, int *abort,$/;"	f	file:
getDialogPatternSet	highlightData.c	/^static patternSet *getDialogPatternSet(void)$/;"	f	file:
getDisplayedCB	highlightData.c	/^static void *getDisplayedCB(void *oldItem, int explicitRequest, int *abort,$/;"	f	file:
getExchSelCB	textSel.c	/^static void getExchSelCB(Widget w, XtPointer clientData, Atom *selType,$/;"	f	file:
getFindDlogInfo	search.c	/^static int getFindDlogInfo(WindowInfo *window, int *direction,$/;"	f	file:
getFontHeight	highlight.c	/^static int getFontHeight(WindowInfo *window)$/;"	f	file:
getGeometryString	window.c	/^static void getGeometryString(WindowInfo *window, char *geomString)$/;"	f	file:
getHostName	nc.c	/^static const char *getHostName(void)$/;"	f	file:
getHostName	server.c	/^static const char *getHostName(void)$/;"	f	file:
getInsertSelectionCB	textSel.c	/^static void getInsertSelectionCB(Widget w, XtPointer clientData,Atom *selType,$/;"	f	file:
getPrevChar	highlight.c	/^static char getPrevChar(textBuffer *buf, int pos)$/;"	f	file:
getRangeMS	macro.c	/^static int getRangeMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
getReplaceDlogInfo	search.c	/^static int getReplaceDlogInfo(WindowInfo *window, int *direction,$/;"	f	file:
getSelectionCB	search.c	/^static void getSelectionCB(Widget w, SelectionInfo *selectionInfo, Atom *selection,$/;"	f	file:
getSelectionCB	textSel.c	/^static void getSelectionCB(Widget w, XtPointer clientData, Atom *selType,$/;"	f	file:
getSelectionMS	macro.c	/^static int getSelectionMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
getSelectionPos	textBuf.c	/^static int getSelectionPos(selection *sel, int *start, int *end,$/;"	f	file:
getSelectionText	textBuf.c	/^static char *getSelectionText(textBuffer *buf, selection *sel)$/;"	f	file:
getSmartIndentDialogData	smartIndent.c	/^static smartIndentRec *getSmartIndentDialogData(void)$/;"	f	file:
getTag	tags.c	/^static tag *getTag(const char *name)$/;"	f	file:
getUserName	nc.c	/^static const char *getUserName(void)$/;"	f	file:
getUserName	server.c	/^static const char *getUserName(void)$/;"	f	file:
getWindowsMenuEntry	menu.c	/^static char* getWindowsMenuEntry(const WindowInfo* thisWindow, const WindowInfo* window)$/;"	f	file:
getenvMS	macro.c	/^static int getenvMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
gotoAP	menu.c	/^static void gotoAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
gotoCB	selection.c	/^static void gotoCB(Widget widget, WindowInfo *window, Atom *sel,$/;"	f	file:
gotoDialogAP	menu.c	/^static void gotoDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
gotoMarkAP	menu.c	/^static void gotoMarkAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
gotoMarkCB	menu.c	/^static void gotoMarkCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
gotoMarkDialogAP	menu.c	/^static void gotoMarkDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
gotoMarkExtendKeyCB	selection.c	/^static void gotoMarkExtendKeyCB(Widget w, XtPointer clientData, XEvent *event,$/;"	f	file:
gotoMarkKeyCB	selection.c	/^static void gotoMarkKeyCB(Widget w, XtPointer clientData, XEvent *event,$/;"	f	file:
gotoMatchingAP	menu.c	/^static void gotoMatchingAP(Widget w, XEvent *event, String *args,$/;"	f	file:
gotoMatchingCB	menu.c	/^static void gotoMatchingCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
gotoSelectedAP	menu.c	/^static void gotoSelectedAP(Widget w, XEvent *event, String *args,$/;"	f	file:
grabFocusAP	text.c	/^static void grabFocusAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
greedy	regularExp.c	/^static unsigned long greedy (unsigned char *p, int max) {$/;"	f	file:
gt	interpret.c	/^static int gt(void)$/;"	f	file:
hScrollBar	textDisp.h	/^    Widget hScrollBar, vScrollBar;$/;"	m	struct:_textDisp
hScrollBar	textP.h	/^    Widget hScrollBar, vScrollBar;$/;"	m	struct:_TextPart
hScrollCB	textDisp.c	/^static void hScrollCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
handleUnparsedRegionCB	highlight.c	/^static void handleUnparsedRegionCB(textDisp *textD, int pos, void *cbArg)$/;"	f	file:
hasKey	text.c	/^static int hasKey(char *key, String *args, Cardinal *nArgs)$/;"	f	file:
hashAddr	tags.c	/^static unsigned hashAddr(const char *key)$/;"	f	file:
heavyCursor	textP.h	/^    Boolean heavyCursor;$/;"	m	struct:_TextPart
height	textDisp.h	/^    int top, left, width, height, lineNumLeft, lineNumWidth;$/;"	m	struct:_textDisp
helpActionsCB	menu.c	/^static void helpActionsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpBindingCB	menu.c	/^static void helpBindingCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpBugsCB	menu.c	/^static void helpBugsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpCB	highlightData.c	/^static void helpCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
helpCB	smartIndent.c	/^static void helpCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
helpClipCB	menu.c	/^static void helpClipCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpCmdLineCB	menu.c	/^static void helpCmdLineCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpCtagsCB	menu.c	/^static void helpCtagsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpCustCB	menu.c	/^static void helpCustCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpDistCB	menu.c	/^static void helpDistCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpFillCB	menu.c	/^static void helpFillCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpFormatCB	menu.c	/^static void helpFormatCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpIndentCB	menu.c	/^static void helpIndentCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpKbdCB	menu.c	/^static void helpKbdCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpLearnCB	menu.c	/^static void helpLearnCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpMacroLangCB	menu.c	/^static void helpMacroLangCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpMacroSubrsCB	menu.c	/^static void helpMacroSubrsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpMailingCB	menu.c	/^static void helpMailingCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpMouseCB	menu.c	/^static void helpMouseCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpPatternsCB	menu.c	/^static void helpPatternsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpPrefCB	menu.c	/^static void helpPrefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpProgCB	menu.c	/^static void helpProgCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpRecoveryCB	menu.c	/^static void helpRecoveryCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpRegexAdvCB	menu.c	/^static void helpRegexAdvCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpRegexBasicsCB	menu.c	/^static void helpRegexBasicsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpRegexEscapeCB	menu.c	/^static void helpRegexEscapeCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpRegexExamplesCB	menu.c	/^static void helpRegexExamplesCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpRegexParenCB	menu.c	/^static void helpRegexParenCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpResourcesCB	menu.c	/^static void helpResourcesCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpSearchCB	menu.c	/^static void helpSearchCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpSelectCB	menu.c	/^static void helpSelectCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpServerCB	menu.c	/^static void helpServerCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpShellCB	menu.c	/^static void helpShellCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpSmartIndentCB	menu.c	/^static void helpSmartIndentCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpStartCB	menu.c	/^static void helpStartCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpSyntaxCB	menu.c	/^static void helpSyntaxCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpTabsCB	menu.c	/^static void helpTabsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
helpVerCB	menu.c	/^static void helpVerCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
hideOrShowHScrollBar	textDisp.c	/^static void hideOrShowHScrollBar(textDisp *textD)$/;"	f	file:
highlight	preferences.c	/^    char *highlight;$/;"	m	struct:
highlight	textBuf.h	/^    selection highlight;$/;"	m	struct:_textBuffer
highlightBGGC	textDisp.h	/^    GC selectBGGC, highlightBGGC;	\/* GCs for erasing text *\/$/;"	m	struct:_textDisp
highlightBGPixel	textDisp.h	/^    Pixel highlightBGPixel;$/;"	m	struct:_textDisp
highlightBGPixel	textP.h	/^    Pixel selectFGPixel, selectBGPixel, highlightFGPixel, highlightBGPixel;$/;"	m	struct:_TextPart
highlightCBArg	textDisp.h	/^    void *highlightCBArg;   	    	\/* Arg to unfinishedHighlightCB *\/$/;"	m	struct:_textDisp
highlightData	nedit.h	/^    void    	*highlightData; 	\/* info for syntax highlighting *\/$/;"	m	struct:_WindowInfo
highlightDataRec	export.c	/^} highlightDataRec;$/;"	t	file:
highlightDataRec	highlight.c	/^} highlightDataRec;$/;"	t	file:
highlightDefCB	menu.c	/^static void highlightDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
highlightDefItem	nedit.h	/^    Widget	highlightDefItem;$/;"	m	struct:_WindowInfo
highlightError	highlightData.c	/^static patternSet *highlightError(char *stringStart, char *stoppedAt,$/;"	f	file:
highlightFGPixel	textP.h	/^    Pixel selectFGPixel, selectBGPixel, highlightFGPixel, highlightBGPixel;$/;"	m	struct:_TextPart
highlightGC	textDisp.h	/^    GC gc, selectGC, highlightGC;	\/* GCs for drawing text *\/$/;"	m	struct:_textDisp
highlightItem	nedit.h	/^    Widget	highlightItem;$/;"	m	struct:_WindowInfo
highlightOffDefCB	menu.c	/^static void highlightOffDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
highlightOffDefItem	nedit.h	/^    Widget	highlightOffDefItem;$/;"	m	struct:_WindowInfo
highlightPattern	highlight.h	/^} highlightPattern;$/;"	t
highlightStyleList	highlightData.c	/^    highlightStyleRec **highlightStyleList;$/;"	m	struct:
highlightStyleRec	highlightData.c	/^} highlightStyleRec;$/;"	t	file:
highlightSyntax	nedit.h	/^    Boolean	highlightSyntax;	\/* is syntax highlighting turned on? *\/$/;"	m	struct:_WindowInfo
highlightSyntax	preferences.c	/^    int highlightSyntax;    	\/* whether to highlight syntax by default *\/$/;"	m	struct:prefData
highlightSyntaxMV	macro.c	/^static int highlightSyntaxMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
highlightingDefCB	menu.c	/^static void highlightingDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
histogramCharacters	textBuf.c	/^static void histogramCharacters(const char *string, int length, char hist[256],$/;"	f	file:
historyIndex	search.c	/^static int historyIndex(int nCycles)$/;"	f	file:
horizOffset	textDisp.h	/^    int horizOffset;			\/* Horizontal scroll pos. in pixels *\/$/;"	m	struct:_textDisp
hsApplyCB	highlightData.c	/^static void hsApplyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
hsDestroyCB	highlightData.c	/^static void hsDestroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
hsDialogEmpty	highlightData.c	/^static int hsDialogEmpty(void)$/;"	f	file:
hsDismissCB	highlightData.c	/^static void hsDismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
hsFreeItemCB	highlightData.c	/^static void hsFreeItemCB(void *item)$/;"	f	file:
hsGetDisplayedCB	highlightData.c	/^static void *hsGetDisplayedCB(void *oldItem, int explicitRequest, int *abort,$/;"	f	file:
hsOkCB	highlightData.c	/^static void hsOkCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
hsSetDisplayedCB	highlightData.c	/^static void hsSetDisplayedCB(void *item, void *cbArg)$/;"	f	file:
iSearchCaseToggle	nedit.h	/^    Widget  	iSearchCaseToggle;$/;"	m	struct:_WindowInfo
iSearchCaseToggleCB	search.c	/^static void iSearchCaseToggleCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
iSearchForm	nedit.h	/^    Widget  	iSearchForm;	    	\/* incremental search line widgets *\/$/;"	m	struct:_WindowInfo
iSearchHistIndex	nedit.h	/^    int     	iSearchHistIndex;	\/*   find and replace dialogs *\/$/;"	m	struct:_WindowInfo
iSearchLastBeginPos	nedit.h	/^    int       	iSearchLastBeginPos;    \/* beg. pos. last match of current i.s.*\/$/;"	m	struct:_WindowInfo
iSearchLastLiteralCase	nedit.h	/^    Bool	iSearchLastLiteralCase; \/* idem, for literal mode *\/$/;"	m	struct:_WindowInfo
iSearchLastRegexCase	nedit.h	/^    Bool	iSearchLastRegexCase;   \/* idem, for regex mode in $/;"	m	struct:_WindowInfo
iSearchLine	preferences.c	/^    int iSearchLine;	    	\/* whether to show the incremental search line*\/$/;"	m	struct:prefData
iSearchLineDefCB	menu.c	/^static void iSearchLineDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
iSearchLineDefItem	nedit.h	/^    Widget	iSearchLineDefItem;$/;"	m	struct:_WindowInfo
iSearchLineItem	nedit.h	/^    Widget	iSearchLineItem;$/;"	m	struct:_WindowInfo
iSearchRecordLastBeginPos	search.c	/^static void iSearchRecordLastBeginPos(WindowInfo *window, int direction, $/;"	f	file:
iSearchRegExpToggleCB	search.c	/^static void iSearchRegExpToggleCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
iSearchRegexToggle	nedit.h	/^    Widget  	iSearchRegexToggle;$/;"	m	struct:_WindowInfo
iSearchRevToggle	nedit.h	/^    Widget  	iSearchRevToggle;$/;"	m	struct:_WindowInfo
iSearchStartPos	nedit.h	/^    int     	iSearchStartPos;    	\/* start pos. of current incr. search *\/$/;"	m	struct:_WindowInfo
iSearchText	nedit.h	/^    Widget  	iSearchText;$/;"	m	struct:_WindowInfo
iSearchTextActivateCB	search.c	/^static void iSearchTextActivateCB(Widget w, WindowInfo *window,$/;"	f	file:
iSearchTextKeyEH	search.c	/^static void iSearchTextKeyEH(Widget w, WindowInfo *window,$/;"	f	file:
iSearchTextValueChangedCB	search.c	/^static void iSearchTextValueChangedCB(Widget w, WindowInfo *window,$/;"	f	file:
iSearchTryBeepOnWrap	search.c	/^static void iSearchTryBeepOnWrap(WindowInfo *window, int direction, $/;"	f	file:
ignore	textP.h	/^    int ignore;$/;"	m	struct:_TextClassPart
ignoreModify	nedit.h	/^    Boolean	ignoreModify;		\/* ignore modifications to text area *\/$/;"	m	struct:_WindowInfo
inArray	interpret.c	/^static int inArray(void)$/;"	f	file:
inLength	shell.c	/^    int inLength;$/;"	m	struct:
inPtr	shell.c	/^    char *inPtr;$/;"	m	struct:
inSelToggle	macro.c	/^    Widget inSelToggle, toEndToggle;$/;"	m	struct:
inSelection	textDisp.c	/^static int inSelection(selection *sel, int pos, int lineStartPos, int dispIndex)$/;"	f	file:
inSrcs	shell.h	/^enum inSrcs {FROM_SELECTION, FROM_WINDOW, FROM_EITHER, FROM_NONE};$/;"	g
inUndo	nedit.h	/^    char	inUndo;			\/* flag to indicate undo command on$/;"	m	struct:_UndoInfo
inUse	interpret.c	/^    int inUse;              \/* we use pointers to the data to refer to the entire struct *\/$/;"	m	struct:
incBackupMV	macro.c	/^static int incBackupMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
incSearchLineMV	macro.c	/^static int incSearchLineMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
includeAP	menu.c	/^static void includeAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
includeDialogAP	menu.c	/^static void includeDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
increment	interpret.c	/^static int increment(void)$/;"	f	file:
incrementalReparse	highlight.c	/^static void incrementalReparse(windowHighlightData *highlightData,$/;"	f	file:
indentRequest	text.h	/^    int indentRequest;$/;"	m	struct:
indentSpecsDiffer	smartIndent.c	/^int indentSpecsDiffer(smartIndentRec *is1, smartIndentRec *is2)$/;"	f
indentStyle	nedit.h	/^    char	indentStyle;		\/* whether\/how to auto indent *\/$/;"	m	struct:_WindowInfo
indentStyle	nedit.h	/^enum indentStyle {NO_AUTO_INDENT, AUTO_INDENT, SMART_INDENT};$/;"	g
indentStyle	preferences.c	/^    int indentStyle;	$/;"	m	struct:
index	tags.h	/^    short index;$/;"	m	struct:_tag
index	tags.h	/^    short index;$/;"	m	struct:_tagFile
indexOfNamedPattern	highlight.c	/^static int indexOfNamedPattern(highlightPattern *patList, int nPats,$/;"	f	file:
initMacro	smartIndent.c	/^    Widget initMacro;$/;"	m	struct:
initMacro	smartIndent.c	/^    char *initMacro;$/;"	m	struct:
initToggleButtons	search.c	/^static void initToggleButtons(int searchType, Widget regexToggle,$/;"	f	file:
init_ansi_classes	regularExp.c	/^static int init_ansi_classes (void) {$/;"	f	file:
initialize	text.c	/^static void initialize(TextWidget request, TextWidget new)$/;"	f	file:
input	shell.c	/^    char *input;$/;"	m	struct:
input	userCmds.c	/^    char input;$/;"	m	struct:
insert	regularExp.c	/^static unsigned char * insert ($/;"	f	file:
insert	textBuf.c	/^static int insert(textBuffer *buf, int pos, const char *text)$/;"	f	file:
insertBalance	rbTree.c	/^static void insertBalance(rbTreeNode *x, rbTreeNode **root)$/;"	f	file:
insertCol	textBuf.c	/^static void insertCol(textBuffer *buf, int column, int startPos, const char *insText,$/;"	f	file:
insertColInLine	textBuf.c	/^static void insertColInLine(const char *line, const char *insLine, int column, int insWidth,$/;"	f	file:
insertResultFlags	textSel.c	/^enum insertResultFlags {INSERT_WAITING, UNSUCCESSFUL_INSERT, SUCCESSFUL_INSERT};$/;"	g	file:
insertShiftedMacro	smartIndent.c	/^static void insertShiftedMacro(textBuffer *buf, char  *macro)$/;"	f	file:
insertStringAP	text.c	/^static void insertStringAP(Widget w, XEvent *event, String *args,$/;"	f	file:
insertTabs	preferences.c	/^    int insertTabs;		\/* whether to use tabs for padding *\/$/;"	m	struct:prefData
inst	parse.c	/^    Inst *inst;$/;"	m	union:
intToStr	highlightData.c	/^static char *intToStr(int i)$/;"	f	file:
invalidatePrevOpenMenus	menu.c	/^static void invalidatePrevOpenMenus(void)$/;"	f	file:
isDefaultIndentSpec	smartIndent.c	/^static int isDefaultIndentSpec(smartIndentRec *indentSpec)$/;"	f	file:
isDefaultPatternSet	highlightData.c	/^static int isDefaultPatternSet(patternSet *patSet)$/;"	f	file:
isIconic	window.c	/^static int isIconic(WindowInfo *window)$/;"	f	file:
isIgnoredAction	macro.c	/^static int isIgnoredAction(char *action)$/;"	f	file:
isMouseAction	macro.c	/^static int isMouseAction(char *action)$/;"	f	file:
isParentStyle	highlight.c	/^static int isParentStyle(char *parentStyles, int style1, int style2)$/;"	f	file:
isRedundantAction	macro.c	/^static int isRedundantAction(char *action)$/;"	f	file:
isRegexType	search.c	/^static int isRegexType(int searchType)$/;"	f	file:
issueCommand	shell.c	/^static void issueCommand(WindowInfo *window, char *command, char *input,$/;"	f	file:
italicBrowseCB	preferences.c	/^static void italicBrowseCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
italicErrW	preferences.c	/^    Widget italicErrW;$/;"	m	struct:
italicFontName	nedit.h	/^    char	italicFontName[MAX_FONT_LEN];$/;"	m	struct:_WindowInfo
italicFontString	preferences.c	/^    char italicFontString[MAX_FONT_LEN];$/;"	m	struct:prefData
italicFontStruct	nedit.h	/^    XFontStruct *italicFontStruct;	\/* fontStructs for highlighting fonts *\/$/;"	m	struct:_WindowInfo
italicFontStruct	preferences.c	/^    XFontStruct *italicFontStruct;$/;"	m	struct:prefData
italicModifiedCB	preferences.c	/^static void italicModifiedCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
italicW	highlightData.c	/^    Widget plainW, boldW, italicW, boldItalicW;$/;"	m	struct:
italicW	preferences.c	/^    Widget italicW;$/;"	m	struct:
keepSearchDlogs	preferences.c	/^    int keepSearchDlogs;	\/* whether to retain find and replace dialogs *\/$/;"	m	struct:prefData
keepSearchDlogsDefCB	menu.c	/^static void keepSearchDlogsDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
keepSearchDlogsDefItem	nedit.h	/^    Widget	keepSearchDlogsDefItem;$/;"	m	struct:_WindowInfo
key	interpret.h	/^    char *key;$/;"	m	struct:
key	rbTree.c	/^    char *key;$/;"	m	struct:TestNode
keyMoveExtendSelection	text.c	/^static void keyMoveExtendSelection(Widget w, XEvent *event, int origPos,$/;"	f	file:
keySelectAP	text.c	/^static void keySelectAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
keysym	userCmds.c	/^    KeySym keysym;$/;"	m	struct:
label	nedit.h	/^    char label;$/;"	m	struct:
langModeCB	highlightData.c	/^static void langModeCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
langModeCB	smartIndent.c	/^static void langModeCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
langModeCascade	nedit.h	/^    Widget	langModeCascade;$/;"	m	struct:_WindowInfo
langModeName	highlightData.c	/^    char *langModeName;$/;"	m	struct:
langModeName	smartIndent.c	/^    char *langModeName;$/;"	m	struct:
language	preferences.c	/^    char *language;$/;"	m	struct:
languageDefCB	menu.c	/^static void languageDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
languageMode	highlight.h	/^    char *languageMode;$/;"	m	struct:
languageMode	nedit.h	/^    int    	languageMode;	    	\/* identifies language mode currently$/;"	m	struct:_WindowInfo
languageModeList	preferences.c	/^    languageModeRec **languageModeList;$/;"	m	struct:
languageModeMV	macro.c	/^static int languageModeMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
languageModeRec	preferences.c	/^} languageModeRec;$/;"	t	file:
lastActionHook	macro.c	/^static void lastActionHook(Widget w, XtPointer clientData, String actionName,$/;"	f	file:
lastBtnDown	textP.h	/^    Time lastBtnDown;			\/* Timestamp of last button down event$/;"	m	struct:_TextPart
lastChar	textDisp.h	/^    int firstChar, lastChar;		\/* Buffer positions of first and last$/;"	m	struct:_textDisp
lastCmdToggle	macro.c	/^    Widget shell, repeatText, lastCmdToggle;$/;"	m	struct:
lastCommand	macro.c	/^    char *lastCommand;$/;"	m	struct:
lastFocus	nedit.h	/^    Widget	lastFocus;		\/* the last pane to have kbd. focus *\/$/;"	m	struct:_WindowInfo
lastModTime	nedit.h	/^    time_t    	lastModTime; 	    	\/* time of last modification to file *\/$/;"	m	struct:_WindowInfo
lastModified	highlight.c	/^static int lastModified(textBuffer *styleBuf)$/;"	f	file:
le	interpret.c	/^static int le(void)$/;"	f	file:
learnActionHook	macro.c	/^static void learnActionHook(Widget w, XtPointer clientData, String actionName,$/;"	f	file:
learnCB	menu.c	/^static void learnCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
learnItem	nedit.h	/^    Widget	learnItem;$/;"	m	struct:_WindowInfo
left	rbTree.h	/^    struct rbTreeNode *left;   \/* left child *\/$/;"	m	struct:rbTreeNode
left	textDisp.h	/^    int top, left, width, height, lineNumLeft, lineNumWidth;$/;"	m	struct:_textDisp
leftPos	shell.c	/^    int leftPos, rightPos;$/;"	m	struct:
length	shell.c	/^    int length;$/;"	m	struct:bufElem
length	textBuf.h	/^    int length; 	        \/* length of the text in the buffer (the length$/;"	m	struct:_textBuffer
length	textSel.c	/^    int length;$/;"	m	struct:
lengthMS	macro.c	/^static int lengthMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
lengthMV	macro.c	/^static int lengthMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
lineContext	highlight.h	/^    int lineContext;$/;"	m	struct:
lineContextW	highlightData.c	/^    Widget lineContextW;$/;"	m	struct:
lineMV	macro.c	/^static int lineMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
lineNumCols	textP.h	/^    int lineNumCols;$/;"	m	struct:_TextPart
lineNumFGPixel	textDisp.h	/^    Pixel lineNumFGPixel;   	    	\/* Color for drawing line numbers *\/$/;"	m	struct:_textDisp
lineNumFGPixel	textP.h	/^    Pixel cursorFGPixel, lineNumFGPixel;$/;"	m	struct:_TextPart
lineNumGC	textDisp.h	/^    GC lineNumGC;   	    	    	\/* GC for drawing line numbers *\/$/;"	m	struct:_textDisp
lineNumLeft	textDisp.h	/^    int top, left, width, height, lineNumLeft, lineNumWidth;$/;"	m	struct:_textDisp
lineNumWidth	textDisp.h	/^    int top, left, width, height, lineNumLeft, lineNumWidth;$/;"	m	struct:_textDisp
lineNums	preferences.c	/^    int lineNums;   	    	\/* whether to show line numbers *\/$/;"	m	struct:prefData
lineNumsDefCB	menu.c	/^static void lineNumsDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
lineNumsDefItem	nedit.h	/^    Widget	lineNumsDefItem;$/;"	m	struct:_WindowInfo
lineNumsItem	nedit.h	/^    Widget	lineNumsItem;$/;"	m	struct:_WindowInfo
lineStarts	textDisp.h	/^    int *lineStarts;$/;"	m	struct:_textDisp
listDialogBtnCB	macro.c	/^static void listDialogBtnCB(Widget w, XtPointer clientData,$/;"	f	file:
listDialogCloseCB	macro.c	/^static void listDialogCloseCB(Widget w, XtPointer clientData,$/;"	f	file:
listDialogMS	macro.c	/^static int listDialogMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
literal_escape	regexConvert.c	/^static unsigned char literal_escape (unsigned char c, int action) {$/;"	f	file:
literal_escape	regularExp.c	/^static unsigned char literal_escape (unsigned char c) {$/;"	f	file:
lmApplyCB	preferences.c	/^static void lmApplyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
lmDeleteConfirmCB	preferences.c	/^static int lmDeleteConfirmCB(int itemIndex, void *cbArg)$/;"	f	file:
lmDestroyCB	preferences.c	/^static void lmDestroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
lmDialogCB	highlightData.c	/^static void lmDialogCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
lmDialogCB	smartIndent.c	/^static void lmDialogCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
lmDialogEmpty	preferences.c	/^static int lmDialogEmpty(void)$/;"	f	file:
lmDismissCB	preferences.c	/^static void lmDismissCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
lmFreeItemCB	preferences.c	/^static void lmFreeItemCB(void *item)$/;"	f	file:
lmGetDisplayedCB	preferences.c	/^static void *lmGetDisplayedCB(void *oldItem, int explicitRequest, int *abort,$/;"	f	file:
lmName	smartIndent.c	/^    char *lmName;$/;"	m	struct:
lmOkCB	preferences.c	/^static void lmOkCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
lmOptMenu	highlightData.c	/^    Widget lmOptMenu;$/;"	m	struct:
lmOptMenu	smartIndent.c	/^    Widget lmOptMenu;$/;"	m	struct:
lmPulldown	highlightData.c	/^    Widget lmPulldown;$/;"	m	struct:
lmPulldown	smartIndent.c	/^    Widget lmPulldown;$/;"	m	struct:
lmSetDisplayedCB	preferences.c	/^static void lmSetDisplayedCB(void *item, void *cbArg)$/;"	f	file:
loadAfter	userCmds.c	/^    char loadAfter;$/;"	m	struct:
loadAfterBtn	userCmds.c	/^    Widget loadAfterBtn, selInpBtn, winInpBtn, eitherInpBtn, noInpBtn;$/;"	m	struct:
loadDefaultIndentSpec	smartIndent.c	/^static int loadDefaultIndentSpec(char *lmName)$/;"	f	file:
loadLanguageModesString	preferences.c	/^static int loadLanguageModesString(char *inString)$/;"	f	file:
loadMacroAP	menu.c	/^static void loadMacroAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
loadMacroDialogAP	menu.c	/^static void loadMacroDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
loadMenuItemString	userCmds.c	/^static int loadMenuItemString(char *inString, menuItemRec **menuItems,$/;"	f	file:
loadTagsAP	menu.c	/^static void loadTagsAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
loadTagsDialogAP	menu.c	/^static void loadTagsDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
loadTagsFile	tags.c	/^static int loadTagsFile(char *tagSpec, int index)$/;"	f	file:
loaded	tags.h	/^    Boolean loaded;$/;"	m	struct:_tagFile
localSymList	interpret.h	/^    Symbol *localSymList;$/;"	m	struct:
lockReasons	nedit.h	/^    int         lockReasons;            \/* all ways a file can be locked *\/$/;"	m	struct:_WindowInfo
lockedMV	macro.c	/^static int lockedMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
lookupNamedStyle	highlightData.c	/^static int lookupNamedStyle(char *styleName)$/;"	f	file:
loseMotifDestCB	textSel.c	/^static void loseMotifDestCB(Widget w, Atom *selType)$/;"	f	file:
loseSecondaryCB	textSel.c	/^static void loseSecondaryCB(Widget w, Atom *selType)$/;"	f	file:
loseSelectionCB	textSel.c	/^static void loseSelectionCB(Widget w, Atom *selType)$/;"	f	file:
lowercaseAP	menu.c	/^static void lowercaseAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
lt	interpret.c	/^static int lt(void)$/;"	f	file:
macroCmdData	nedit.h	/^    void    	*macroCmdData;  	\/* same for macro commands *\/$/;"	m	struct:_WindowInfo
macroCmdInfo	macro.c	/^} macroCmdInfo;$/;"	t	file:
macroCmds	preferences.c	/^    char *macroCmds;$/;"	m	struct:
macroDefCB	menu.c	/^static void macroDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
macroMenuAP	menu.c	/^static void macroMenuAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
macroMenuCB	userCmds.c	/^static void macroMenuCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
macroMenuPane	nedit.h	/^    Widget	macroMenuPane;$/;"	m	struct:_WindowInfo
main	nc.c	/^int main(int argc, char **argv)$/;"	f
main	nedit.c	/^int main(int argc, char **argv)$/;"	f
main	rbTree.c	/^int main(int argc, char **argv)$/;"	f
maintainPosition	selection.c	/^static void maintainPosition(int *position, int modPos, int nInserted,$/;"	f	file:
maintainSelection	selection.c	/^static void maintainSelection(selection *sel, int pos, int nInserted,$/;"	f	file:
maintainingAbsTopLineNum	textDisp.c	/^static int maintainingAbsTopLineNum(textDisp *textD)$/;"	f	file:
majorStyles	export.c	/^    char *majorStyles;$/;"	m	struct:
makeArrayKeyFromArgs	interpret.c	/^static int makeArrayKeyFromArgs(int nArgs, char **keyString)$/;"	f	file:
makeBackupCopyMV	macro.c	/^static int makeBackupCopyMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
makeDelimiterTable	regularExp.c	/^static unsigned char * makeDelimiterTable ($/;"	f	file:
makeIndentString	shift.c	/^char *makeIndentString(int indent, int tabDist, int allowTabs, int *nChars)$/;"	f
managedList	userCmds.c	/^    Widget managedList;$/;"	m	struct:
managedListW	highlightData.c	/^    Widget managedListW;$/;"	m	struct:
managedListW	preferences.c	/^    Widget managedListW;$/;"	m	struct:
mapDelete	preferences.c	/^    int mapDelete;		\/* whether to map delete to backspace *\/$/;"	m	struct:prefData
marginHeight	textP.h	/^    int marginWidth, marginHeight;$/;"	m	struct:_TextPart
marginWidth	textP.h	/^    int marginWidth, marginHeight;$/;"	m	struct:_TextPart
markAP	menu.c	/^static void markAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
markCB	menu.c	/^static void markCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
markDialogAP	menu.c	/^static void markDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
markKeyCB	selection.c	/^static void markKeyCB(Widget w, XtPointer clientData, XEvent *event,$/;"	f	file:
markTable	nedit.h	/^    Bookmark	markTable[MAX_MARKS];	\/* marked locations in window *\/$/;"	m	struct:_WindowInfo
markTimeoutID	nedit.h	/^    XtIntervalId markTimeoutID;	    	\/* backup timer for mark event handler*\/$/;"	m	struct:_WindowInfo
markTimeoutProc	selection.c	/^static void markTimeoutProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
maskArgvKeywords	nedit.c	/^void maskArgvKeywords(int argc, char **argv, char **maskArgs)$/;"	f
match	regularExp.c	/^static int match (unsigned char *prog) {$/;"	f	file:
match	search.c	/^    char match;$/;"	m	struct:_charMatchTable
matchLanguageMode	preferences.c	/^static int matchLanguageMode(WindowInfo *window)$/;"	f	file:
matchLbl	highlightData.c	/^    Widget matchLbl;$/;"	m	struct:
matchTypeCB	highlightData.c	/^static void matchTypeCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
match_start	regularExp.h	/^   char  match_start;       \/* Internal use only. *\/$/;"	m	struct:regexp
matchesActionRoutine	parse.c	/^static Symbol *matchesActionRoutine(char **inPtr)$/;"	f	file:
max	highlight.c	/^static int max(int i1, int i2)$/;"	f	file:
max	text.c	/^static int max(int i1, int i2)$/;"	f	file:
max	textBuf.c	/^static int max(int i1, int i2)$/;"	f	file:
max	textDisp.c	/^static int max(int i1, int i2)$/;"	f	file:
max	textDrag.c	/^static int max(int i1, int i2)$/;"	f	file:
max3	textDrag.c	/^static int max3(int i1, int i2, int i3)$/;"	f	file:
maxFontWidthMV	macro.c	/^static int maxFontWidthMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
maxMS	macro.c	/^static int maxMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
maxPrevOpenFiles	preferences.c	/^    int maxPrevOpenFiles;   	\/* limit to size of Open Previous menu *\/$/;"	m	struct:prefData
measurePropChar	textDisp.c	/^static int measurePropChar(textDisp *textD, char c, int colNum, int pos)$/;"	f	file:
measureText	shell.c	/^static void measureText(char *text, int wrapWidth, int *rows, int *cols)$/;"	f	file:
measureVisLine	textDisp.c	/^static int measureVisLine(textDisp *textD, int visLineNum)$/;"	f	file:
menuBar	nedit.h	/^    Widget	menuBar;    	    	\/* the main menu bar *\/$/;"	m	struct:_WindowInfo
menuCallbackProc	menu.c	/^typedef void (*menuCallbackProc)();$/;"	t	file:
menuItemRec	userCmds.c	/^} menuItemRec;$/;"	t	file:
menuItemsList	userCmds.c	/^    menuItemRec **menuItemsList;$/;"	m	struct:
menuModes	menu.c	/^enum menuModes {FULL, SHORT};$/;"	g	file:
menuPane	userCmds.c	/^    Widget menuPane;$/;"	m	struct:
menuTreeItem	userCmds.c	/^} menuTreeItem;$/;"	t	file:
min	highlight.c	/^static int min(int i1, int i2)$/;"	f	file:
min	text.c	/^static int min(int i1, int i2)$/;"	f	file:
min	textBuf.c	/^static int min(int i1, int i2)$/;"	f	file:
min	textDisp.c	/^static int min(int i1, int i2)$/;"	f	file:
min3	textDrag.c	/^static int min3(int i1, int i2, int i3)$/;"	f	file:
minFontWidthMV	macro.c	/^static int minFontWidthMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
minMS	macro.c	/^static int minMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
mneTextW	userCmds.c	/^    Widget nameTextW, accTextW, mneTextW, cmdTextW, saveFirstBtn;$/;"	m	struct:
mnemonic	userCmds.c	/^    char mnemonic;$/;"	m	struct:
modMacro	smartIndent.c	/^    Program *modMacro;$/;"	m	struct:
modMacro	smartIndent.c	/^    Widget modMacro;$/;"	m	struct:
modMacro	smartIndent.c	/^    char *modMacro;$/;"	m	struct:
modWarnDefCB	menu.c	/^static void modWarnDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
modWarnDefItem	nedit.h	/^    Widget  	modWarnDefItem;$/;"	m	struct:_WindowInfo
modeError	preferences.c	/^static int modeError(languageModeRec *lm, const char *stringStart, const char *stoppedAt,$/;"	f	file:
modeMessageDisplayed	nedit.h	/^    Boolean	modeMessageDisplayed;	\/* special stats line banner for learn$/;"	m	struct:_WindowInfo
modifiedCB	textSel.c	/^static void modifiedCB(int pos, int nInserted, int nDeleted,$/;"	f	file:
modifiedCB	window.c	/^static void modifiedCB(int pos, int nInserted, int nDeleted, int nRestyled,$/;"	f	file:
modifiedMV	macro.c	/^static int modifiedMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
modifiers	userCmds.c	/^    unsigned int modifiers;$/;"	m	struct:
modifyProcs	textBuf.h	/^    	    *modifyProcs;	\/*    modified to redisplay contents *\/$/;"	m	struct:_textBuffer
modifyStyleBuf	highlight.c	/^static void modifyStyleBuf(textBuffer *styleBuf, char *styleString,$/;"	f	file:
modulo	interpret.c	/^static int modulo(void)$/;"	f	file:
motifDestOwner	textP.h	/^    int motifDestOwner;			\/* " " owns the motif destination *\/$/;"	m	struct:_TextPart
mousePanAP	text.c	/^static void mousePanAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
mouseX	textP.h	/^    int mouseX, mouseY;			\/* Last known mouse position in drag$/;"	m	struct:_TextPart
mouseY	textP.h	/^    int mouseX, mouseY;			\/* Last known mouse position in drag$/;"	m	struct:_TextPart
moveDestinationAP	text.c	/^static void moveDestinationAP(Widget w, XEvent *event, String *args,$/;"	f	file:
moveGap	textBuf.c	/^static void moveGap(textBuffer *buf, int pos)$/;"	f	file:
moveToAP	text.c	/^static void moveToAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
moveToOrEndDragAP	text.c	/^static void moveToOrEndDragAP(Widget w, XEvent *event, String *args,$/;"	f	file:
movedCB	window.c	/^static void movedCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
multiClickState	textP.h	/^    int multiClickState;		\/* How long is this multi-click$/;"	m	struct:_TextPart
multiClickStates	textP.h	/^enum multiClickStates {NO_CLICKS, ONE_CLICK, TWO_CLICKS, THREE_CLICKS};$/;"	g
multiFileBusy	nedit.h	/^    Bool 	multiFileBusy;		\/* suppresses multiple beeps\/dialogs$/;"	m	struct:_WindowInfo
multiFileReplSelected	nedit.h	/^    Boolean	multiFileReplSelected;	\/* selected during last multi-window $/;"	m	struct:_WindowInfo
multiply	interpret.c	/^static int multiply(void)$/;"	f	file:
n	interpret.h	/^        int n;$/;"	m	union:
nArgs	parse.c	/^    int nArgs;$/;"	m	union:
nBufferLines	textDisp.h	/^    int nBufferLines;			\/* # of newlines in the buffer *\/$/;"	m	struct:_textDisp
nChars	export.c	/^    int nChars;$/;"	m	struct:
nChars	highlight.c	/^    int nChars;$/;"	m	struct:
nCharsDeleted	text.h	/^    int nCharsDeleted;$/;"	m	struct:
nCharsInserted	text.h	/^    int nCharsInserted;$/;"	m	struct:
nExtensions	preferences.c	/^    int nExtensions;$/;"	m	struct:
nHighlightStyles	highlightData.c	/^    int nHighlightStyles;$/;"	m	struct:
nLanguageModes	preferences.c	/^    int nLanguageModes;$/;"	m	struct:
nLines	export.c	/^    int nLines;$/;"	m	struct:
nLines	highlight.c	/^    int nLines;$/;"	m	struct:
nMarks	nedit.h	/^    int     	nMarks;     	    	\/* number of active bookmarks *\/$/;"	m	struct:_WindowInfo
nMenuItems	userCmds.c	/^    int nMenuItems;$/;"	m	struct:
nModifyProcs	textBuf.h	/^    int nModifyProcs;		\/* number of modify-redisplay procs attached *\/$/;"	m	struct:_textBuffer
nPanes	nedit.h	/^    int		nPanes;			\/* number of additional text editing$/;"	m	struct:_WindowInfo
nPanesMV	macro.c	/^static int nPanesMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
nPatterns	highlight.h	/^    int nPatterns;$/;"	m	struct:
nPatterns	highlightData.c	/^    int nPatterns;$/;"	m	struct:
nStyles	export.c	/^    int nStyles;$/;"	m	struct:
nStyles	highlight.c	/^    int nStyles;$/;"	m	struct:
nStyles	textDisp.h	/^    int nStyles;			\/* Number of entries in styleTable *\/$/;"	m	struct:_textDisp
nSubPatterns	export.c	/^    int nSubPatterns;$/;"	m	struct:_highlightDataRec
nSubPatterns	highlight.c	/^    int nSubPatterns;$/;"	m	struct:_highlightDataRec
nTags	tags.c	/^static int nTags = 0;$/;"	v	file:
nToggleShortItems	nedit.h	/^    int     	nToggleShortItems;$/;"	m	struct:_WindowInfo
nVisibleLines	textDisp.h	/^    int nVisibleLines;			\/* # of visible (displayed) lines *\/$/;"	m	struct:_textDisp
nWritableWindows	nedit.h	/^    int		nWritableWindows;	\/* number of elements in the list *\/$/;"	m	struct:_WindowInfo
name	highlight.h	/^    char *name;$/;"	m	struct:
name	highlightData.c	/^    char *name;$/;"	m	struct:
name	interpret.h	/^    char *name;$/;"	m	struct:SymbolRec
name	preferences.c	/^    char *name;$/;"	m	struct:
name	tags.h	/^    const char *name;$/;"	m	struct:_tag
name	userCmds.c	/^    char *name;$/;"	m	struct:
nameTextW	userCmds.c	/^    Widget nameTextW, accTextW, mneTextW, cmdTextW, saveFirstBtn;$/;"	m	struct:
nameW	highlightData.c	/^    Widget nameW;$/;"	m	struct:
nameW	preferences.c	/^    Widget nameW;$/;"	m	struct:
ne	interpret.c	/^static int ne(void)$/;"	f	file:
needAbsTopLineNum	textDisp.h	/^    int needAbsTopLineNum;		\/* Externally settable flag to continue$/;"	m	struct:_textDisp
negate	interpret.c	/^static int negate(void)$/;"	f	file:
newAP	menu.c	/^static void newAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
newlineAP	text.c	/^static void newlineAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
newlineAndIndentAP	text.c	/^static void newlineAndIndentAP(Widget w, XEvent *event, String *args,$/;"	f	file:
newlineMacro	smartIndent.c	/^    Program *newlineMacro;$/;"	m	struct:
newlineMacro	smartIndent.c	/^    Widget newlineMacro;$/;"	m	struct:
newlineMacro	smartIndent.c	/^    char *newlineMacro;$/;"	m	struct:
newlineNoIndentAP	text.c	/^static void newlineNoIndentAP(Widget w, XEvent *event, String *args,$/;"	f	file:
newlineWrapCB	menu.c	/^static void newlineWrapCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
newlineWrapDefCB	menu.c	/^static void newlineWrapDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
newlineWrapDefItem	nedit.h	/^    Widget	newlineWrapDefItem;$/;"	m	struct:_WindowInfo
newlineWrapItem	nedit.h	/^    Widget  	newlineWrapItem;$/;"	m	struct:_WindowInfo
newlineWrapW	preferences.c	/^    Widget newlineWrapW;$/;"	m	struct:
next	interpret.c	/^    struct SparseArrayEntryWrapper *next;$/;"	m	struct:
next	interpret.h	/^    struct SymbolRec *next;     \/* to link to another *\/  $/;"	m	struct:SymbolRec
next	nedit.h	/^    struct _UndoInfo *next;		\/* pointer to the next undo record *\/$/;"	m	struct:_UndoInfo
next	nedit.h	/^    struct _WindowInfo *next;$/;"	m	struct:_WindowInfo
next	shell.c	/^    struct bufElem *next;$/;"	m	struct:bufElem
next	tags.c	/^    struct rcs *next;$/;"	m	struct:rcs
next	tags.h	/^    struct _tag *next;$/;"	m	struct:_tag
next	tags.h	/^    struct _tagFile *next;$/;"	m	struct:_tagFile
nextArg	nc.c	/^static void nextArg(int argc, char **argv, int *argIndex)$/;"	f	file:
nextArg	nedit.c	/^static void nextArg(int argc, char **argv, int *argIndex)$/;"	f	file:
nextPageAP	text.c	/^static void nextPageAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
nextTab	shift.c	/^static int nextTab(int pos, int tabDist)$/;"	f	file:
next_ptr	regularExp.c	/^static unsigned char * next_ptr (unsigned char *ptr) {$/;"	f	file:
noIndentW	preferences.c	/^    Widget noIndentW;$/;"	m	struct:
noInpBtn	userCmds.c	/^    Widget loadAfterBtn, selInpBtn, winInpBtn, eitherInpBtn, noInpBtn;$/;"	m	struct:
noWrapCB	menu.c	/^static void noWrapCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
noWrapDefCB	menu.c	/^static void noWrapDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
noWrapDefItem	nedit.h	/^    Widget	noWrapDefItem;$/;"	m	struct:_WindowInfo
noWrapItem	nedit.h	/^    Widget  	noWrapItem;$/;"	m	struct:_WindowInfo
noWrapW	preferences.c	/^    Widget noWrapW;$/;"	m	struct:
nodePointers	rbTree.c	/^    rbTreeNode      nodePointers; \/* MUST BE FIRST MEMBER *\/$/;"	m	struct:TestNode
nodePtrs	interpret.h	/^    rbTreeNode nodePtrs; \/* MUST BE FIRST ENTRY *\/$/;"	m	struct:
normalizePathname	tags.c	/^static char *normalizePathname(char *str)$/;"	f	file:
not	interpret.c	/^static int not(void)$/;"	f	file:
nullSubsChar	textBuf.h	/^    char nullSubsChar;	    	\/* NEdit is based on C null-terminated strings,$/;"	m	struct:_textBuffer
numAllocatedSparseArrayElements	interpret.c	/^static int numAllocatedSparseArrayElements = 0;$/;"	v	file:
numAllocatedStrings	interpret.c	/^static int numAllocatedStrings = 0;$/;"	v	file:
numDisplayLinesMV	macro.c	/^static int numDisplayLinesMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
numeric_escape	regularExp.c	/^static unsigned char numeric_escape ($/;"	f	file:
offsetAbsLineNum	textDisp.c	/^static void offsetAbsLineNum(textDisp *textD, int oldFirstChar)$/;"	f	file:
offsetLineStarts	textDisp.c	/^static void offsetLineStarts(textDisp *textD, int newTopLineNum)$/;"	f	file:
offset_tail	regularExp.c	/^static void offset_tail (unsigned char *ptr, int offset, unsigned char *val) {$/;"	f	file:
okCB	highlightData.c	/^static void okCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
okCB	smartIndent.c	/^static void okCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
okCB	userCmds.c	/^static void okCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
oldLen	nedit.h	/^    int 	oldLen;$/;"	m	struct:_UndoInfo
oldText	nedit.h	/^    char	*oldText;$/;"	m	struct:_UndoInfo
opStatusCodes	interpret.c	/^enum opStatusCodes {STAT_OK=2, STAT_DONE, STAT_ERROR, STAT_PREEMPT};$/;"	g	file:
openAP	menu.c	/^static void openAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
openDialogAP	menu.c	/^static void openDialogAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
openPrevCB	menu.c	/^static void openPrevCB(Widget w, char *name, caddr_t callData)$/;"	f	file:
openSelectedAP	menu.c	/^static void openSelectedAP(Widget w, XEvent *event, String *args,$/;"	f	file:
operations	interpret.h	/^enum operations {OP_RETURN_NO_VAL, OP_RETURN, OP_PUSH_SYM, OP_DUP, OP_ADD,$/;"	g
or	interpret.c	/^static int or(void)$/;"	f	file:
outBufs	shell.c	/^    buffer *outBufs, *errBufs;$/;"	m	struct:
outDests	shell.h	/^enum outDests {TO_SAME_WINDOW, TO_NEW_WINDOW, TO_DIALOG};$/;"	g
output	userCmds.c	/^    char output;$/;"	m	struct:
overTypeModeMV	macro.c	/^static int overTypeModeMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
overlayRect	textBuf.c	/^static void overlayRect(textBuffer *buf, int startPos, int rectStart,$/;"	f	file:
overlayRectInLine	textBuf.c	/^static void overlayRectInLine(const char *line, const char *insLine, int rectStart,$/;"	f	file:
overstrike	nedit.h	/^    Boolean	overstrike;		\/* is overstrike mode turned on ? *\/$/;"	m	struct:_WindowInfo
overstrike	textP.h	/^    Boolean overstrike;$/;"	m	struct:_TextPart
overtypeModeItem	nedit.h	/^    Widget	overtypeModeItem;$/;"	m	struct:_WindowInfo
pageLeftAP	text.c	/^static void pageLeftAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
pageRightAP	text.c	/^static void pageRightAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
parent	rbTree.h	/^    struct rbTreeNode *parent; \/* parent *\/$/;"	m	struct:rbTreeNode
parentLbl	highlightData.c	/^    Widget parentLbl;$/;"	m	struct:
parentStyleOf	highlight.c	/^static int parentStyleOf(char *parentStyles, int style)$/;"	f	file:
parentStyles	highlight.c	/^    char *parentStyles;$/;"	m	struct:
parentW	highlightData.c	/^    Widget parentW;$/;"	m	struct:
parseAcceleratorString	userCmds.c	/^static int parseAcceleratorString(char *string, unsigned int *modifiers,$/;"	f	file:
parseBufferRange	highlight.c	/^static int parseBufferRange(highlightDataRec *pass1Patterns,$/;"	f	file:
parseCommandLine	nc.c	/^static char *parseCommandLine(int argc, char **argv)$/;"	f	file:
parseError	userCmds.c	/^static int parseError(char *message)$/;"	f	file:
parseString	highlight.c	/^static int parseString(highlightDataRec *pattern, char **string,$/;"	f	file:
pass1Patterns	export.c	/^    highlightDataRec *pass1Patterns;$/;"	m	struct:
pass1Patterns	highlight.c	/^    highlightDataRec *pass1Patterns;$/;"	m	struct:
pass2Patterns	export.c	/^    highlightDataRec *pass2Patterns;$/;"	m	struct:
pass2Patterns	highlight.c	/^    highlightDataRec *pass2Patterns;$/;"	m	struct:
passTwoParseString	highlight.c	/^static void passTwoParseString(highlightDataRec *pattern, char *string,$/;"	f	file:
pasteClipboardAP	text.c	/^static void pasteClipboardAP(Widget w, XEvent *event, String *args,$/;"	f	file:
pasteColCB	menu.c	/^static void pasteColCB(Widget w, XtPointer clientData, XtPointer callData) $/;"	f	file:
pasteReplayCB	userCmds.c	/^static void pasteReplayCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
patTypeCB	highlightData.c	/^static void patTypeCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
patchRowCol	window.c	/^static void patchRowCol(Widget w)$/;"	f	file:
patchedRemoveChild	window.c	/^static void patchedRemoveChild(Widget child)$/;"	f	file:
path	nedit.h	/^    char	path[MAXPATHLEN];	\/* path component of file being edited*\/$/;"	m	struct:_WindowInfo
path	tags.h	/^    const char *path;$/;"	m	struct:_tag
pathInWindowsMenu	preferences.c	/^    int pathInWindowsMenu;   	\/* whether to show path in windows menu *\/$/;"	m	struct:prefData
pathInWindowsMenuDefCB	menu.c	/^static void pathInWindowsMenuDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
pathInWindowsMenuDefItem	nedit.h	/^    Widget	pathInWindowsMenuDefItem;$/;"	m	struct:_WindowInfo
patternIsParsable	highlight.c	/^static int patternIsParsable(highlightDataRec *pattern)$/;"	f	file:
patternOfStyle	highlight.c	/^static highlightDataRec *patternOfStyle(highlightDataRec *patterns, int style)$/;"	f	file:
patternSet	highlight.h	/^} patternSet;$/;"	t
patternSetsDiffer	highlightData.c	/^static int patternSetsDiffer(patternSet *patSet1, patternSet *patSet2)$/;"	f	file:
patterns	highlight.h	/^    highlightPattern *patterns;$/;"	m	struct:
patterns	highlightData.c	/^    highlightPattern **patterns;$/;"	m	struct:
pc	interpret.h	/^    Inst *pc;$/;"	m	struct:
pendingDelete	textP.h	/^    Boolean pendingDelete;$/;"	m	struct:_TextPart
pendingSelection	text.c	/^static int pendingSelection(Widget w)$/;"	f	file:
piece	regexConvert.c	/^static int piece (int *flag_param) {$/;"	f	file:
piece	regularExp.c	/^static unsigned char * piece (int *flag_param) {$/;"	f	file:
plainW	highlightData.c	/^    Widget plainW, boldW, italicW, boldItalicW;$/;"	m	struct:
pos	text.h	/^    int pos;$/;"	m	struct:
posToVisibleLineNum	textDisp.c	/^static int posToVisibleLineNum(textDisp *textD, int pos, int *lineNum)$/;"	f	file:
positionTypes	textDisp.c	/^enum positionTypes {CURSOR_POS, CHARACTER_POS};$/;"	g	file:
power	interpret.c	/^static int power(void)$/;"	f	file:
prefData	preferences.c	/^static struct prefData {$/;"	s	file:
prefFileRead	preferences.c	/^    int prefFileRead;	    	\/* detects whether a .nedit existed *\/$/;"	m	struct:prefData
preserveCB	menu.c	/^static void preserveCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
preserveDefCB	menu.c	/^static void preserveDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
prevOpenMenuCB	menu.c	/^static void prevOpenMenuCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
prevOpenMenuItem	nedit.h	/^    Widget  	prevOpenMenuItem;$/;"	m	struct:_WindowInfo
prevOpenMenuPane	nedit.h	/^    Widget  	prevOpenMenuPane;$/;"	m	struct:_WindowInfo
prevOpenMenuValid	nedit.h	/^    Boolean	prevOpenMenuValid;	\/* Prev. Opened Files menu up to date?*\/$/;"	m	struct:_WindowInfo
previousPageAP	text.c	/^static void previousPageAP(Widget w, XEvent *event, String *args,$/;"	f	file:
primary	textBuf.h	/^    selection primary;		\/* highlighted areas *\/$/;"	m	struct:_textBuffer
primaryBrowseCB	preferences.c	/^static void primaryBrowseCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
primaryModifiedCB	preferences.c	/^static void primaryModifiedCB(Widget w, XtPointer clientData,$/;"	f	file:
primaryW	preferences.c	/^    Widget primaryW;$/;"	m	struct:
primitive	textP.h	/^   XmPrimitivePart primitive;$/;"	m	struct:_TextRec
primitive_class	textP.h	/^    XmPrimitiveClassPart primitive_class;$/;"	m	struct:_TextClassRec
printAP	menu.c	/^static void printAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
printCB	help.c	/^static void printCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
printSelAP	menu.c	/^static void printSelAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
printSelItem	nedit.h	/^    Widget	printSelItem;$/;"	m	struct:_WindowInfo
processCancelAP	text.c	/^static void processCancelAP(Widget w, XEvent *event, String *args,$/;"	f	file:
processDownAP	text.c	/^static void processDownAP(Widget w, XEvent *event, String *args,$/;"	f	file:
processMarkEvent	selection.c	/^static void processMarkEvent(Widget w, XtPointer clientData, XEvent *event,$/;"	f	file:
processServerCommand	server.c	/^static void processServerCommand(void)$/;"	f	file:
processServerCommandString	server.c	/^static void processServerCommandString(char *string)$/;"	f	file:
processShiftDownAP	text.c	/^static void processShiftDownAP(Widget w, XEvent *event, String *args,$/;"	f	file:
processShiftUpAP	text.c	/^static void processShiftUpAP(Widget w, XEvent *event, String *args,$/;"	f	file:
processTabAP	text.c	/^static void processTabAP(Widget w, XEvent *event, String *args,$/;"	f	file:
processUpAP	text.c	/^static void processUpAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
program	macro.c	/^    Program *program;$/;"	m	struct:
program	regularExp.h	/^   char  program [1];       \/* Unwarranted chumminess with compiler. *\/$/;"	m	struct:regexp
ptr	interpret.h	/^        void *ptr;$/;"	m	union:
pushSymVal	interpret.c	/^static int pushSymVal(void)$/;"	f	file:
queryGeometry	text.c	/^static XtGeometryResult queryGeometry(Widget w, XtWidgetGeometry *proposed,$/;"	f	file:
rCancelCB	search.c	/^static void rCancelCB(Widget w, WindowInfo *window, caddr_t callData) $/;"	f	file:
rFindArrowKeyCB	search.c	/^static void rFindArrowKeyCB(Widget w, WindowInfo *window, XKeyEvent *event)$/;"	f	file:
rFindCB	search.c	/^static void rFindCB(Widget w, WindowInfo *window,XmAnyCallbackStruct *callData) $/;"	f	file:
rFindTextValueChangedCB	search.c	/^static void rFindTextValueChangedCB(Widget w, WindowInfo *window, XKeyEvent *event)$/;"	f	file:
rFocusCB	search.c	/^static void rFocusCB(Widget w, WindowInfo *window, caddr_t *callData) $/;"	f	file:
rHistIndex	nedit.h	/^    int		rHistIndex, fHistIndex;	\/* history placeholders for *\/$/;"	m	struct:_WindowInfo
rInSelCB	search.c	/^static void rInSelCB(Widget w, WindowInfo *window,$/;"	f	file:
rKeepCB	search.c	/^static void rKeepCB(Widget w, WindowInfo *window, caddr_t *callData) $/;"	f	file:
rMultiFileCancelCB	search.c	/^static void rMultiFileCancelCB(Widget w, WindowInfo *window, caddr_t callData) $/;"	f	file:
rMultiFileDeselectAllCB	search.c	/^static void rMultiFileDeselectAllCB(Widget w, WindowInfo *window,  $/;"	f	file:
rMultiFilePathCB	search.c	/^static void rMultiFilePathCB(Widget w, WindowInfo *window,  $/;"	f	file:
rMultiFileReplaceCB	search.c	/^static void rMultiFileReplaceCB(Widget w, WindowInfo *window, $/;"	f	file:
rMultiFileSelectAllCB	search.c	/^static void rMultiFileSelectAllCB(Widget w, WindowInfo *window, $/;"	f	file:
rScopeMultiCB	search.c	/^static void rScopeMultiCB(Widget w, WindowInfo *window, $/;"	f	file:
rScopeSelCB	search.c	/^static void rScopeSelCB(Widget w, WindowInfo *window, $/;"	f	file:
rScopeWinCB	search.c	/^static void rScopeWinCB(Widget w, WindowInfo *window, $/;"	f	file:
rSetActionButtons	search.c	/^static void rSetActionButtons(WindowInfo* window,$/;"	f	file:
raiseCB	menu.c	/^static void raiseCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
raiseWindowAP	menu.c	/^static void raiseWindowAP(Widget w, XEvent *event, String *args,$/;"	f	file:
rangeTouchesRectSel	textDisp.c	/^static int rangeTouchesRectSel(selection *sel, int rangeStart, int rangeEnd)$/;"	f	file:
rangeW	highlightData.c	/^    Widget rangeW;$/;"	m	struct:
rbTreeAllocateEmptyNodeCB	rbTree.h	/^typedef rbTreeNode *(*rbTreeAllocateEmptyNodeCB)(void);$/;"	t
rbTreeAllocateEmptyNodeCB_TestNode	rbTree.c	/^rbTreeNode *rbTreeAllocateEmptyNodeCB_TestNode(void)$/;"	f
rbTreeAllocateNodeCB	rbTree.h	/^typedef rbTreeNode *(*rbTreeAllocateNodeCB)(rbTreeNode *src);$/;"	t
rbTreeAllocateNode_TestNode	rbTree.c	/^static rbTreeNode *rbTreeAllocateNode_TestNode(rbTreeNode *src)$/;"	f	file:
rbTreeBegin	rbTree.c	/^rbTreeNode *rbTreeBegin(rbTreeNode *base)$/;"	f
rbTreeCompareNodeCB	rbTree.h	/^typedef int (*rbTreeCompareNodeCB)(rbTreeNode *left, rbTreeNode *right);$/;"	t
rbTreeCompareNode_TestNode	rbTree.c	/^static int rbTreeCompareNode_TestNode(rbTreeNode *left, rbTreeNode *right)$/;"	f	file:
rbTreeCopyToNodeCB	rbTree.h	/^typedef int (*rbTreeCopyToNodeCB)(rbTreeNode *dst, rbTreeNode *src);$/;"	t
rbTreeCopyToNode_TestNode	rbTree.c	/^static int rbTreeCopyToNode_TestNode(rbTreeNode *dst, rbTreeNode *src)$/;"	f	file:
rbTreeDelete	rbTree.c	/^int rbTreeDelete(rbTreeNode *base, rbTreeNode *searchNode,$/;"	f
rbTreeDeleteNode	rbTree.c	/^void rbTreeDeleteNode(rbTreeNode *base, rbTreeNode *foundNode,$/;"	f
rbTreeDispose	rbTree.c	/^void rbTreeDispose(rbTreeNode *base, rbTreeDisposeNodeCB disposeNode)$/;"	f
rbTreeDisposeNodeCB	rbTree.h	/^typedef void (*rbTreeDisposeNodeCB)(rbTreeNode *src);$/;"	t
rbTreeDisposeNode_TestNode	rbTree.c	/^static void rbTreeDisposeNode_TestNode(rbTreeNode *src)$/;"	f	file:
rbTreeFind	rbTree.c	/^rbTreeNode *rbTreeFind(rbTreeNode *base, rbTreeNode *searchNode,$/;"	f
rbTreeInsert	rbTree.c	/^rbTreeNode *rbTreeInsert(rbTreeNode *base, rbTreeNode *searchNode,$/;"	f
rbTreeNew	rbTree.c	/^rbTreeNode *rbTreeNew(rbTreeAllocateEmptyNodeCB allocateEmptyNode)$/;"	f
rbTreeNext	rbTree.c	/^rbTreeNode *rbTreeNext(rbTreeNode *x)$/;"	f
rbTreeNode	rbTree.h	/^typedef struct rbTreeNode {$/;"	s
rbTreeNode	rbTree.h	/^} rbTreeNode;$/;"	t
rbTreeNodeBlack	rbTree.c	18;"	d	file:
rbTreeNodeRed	rbTree.c	17;"	d	file:
rbTreePrevious	rbTree.c	/^rbTreeNode *rbTreePrevious(rbTreeNode *x)$/;"	f
rbTreeReverseBegin	rbTree.c	/^rbTreeNode *rbTreeReverseBegin(rbTreeNode *base)$/;"	f
rbTreeSize	rbTree.c	/^int rbTreeSize(rbTreeNode *base)$/;"	f
rbTreeUnlinkNode	rbTree.c	/^rbTreeNode *rbTreeUnlinkNode(rbTreeNode *base, rbTreeNode *z)$/;"	f
rcs	tags.c	/^struct rcs$/;"	s	file:
rcs_free	tags.c	/^static void rcs_free(const char *rcs_str)$/;"	f	file:
rcs_stats	tags.c	/^struct rcs_stats$/;"	s	file:
rcs_strdup	tags.c	/^static const char *rcs_strdup(const char *str)$/;"	f	file:
readCheckMacroString	macro.c	/^static int readCheckMacroString(Widget dialogParent, char *string,$/;"	f	file:
readDefaultPatternSet	highlightData.c	/^static patternSet *readDefaultPatternSet(char *langModeName)$/;"	f	file:
readDialogFields	highlightData.c	/^static highlightPattern *readDialogFields(int silent)$/;"	f	file:
readDialogFields	userCmds.c	/^static menuItemRec *readDialogFields(userCmdDialog *ucd, int silent)$/;"	f	file:
readExtensionList	preferences.c	/^static char **readExtensionList(char **inPtr, int *nExtensions)$/;"	f	file:
readFileMS	macro.c	/^static int readFileMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
readHSDialogFields	highlightData.c	/^static highlightStyleRec *readHSDialogFields(int silent)$/;"	f	file:
readHighlightPattern	highlightData.c	/^static int readHighlightPattern(char **inPtr, char **errMsg,$/;"	f	file:
readHighlightPatterns	highlightData.c	/^static highlightPattern *readHighlightPatterns(char **inPtr, int withBraces,$/;"	f	file:
readIntArg	macro.c	/^static int readIntArg(DataValue dv, int *result, char **errMsg)$/;"	f	file:
readLMDialogFields	preferences.c	/^static languageModeRec *readLMDialogFields(int silent)$/;"	f	file:
readOnly	textP.h	/^    Boolean readOnly;$/;"	m	struct:_TextPart
readOnlyItem	nedit.h	/^    Widget	readOnlyItem;		\/* menu bar settable widgets... *\/$/;"	m	struct:_WindowInfo
readOnlyMV	macro.c	/^static int readOnlyMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
readPatternSet	highlightData.c	/^static patternSet *readPatternSet(char **inPtr, int convertOld)$/;"	f	file:
readSIMacro	smartIndent.c	/^static char *readSIMacro(char **inPtr)$/;"	f	file:
readSearchArgs	macro.c	/^static int readSearchArgs(DataValue *argList, int nArgs, int *searchDirection,$/;"	f	file:
readStringArg	macro.c	/^static int readStringArg(DataValue dv, char **result, char *stringStorage,$/;"	f	file:
realignTabs	textBuf.c	/^static char *realignTabs(const char *text, int origIndent, int newIndent,$/;"	f	file:
realize	text.c	/^static void realize(Widget w, XtValueMask *valueMask,$/;"	f	file:
reallocateBuf	textBuf.c	/^static void reallocateBuf(textBuffer *buf, int newGapStart, int newGapLen)$/;"	f	file:
reapplyLanguageMode	preferences.c	/^static void reapplyLanguageMode(WindowInfo *window, int mode, int forceDefaults)$/;"	f	file:
reason	text.h	/^    int reason;$/;"	m	struct:
recogW	highlightData.c	/^    Widget recogW;$/;"	m	struct:
recogW	preferences.c	/^    Widget recogW;$/;"	m	struct:
recognitionExpr	preferences.c	/^    char *recognitionExpr;$/;"	m	struct:
recolorSubexpr	highlight.c	/^static void recolorSubexpr(regexp *re, int subexpr, int style, char *string,$/;"	f	file:
rectAnchor	textP.h	/^    int anchor, rectAnchor;		\/* Anchors for drag operations and$/;"	m	struct:_TextPart
rectEnd	textBuf.h	/^    int rectEnd;$/;"	m	struct:
rectStart	textBuf.h	/^    int rectStart;$/;"	m	struct:
rectangular	textBuf.h	/^    char rectangular;$/;"	m	struct:
redisplay	text.c	/^static void redisplay(TextWidget w, XEvent *event, Region region)$/;"	f	file:
redisplayLine	textDisp.c	/^static void redisplayLine(textDisp *textD, int visLineNum, int leftClip,$/;"	f	file:
redisplaySelection	textBuf.c	/^static void redisplaySelection(textBuffer *buf, selection *oldSelection,$/;"	f	file:
redo	nedit.h	/^    UndoInfo	*redo;			\/* info for redoing last undone op *\/$/;"	m	struct:_WindowInfo
redoAP	menu.c	/^static void redoAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
redoItem	nedit.h	/^    Widget	redoItem;$/;"	m	struct:_WindowInfo
redrawLineNumbers	textDisp.c	/^static void redrawLineNumbers(textDisp *textD, int clearAll)$/;"	f	file:
reg_error	regexConvert.c	/^static void reg_error (char *str) {$/;"	f	file:
reg_error	regularExp.c	/^static void reg_error (char *str) {$/;"	f	file:
regexFind	preferences.c	/^static int regexFind(const char *inString, const char *expr)$/;"	f	file:
regexReplace	preferences.c	/^static int regexReplace(char **inString, const char *expr, const char *replaceWith)$/;"	f	file:
regexp	regularExp.h	/^typedef struct regexp {$/;"	s
regexp	regularExp.h	/^} regexp;$/;"	t
releaseGC	textDisp.c	/^static void releaseGC(Widget w, GC gc)$/;"	f	file:
removeDoomedWindowFromList	search.c	/^static void removeDoomedWindowFromList(WindowInfo* window, int index)$/;"	f	file:
removeFromWindowList	window.c	/^static void removeFromWindowList(WindowInfo *window)$/;"	f	file:
removeMenuItems	userCmds.c	/^static void removeMenuItems(Widget menuPane)$/;"	f	file:
removeRedoItem	undo.c	/^static void removeRedoItem(WindowInfo *window)$/;"	f	file:
removeSelected	textBuf.c	/^static void removeSelected(textBuffer *buf, selection *sel)$/;"	f	file:
removeTrailingNewlines	shell.c	/^static void removeTrailingNewlines(char *string)$/;"	f	file:
removeUndoItem	undo.c	/^static void removeUndoItem(WindowInfo *window)$/;"	f	file:
removeVersionNumber	file.c	/^void removeVersionNumber(char *fileName)$/;"	f
repInpBtn	userCmds.c	/^    Widget repInpBtn, sameOutBtn, dlogOutBtn, winOutBtn, dlogShell;$/;"	m	struct:
repInput	userCmds.c	/^    char repInput;$/;"	m	struct:
reparseContext	export.c	/^} reparseContext;$/;"	t	file:
reparseContext	highlight.c	/^} reparseContext;$/;"	t	file:
repeatApplyCB	macro.c	/^static void repeatApplyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
repeatCancelCB	macro.c	/^static void repeatCancelCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
repeatDestroyCB	macro.c	/^static void repeatDestroyCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
repeatDialog	macro.c	/^} repeatDialog;$/;"	t	file:
repeatDialogAP	menu.c	/^static void repeatDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
repeatItem	nedit.h	/^    Widget	repeatItem;$/;"	m	struct:_WindowInfo
repeatMacroAP	menu.c	/^static void repeatMacroAP(Widget w, XEvent *event, String *args,$/;"	f	file:
repeatOKCB	macro.c	/^static void repeatOKCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
repeatText	macro.c	/^    Widget shell, repeatText, lastCmdToggle;$/;"	m	struct:
replScopeSelDefItem	nedit.h	/^    Widget	replScopeSelDefItem;$/;"	m	struct:_WindowInfo
replScopeSmartDefItem	nedit.h	/^    Widget	replScopeSmartDefItem;$/;"	m	struct:_WindowInfo
replScopeWinDefItem	nedit.h	/^    Widget	replScopeWinDefItem;$/;"	m	struct:_WindowInfo
replaceAP	menu.c	/^static void replaceAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
replaceAllAP	menu.c	/^static void replaceAllAP(Widget w, XEvent *event, String *args,$/;"	f	file:
replaceAllBtn	nedit.h	/^    Widget	replaceAllBtn;$/;"	m	struct:_WindowInfo
replaceAllCB	search.c	/^static void replaceAllCB(Widget w, WindowInfo *window,$/;"	f	file:
replaceAllScopeCB	search.c	/^static void replaceAllScopeCB(Widget w, WindowInfo *window, $/;"	f	file:
replaceAndFindBtn	nedit.h	/^    Widget	replaceAndFindBtn;$/;"	m	struct:_WindowInfo
replaceArrowKeyCB	search.c	/^static void replaceArrowKeyCB(Widget w, WindowInfo *window, XKeyEvent *event)$/;"	f	file:
replaceBtn	nedit.h	/^    Widget	replaceBtn;$/;"	m	struct:_WindowInfo
replaceBtns	nedit.h	/^    Widget	replaceBtns;$/;"	m	struct:_WindowInfo
replaceCB	menu.c	/^static void replaceCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
replaceCB	search.c	/^static void replaceCB(Widget w, WindowInfo *window,$/;"	f	file:
replaceCaseToggle	nedit.h	/^    Widget    	replaceCaseToggle;$/;"	m	struct:_WindowInfo
replaceCaseToggleCB	search.c	/^static void replaceCaseToggleCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
replaceDefScope	preferences.c	/^    int replaceDefScope;	\/* default replace scope if selection exists *\/$/;"	m	struct:prefData
replaceDialogAP	menu.c	/^static void replaceDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
replaceDlog	nedit.h	/^    Widget	replaceDlog;		\/* replace dialog *\/$/;"	m	struct:_WindowInfo
replaceFailed	nedit.h	/^    Bool 	replaceFailed;		\/* flags replacements failures during$/;"	m	struct:_WindowInfo
replaceFindAP	menu.c	/^static void replaceFindAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
replaceFindBtn	nedit.h	/^    Widget	replaceFindBtn;$/;"	m	struct:_WindowInfo
replaceFindCB	search.c	/^static void replaceFindCB(Widget w, WindowInfo *window, XmAnyCallbackStruct *callData) $/;"	f	file:
replaceFindSameAP	menu.c	/^static void replaceFindSameAP(Widget w, XEvent *event, String *args,$/;"	f	file:
replaceFindSameCB	menu.c	/^static void replaceFindSameCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
replaceInSelAP	menu.c	/^static void replaceInSelAP(Widget w, XEvent *event, String *args,$/;"	f	file:
replaceInSelBtn	nedit.h	/^    Widget	replaceInSelBtn;$/;"	m	struct:_WindowInfo
replaceInStringMS	macro.c	/^static int replaceInStringMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
replaceInWinBtn	nedit.h	/^    Widget      replaceInWinBtn;$/;"	m	struct:_WindowInfo
replaceKeepBtn	nedit.h	/^    Widget	replaceKeepBtn;$/;"	m	struct:_WindowInfo
replaceLastLiteralCase	nedit.h	/^    Bool	replaceLastLiteralCase; \/* idem, for literal mode *\/$/;"	m	struct:_WindowInfo
replaceLastRegexCase	nedit.h	/^    Bool	replaceLastRegexCase;   \/* last state of the case sense button$/;"	m	struct:_WindowInfo
replaceMultiFileCB	search.c	/^static void replaceMultiFileCB(Widget w, WindowInfo *window,$/;"	f	file:
replaceMultiFileDlog	nedit.h	/^    Widget	replaceMultiFileDlog;	\/* Replace in multiple files *\/$/;"	m	struct:_WindowInfo
replaceMultiFileList	nedit.h	/^    Widget	replaceMultiFileList;$/;"	m	struct:_WindowInfo
replaceMultiFilePathBtn	nedit.h	/^    Widget	replaceMultiFilePathBtn;$/;"	m	struct:_WindowInfo
replaceRangeMS	macro.c	/^static int replaceRangeMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
replaceRegExpToggleCB	search.c	/^static void replaceRegExpToggleCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
replaceRegexToggle	nedit.h	/^    Widget	replaceRegexToggle;    $/;"	m	struct:_WindowInfo
replaceRevToggle	nedit.h	/^    Widget	replaceRevToggle;$/;"	m	struct:_WindowInfo
replaceSameAP	menu.c	/^static void replaceSameAP(Widget w, XEvent *event, String *args,$/;"	f	file:
replaceSameCB	menu.c	/^static void replaceSameCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
replaceScope	nedit.h	/^    int		replaceScope;		\/* Current scope for replace dialog *\/$/;"	m	struct:_WindowInfo
replaceScopeMultiToggle	nedit.h	/^    Widget	replaceScopeMultiToggle;\/* Scope for replace = multiple files *\/$/;"	m	struct:_WindowInfo
replaceScopeSelToggle	nedit.h	/^    Widget	replaceScopeSelToggle;	\/* Scope for replace = selection *\/$/;"	m	struct:_WindowInfo
replaceScopeSelectionCB	menu.c	/^static void replaceScopeSelectionCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
replaceScopeSmartCB	menu.c	/^static void replaceScopeSmartCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
replaceScopeWinToggle	nedit.h	/^    Widget	replaceScopeWinToggle;	\/* Scope for replace = window *\/$/;"	m	struct:_WindowInfo
replaceScopeWindowCB	menu.c	/^static void replaceScopeWindowCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
replaceSearchTypeBox	nedit.h	/^    Widget	replaceSearchTypeBox;$/;"	m	struct:_WindowInfo
replaceSelected	textBuf.c	/^static void replaceSelected(textBuffer *buf, selection *sel, const char *text)$/;"	f	file:
replaceSelectionMS	macro.c	/^static int replaceSelectionMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
replaceSubstringMS	macro.c	/^static int replaceSubstringMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
replaceText	nedit.h	/^    Widget	replaceText;		\/* replace dialog settable widgets... *\/$/;"	m	struct:_WindowInfo
replaceUsingRE	search.c	/^static void replaceUsingRE(char *searchStr, char *replaceStr, char *sourceStr,$/;"	f	file:
replaceWithText	nedit.h	/^    Widget	replaceWithText;$/;"	m	struct:_WindowInfo
replaceWordToggle	nedit.h	/^    Widget	replaceWordToggle;    $/;"	m	struct:_WindowInfo
replayCB	menu.c	/^static void replayCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
replayItem	nedit.h	/^    Widget	replayItem;$/;"	m	struct:_WindowInfo
reposDlogsDefCB	menu.c	/^static void reposDlogsDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
reposDlogsDefItem	nedit.h	/^    Widget	reposDlogsDefItem;$/;"	m	struct:_WindowInfo
repositionDialogs	preferences.c	/^    int repositionDialogs;	\/* w. to reposition dialogs under the pointer *\/$/;"	m	struct:prefData
resetAbsLineNum	textDisp.c	/^static void resetAbsLineNum(textDisp *textD)$/;"	f	file:
resetClipRectangles	textDisp.c	/^static void resetClipRectangles(textDisp *textD)$/;"	f	file:
resetFindTabGroup	search.c	/^static void resetFindTabGroup(WindowInfo *window)$/;"	f	file:
resetReplaceTabGroup	search.c	/^static void resetReplaceTabGroup(WindowInfo *window)$/;"	f	file:
resize	text.c	/^static void resize(TextWidget w)$/;"	f	file:
resources	text.c	/^static XtResource resources[] = {$/;"	v	file:
restoreCB	highlightData.c	/^static void restoreCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
restoreCB	smartIndent.c	/^static void restoreCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
restoreContext	interpret.c	/^static void restoreContext(RestartData *context)$/;"	f	file:
restoresToSaved	nedit.h	/^    char	restoresToSaved;	\/* flag to indicate undoing this$/;"	m	struct:_UndoInfo
retGlobalSyms	macro.c	/^enum retGlobalSyms {STRING_DIALOG_BUTTON, SEARCH_END, READ_STATUS,$/;"	g	file:
returnNoVal	interpret.c	/^static int returnNoVal(void)$/;"	f	file:
returnVal	interpret.c	/^static int returnVal(void)$/;"	f	file:
returnValOrNone	interpret.c	/^static int returnValOrNone(int valOnStack)$/;"	f	file:
revertAP	menu.c	/^static void revertAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
revertDialogAP	menu.c	/^static void revertDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
right	rbTree.h	/^    struct rbTreeNode *right;  \/* right child *\/$/;"	m	struct:rbTreeNode
rightPos	shell.c	/^    int leftPos, rightPos;$/;"	m	struct:
rotateLeft	rbTree.c	/^static void rotateLeft(rbTreeNode *x, rbTreeNode **root)$/;"	f	file:
rotateRight	rbTree.c	/^static void rotateRight(rbTreeNode *x, rbTreeNode **root)$/;"	f	file:
rows	textP.h	/^    int rows, columns;$/;"	m	struct:_TextPart
runMacro	macro.c	/^static void runMacro(WindowInfo *window, Program *prog)$/;"	f	file:
runWindow	interpret.h	/^    WindowInfo *runWindow;$/;"	m	struct:
sameOutBtn	userCmds.c	/^    Widget repInpBtn, sameOutBtn, dlogOutBtn, winOutBtn, dlogShell;$/;"	m	struct:
sameOutCB	userCmds.c	/^static void sameOutCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
saveAP	menu.c	/^static void saveAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
saveAsAP	menu.c	/^static void saveAsAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
saveAsDialogAP	menu.c	/^static void saveAsDialogAP(Widget w, XEvent *event, String *args,$/;"	f	file:
saveContext	interpret.c	/^static void saveContext(RestartData *context)$/;"	f	file:
saveFirst	userCmds.c	/^    char saveFirst;$/;"	m	struct:
saveFirstBtn	userCmds.c	/^    Widget nameTextW, accTextW, mneTextW, cmdTextW, saveFirstBtn;$/;"	m	struct:
saveLastDefItem	nedit.h	/^    Widget	saveLastDefItem;$/;"	m	struct:_WindowInfo
saveLastItem	nedit.h	/^    Widget	saveLastItem;$/;"	m	struct:_WindowInfo
saveOldVersion	nedit.h	/^    Boolean	saveOldVersion;		\/* keep old version in filename.bck *\/$/;"	m	struct:_WindowInfo
saveOldVersion	preferences.c	/^    int saveOldVersion;		\/* whether to preserve a copy of last version *\/$/;"	m	struct:prefData
savePrefCB	menu.c	/^static void savePrefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
saveSearchHistory	search.c	/^static void saveSearchHistory(char *searchString, char *replaceString,$/;"	f	file:
saveYourselfCB	window.c	/^static void saveYourselfCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
scrollDownAP	text.c	/^static void scrollDownAP(Widget w, XEvent *event, String *args,$/;"	f	file:
scrollLeftAP	text.c	/^static void scrollLeftAP(Widget w, XEvent *event, String *args,$/;"	f	file:
scrollRightAP	text.c	/^static void scrollRightAP(Widget w, XEvent *event, String *args,$/;"	f	file:
scrollToLineAP	text.c	/^static void scrollToLineAP(Widget w, XEvent *event, String *args,$/;"	f	file:
scrollUpAP	text.c	/^static void scrollUpAP(Widget w, XEvent *event, String *args,$/;"	f	file:
searchBackward	textBuf.c	/^static int searchBackward(textBuffer *buf, int startPos, char searchChar,$/;"	f	file:
searchCaseSenseCB	menu.c	/^static void searchCaseSenseCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchCaseSenseDefItem	nedit.h	/^    Widget	searchCaseSenseDefItem;$/;"	m	struct:_WindowInfo
searchCaseSenseWordCB	menu.c	/^static void searchCaseSenseWordCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchCaseSenseWordDefItem	nedit.h	/^    Widget	searchCaseSenseWordDefItem;$/;"	m	struct:_WindowInfo
searchDirection	menu.c	/^static int searchDirection(int ignoreArgs, String *args, Cardinal *nArgs)$/;"	f	file:
searchDirection	tags.c	/^enum searchDirection {FORWARD, BACKWARD};$/;"	g	file:
searchDlogs	preferences.c	/^    int searchDlogs;		\/* whether to show explanatory search dialogs *\/$/;"	m	struct:prefData
searchDlogsDefCB	menu.c	/^static void searchDlogsDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchDlogsDefItem	nedit.h	/^    Widget	searchDlogsDefItem;$/;"	m	struct:_WindowInfo
searchForward	textBuf.c	/^static int searchForward(textBuffer *buf, int startPos, char searchChar,$/;"	f	file:
searchHelpAgainCB	help.c	/^static void searchHelpAgainCB(Widget w, XtPointer clientData,$/;"	f	file:
searchHelpCB	help.c	/^static void searchHelpCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
searchHelpText	help.c	/^static void searchHelpText(Widget parent, int parentTopic, const char *searchFor,$/;"	f	file:
searchKeepDialogs	menu.c	/^static int searchKeepDialogs(int ignoreArgs, String *args, Cardinal *nArgs)$/;"	f	file:
searchLiteral	search.c	/^static int searchLiteral(const char *string, const char *searchString, int caseSense, $/;"	f	file:
searchLiteralCB	menu.c	/^static void searchLiteralCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchLiteralDefItem	nedit.h	/^    Widget	searchLiteralDefItem;$/;"	m	struct:_WindowInfo
searchLiteralWord	search.c	/^static int searchLiteralWord(const char *string, const char *searchString, int caseSense, $/;"	f	file:
searchLiteralWordCB	menu.c	/^static void searchLiteralWordCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchLiteralWordDefItem	nedit.h	/^    Widget	searchLiteralWordDefItem;$/;"	m	struct:_WindowInfo
searchMS	macro.c	/^static int searchMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
searchMatchesSelection	search.c	/^static int searchMatchesSelection(WindowInfo *window, char *searchString,$/;"	f	file:
searchMethod	preferences.c	/^    int searchMethod;		\/* initial search method as a text string *\/$/;"	m	struct:prefData
searchRegex	search.c	/^static int searchRegex(const char *string, const char *searchString, int direction,$/;"	f	file:
searchRegexCB	menu.c	/^static void searchRegexCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchRegexDefItem	nedit.h	/^    Widget	searchRegexDefItem;$/;"	m	struct:_WindowInfo
searchRegexNoCaseCB	menu.c	/^static void searchRegexNoCaseCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchRegexNoCaseDefItem	nedit.h	/^    Widget	searchRegexNoCaseDefItem;$/;"	m	struct:_WindowInfo
searchString	tags.h	/^    const char *searchString;$/;"	m	struct:_tag
searchStringMS	macro.c	/^static int searchStringMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
searchType	menu.c	/^static int searchType(int ignoreArgs, String *args, Cardinal *nArgs)$/;"	f	file:
searchType	search.c	/^    int searchType;$/;"	m	struct:
searchTypeArg	search.c	/^static char *searchTypeArg(int searchType)$/;"	f	file:
searchWrap	menu.c	/^static int searchWrap(int ignoreArgs, String *args, Cardinal *nArgs)$/;"	f	file:
searchWrap	search.c	/^    int searchWrap;$/;"	m	struct:
searchWrapArg	search.c	/^static char *searchWrapArg(int searchWrap)$/;"	f	file:
searchWrapBeep	preferences.c	/^    int searchWrapBeep;     	\/* 1=beep when search restarts at begin\/end *\/$/;"	m	struct:prefData
searchWraps	preferences.c	/^    int searchWraps;	\/* whether to attempt search again if reach bof or eof *\/$/;"	m	struct:prefData
searchWrapsDefCB	menu.c	/^static void searchWrapsDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
searchWrapsDefItem	nedit.h	/^    Widget	searchWrapsDefItem;$/;"	m	struct:_WindowInfo
secondary	textBuf.h	/^    selection secondary;$/;"	m	struct:_textBuffer
secondaryAdjustAP	text.c	/^static void secondaryAdjustAP(Widget w, XEvent *event, String *args,$/;"	f	file:
secondaryOrDragAdjustAP	text.c	/^static void secondaryOrDragAdjustAP(Widget w, XEvent *event, String *args,$/;"	f	file:
secondaryOrDragStartAP	text.c	/^static void secondaryOrDragStartAP(Widget w, XEvent *event, String *args,$/;"	f	file:
secondaryStartAP	text.c	/^static void secondaryStartAP(Widget w, XEvent *event, String *args,$/;"	f	file:
sel	nedit.h	/^    selection sel;$/;"	m	struct:
selAllAP	menu.c	/^static void selAllAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
selInpBtn	userCmds.c	/^    Widget loadAfterBtn, selInpBtn, winInpBtn, eitherInpBtn, noInpBtn;$/;"	m	struct:
selectAllAP	text.c	/^static void selectAllAP(Widget w, XEvent *event, String *args,$/;"	f	file:
selectBGGC	textDisp.h	/^    GC selectBGGC, highlightBGGC;	\/* GCs for erasing text *\/$/;"	m	struct:_textDisp
selectBGPixel	textDisp.h	/^    Pixel bgPixel, selectBGPixel;   	\/* Background colors *\/$/;"	m	struct:_textDisp
selectBGPixel	textP.h	/^    Pixel selectFGPixel, selectBGPixel, highlightFGPixel, highlightBGPixel;$/;"	m	struct:_TextPart
selectFGPixel	textP.h	/^    Pixel selectFGPixel, selectBGPixel, highlightFGPixel, highlightBGPixel;$/;"	m	struct:_TextPart
selectGC	textDisp.h	/^    GC gc, selectGC, highlightGC;	\/* GCs for drawing text *\/$/;"	m	struct:_textDisp
selectLine	text.c	/^static void selectLine(Widget w)$/;"	f	file:
selectMS	macro.c	/^static int selectMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
selectNotifyActions	textSel.c	/^enum selectNotifyActions {UNSELECT_SECONDARY, REMOVE_SECONDARY,$/;"	g	file:
selectNotifyEH	textSel.c	/^static void selectNotifyEH(Widget w, XtPointer data, XEvent *event,$/;"	f	file:
selectNotifyInfo	textSel.c	/^} selectNotifyInfo;$/;"	t	file:
selectNotifyTimerProc	textSel.c	/^static void selectNotifyTimerProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
selectRectangleMS	macro.c	/^static int selectRectangleMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
selectToMatchingAP	menu.c	/^static void selectToMatchingAP(Widget w, XEvent *event, String *args,$/;"	f	file:
selectWord	text.c	/^static void selectWord(Widget w, int pointerX)$/;"	f	file:
selected	textBuf.h	/^    char selected;$/;"	m	struct:
selectedSearchCB	search.c	/^static void selectedSearchCB(Widget w, XtPointer callData, Atom *selection,$/;"	f	file:
selection	search.c	/^    char* selection;$/;"	m	struct:_SelectionInfo
selection	textBuf.h	/^} selection;$/;"	t
selectionEndMV	macro.c	/^static int selectionEndMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
selectionLeftMV	macro.c	/^static int selectionLeftMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
selectionOwner	textP.h	/^    int selectionOwner;			\/* True if widget owns the selection *\/$/;"	m	struct:_TextPart
selectionRightMV	macro.c	/^static int selectionRightMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
selectionSpansMultipleLines	search.c	/^static int selectionSpansMultipleLines(WindowInfo *window)$/;"	f	file:
selectionStartMV	macro.c	/^static int selectionStartMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
selfInsertAP	text.c	/^static void selfInsertAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
sendSecondary	textSel.c	/^static void sendSecondary(Widget w, Time time, Atom sel, int action,$/;"	f	file:
serverCmd	nc.c	/^    char serverCmd[MAXPATHLEN];$/;"	m	struct:
serverName	nc.c	/^    char serverName[MAXPATHLEN];$/;"	m	struct:
serverName	preferences.c	/^    char serverName[MAXPATHLEN];\/* server name for multiple servers per disp. *\/$/;"	m	struct:prefData
serverNameMV	macro.c	/^static int serverNameMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
setAutoIndentAP	menu.c	/^static void setAutoIndentAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setCursorPosMS	macro.c	/^static int setCursorPosMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
setDialogDataCB	userCmds.c	/^static void setDialogDataCB(void *item, void *cbArg)    $/;"	f	file:
setDisplayedCB	highlightData.c	/^static void setDisplayedCB(void *item, void *cbArg)$/;"	f	file:
setEmTabDistAP	menu.c	/^static void setEmTabDistAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setFontsAP	menu.c	/^static void setFontsAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setFormatCB	file.c	/^static void setFormatCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
setHighlightSyntaxAP	menu.c	/^static void setHighlightSyntaxAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setIncrementalBackupAP	menu.c	/^static void setIncrementalBackupAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setIncrementalSearchLineAP	menu.c	/^static void setIncrementalSearchLineAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setIntPref	preferences.c	/^static void setIntPref(int *prefDataField, int newValue)$/;"	f	file:
setLangModeCB	preferences.c	/^static void setLangModeCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
setLanguageModeAP	menu.c	/^static void setLanguageModeAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setLockedAP	menu.c	/^static void setLockedAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setMakeBackupCopyAP	menu.c	/^static void setMakeBackupCopyAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setOvertypeModeAP	menu.c	/^static void setOvertypeModeAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setPaneDesiredHeight	window.c	/^static void setPaneDesiredHeight(Widget w, int height)$/;"	f	file:
setPaneMinHeight	window.c	/^static void setPaneMinHeight(Widget w, int min)$/;"	f	file:
setRectSelect	textBuf.c	/^static void setRectSelect(selection *sel, int start, int end,$/;"	f	file:
setScroll	textDisp.c	/^static void setScroll(textDisp *textD, int topLineNum, int horizOffset,$/;"	f	file:
setSelection	textBuf.c	/^static void setSelection(selection *sel, int start, int end)$/;"	f	file:
setShowLineNumbersAP	menu.c	/^static void setShowLineNumbersAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setShowMatchingAP	menu.c	/^static void setShowMatchingAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setSmartIndentDialogData	smartIndent.c	/^static void setSmartIndentDialogData(smartIndentRec *is)$/;"	f	file:
setStatisticsLineAP	menu.c	/^static void setStatisticsLineAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setStringPref	preferences.c	/^static void setStringPref(char *prefDataField, const char *newValue)$/;"	f	file:
setStyleByName	highlightData.c	/^static void setStyleByName(char *style)$/;"	f	file:
setStyleMenu	highlightData.c	/^static void setStyleMenu(char *styleName)$/;"	f	file:
setTabDistAP	menu.c	/^static void setTabDistAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setTag	tags.c	/^static void setTag(tag *t, char *name, char *file, char *searchString)$/;"	f	file:
setTextField	search.c	/^static void setTextField(WindowInfo *window, Time time, Widget textField)$/;"	f	file:
setUseTabsAP	menu.c	/^static void setUseTabsAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setValues	text.c	/^static Boolean setValues(TextWidget current, TextWidget request,$/;"	f	file:
setWindowSizeDefault	menu.c	/^static void setWindowSizeDefault(int rows, int cols)$/;"	f	file:
setWrapMarginAP	menu.c	/^static void setWrapMarginAP(Widget w, XEvent *event, String *args,$/;"	f	file:
setWrapTextAP	menu.c	/^static void setWrapTextAP(Widget w, XEvent *event, String *args,$/;"	f	file:
shell	highlightData.c	/^    Widget shell;$/;"	m	struct:
shell	macro.c	/^    Widget shell, repeatText, lastCmdToggle;$/;"	m	struct:
shell	nedit.h	/^    Widget	shell;			\/* application shell of window *\/$/;"	m	struct:_WindowInfo
shell	preferences.c	/^    Widget shell;$/;"	m	struct:
shell	preferences.c	/^    char shell[MAXPATHLEN];	\/* shell to use for executing commands *\/$/;"	m	struct:prefData
shell	smartIndent.c	/^    Widget shell;$/;"	m	struct:
shellCmdData	nedit.h	/^    void    	*shellCmdData;  	\/* when a shell command is executing,$/;"	m	struct:_WindowInfo
shellCmdInfo	shell.c	/^} shellCmdInfo;$/;"	t	file:
shellCmdMS	macro.c	/^static int shellCmdMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
shellCmds	preferences.c	/^    char *shellCmds;$/;"	m	struct:
shellDefCB	menu.c	/^static void shellDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
shellFilterAP	menu.c	/^static void shellFilterAP(Widget w, XEvent *event, String *args,$/;"	f	file:
shellMenuAP	menu.c	/^static void shellMenuAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
shellMenuCB	userCmds.c	/^static void shellMenuCB(Widget w, WindowInfo *window, XtPointer callData) $/;"	f	file:
shellMenuPane	nedit.h	/^    Widget	shellMenuPane;$/;"	m	struct:_WindowInfo
shiftKeyToDir	menu.c	/^static char **shiftKeyToDir(XtPointer callData)$/;"	f	file:
shiftLeftAP	menu.c	/^static void shiftLeftAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
shiftLeftCB	menu.c	/^static void shiftLeftCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
shiftLeftTabAP	menu.c	/^static void shiftLeftTabAP(Widget w, XEvent *event, String *args,$/;"	f	file:
shiftLineLeft	shift.c	/^static char *shiftLineLeft(char *line, int lineLen, int tabDist, int nChars)$/;"	f	file:
shiftLineRight	shift.c	/^static char *shiftLineRight(char *line, int lineLen, int tabsAllowed,$/;"	f	file:
shiftRect	shift.c	/^static void shiftRect(WindowInfo *window, int direction, int byTab,$/;"	f	file:
shiftRightAP	menu.c	/^static void shiftRightAP(Widget w, XEvent *event, String *args, Cardinal *nArgs)$/;"	f	file:
shiftRightCB	menu.c	/^static void shiftRightCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
shiftRightTabAP	menu.c	/^static void shiftRightTabAP(Widget w, XEvent *event, String *args,$/;"	f	file:
shortMenus	preferences.c	/^    int shortMenus; 	    	\/* short menu mode *\/$/;"	m	struct:prefData
shortMenusCB	menu.c	/^static void shortMenusCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
shortMenusDefItem	nedit.h	/^    Widget	shortMenusDefItem;$/;"	m	struct:_WindowInfo
shortPrefAskDefault	menu.c	/^static int shortPrefAskDefault(Widget parent, Widget w, const char *settingName)$/;"	f	file:
shortPrefToDefault	preferences.c	/^static int shortPrefToDefault(Widget parent, char *settingName, int *setDefault)$/;"	f	file:
shortcut_escape	regularExp.c	/^static unsigned char * shortcut_escape ($/;"	f	file:
showAllTagsDefCB	menu.c	/^static void showAllTagsDefCB(Widget parent, XtPointer client_data, XtPointer call_data)$/;"	f	file:
showFontStatus	preferences.c	/^static int showFontStatus(fontDialog *fd, Widget fontTextFieldW,$/;"	f	file:
showISearch	window.c	/^static void showISearch(WindowInfo *window, int state)$/;"	f	file:
showISearchLine	nedit.h	/^    Boolean 	showISearchLine;    	\/* is incr. search line to be shown *\/$/;"	m	struct:_WindowInfo
showLineNumbers	nedit.h	/^    Boolean 	showLineNumbers;    	\/* is the line number display shown *\/$/;"	m	struct:_WindowInfo
showLineNumbersMV	macro.c	/^static int showLineNumbersMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
showMatchingDelimitCB	menu.c	/^static void showMatchingDelimitCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
showMatchingDelimitDefCB	menu.c	/^static void showMatchingDelimitDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
showMatchingDelimitDefItem	nedit.h	/^    Widget	showMatchingDelimitDefItem;$/;"	m	struct:_WindowInfo
showMatchingDelimitItem	nedit.h	/^    Widget	showMatchingDelimitItem;$/;"	m	struct:_WindowInfo
showMatchingMV	macro.c	/^static int showMatchingMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
showMatchingOffCB	menu.c	/^static void showMatchingOffCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
showMatchingOffDefCB	menu.c	/^static void showMatchingOffDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
showMatchingOffDefItem	nedit.h	/^    Widget	showMatchingOffDefItem;$/;"	m	struct:_WindowInfo
showMatchingOffItem	nedit.h	/^    Widget	showMatchingOffItem;$/;"	m	struct:_WindowInfo
showMatchingRangeCB	menu.c	/^static void showMatchingRangeCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
showMatchingRangeDefCB	menu.c	/^static void showMatchingRangeDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
showMatchingRangeDefItem	nedit.h	/^    Widget	showMatchingRangeDefItem;$/;"	m	struct:_WindowInfo
showMatchingRangeItem	nedit.h	/^    Widget	showMatchingRangeItem;$/;"	m	struct:_WindowInfo
showMatchingStyle	nedit.h	/^    char 	showMatchingStyle; 	\/* How to show matching parens:$/;"	m	struct:_WindowInfo
showMatchingStyle	nedit.h	/^enum showMatchingStyle {NO_FLASH, FLASH_DELIMIT, FLASH_RANGE};$/;"	g
showMatchingStyle	preferences.c	/^    int showMatchingStyle;	\/* how to flash matching parenthesis *\/$/;"	m	struct:prefData
showPathInWindowsMenu	nedit.h	/^    Boolean 	showPathInWindowsMenu; 	\/* is the path shown in windows menu *\/$/;"	m	struct:_WindowInfo
showStats	nedit.h	/^    Boolean	showStats;		\/* is stats line supposed to be shown *\/$/;"	m	struct:_WindowInfo
showStats	window.c	/^static void showStats(WindowInfo *window, int state)$/;"	f	file:
showStatsForm	window.c	/^static void showStatsForm(WindowInfo *window, int state)$/;"	f	file:
siParseError	smartIndent.c	/^static int siParseError(char *stringStart, char *stoppedAt, char *message)$/;"	f	file:
simpleInsertAtCursor	text.c	/^static void simpleInsertAtCursor(Widget w, char *chars, XEvent *event,$/;"	f	file:
simpleW	highlightData.c	/^    Widget simpleW;$/;"	m	struct:
size24x80CB	menu.c	/^static void size24x80CB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
size24x80DefItem	nedit.h	/^    Widget	size24x80DefItem;$/;"	m	struct:_WindowInfo
size40x80CB	menu.c	/^static void size40x80CB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
size40x80DefItem	nedit.h	/^    Widget	size40x80DefItem;$/;"	m	struct:_WindowInfo
size60x80CB	menu.c	/^static void size60x80CB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
size60x80DefItem	nedit.h	/^    Widget	size60x80DefItem;$/;"	m	struct:_WindowInfo
size80x80CB	menu.c	/^static void size80x80CB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
size80x80DefItem	nedit.h	/^    Widget	size80x80DefItem;$/;"	m	struct:_WindowInfo
sizeCancelCB	preferences.c	/^static void sizeCancelCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
sizeCustomCB	menu.c	/^static void sizeCustomCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
sizeCustomDefItem	nedit.h	/^    Widget	sizeCustomDefItem;$/;"	m	struct:_WindowInfo
sizeOKCB	preferences.c	/^static void sizeOKCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
smartIndent	preferences.c	/^    char *smartIndent;$/;"	m	struct:
smartIndent	textP.h	/^    Boolean smartIndent;$/;"	m	struct:_TextPart
smartIndentCB	menu.c	/^static void smartIndentCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
smartIndentCB	textP.h	/^    XtCallbackList smartIndentCB;$/;"	m	struct:_TextPart
smartIndentCBStruct	text.h	/^} smartIndentCBStruct;$/;"	t
smartIndentCallbackReasons	text.h	/^enum smartIndentCallbackReasons {NEWLINE_INDENT_NEEDED, CHAR_TYPED};$/;"	g
smartIndentCommon	preferences.c	/^    char *smartIndentCommon;$/;"	m	struct:
smartIndentData	nedit.h	/^    void    	*smartIndentData;   	\/* compiled macros for smart indent *\/$/;"	m	struct:_WindowInfo
smartIndentDefCB	menu.c	/^static void smartIndentDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
smartIndentDefItem	nedit.h	/^    Widget	smartIndentDefItem;$/;"	m	struct:_WindowInfo
smartIndentItem	nedit.h	/^    Widget	smartIndentItem;$/;"	m	struct:_WindowInfo
smartIndentRec	smartIndent.c	/^} smartIndentRec;$/;"	t	file:
smartIndentW	preferences.c	/^    Widget smartIndentW;$/;"	m	struct:
smartMacrosDefCB	menu.c	/^static void smartMacrosDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
smartTags	preferences.c	/^    int smartTags;  	    	\/* look for tag in current window first *\/$/;"	m	struct:prefData
smartTagsDefCB	menu.c	/^static void smartTagsDefCB(Widget parent, XtPointer client_data, XtPointer call_data)$/;"	f	file:
smartTagsDefItem	nedit.h	/^    Widget	smartTagsDefItem;$/;"	m	struct:_WindowInfo
sortOpenPrevDefCB	menu.c	/^static void sortOpenPrevDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
sortOpenPrevDefItem	nedit.h	/^    Widget	sortOpenPrevDefItem;$/;"	m	struct:_WindowInfo
sortOpenPrevMenu	preferences.c	/^    int sortOpenPrevMenu;   	\/* whether to sort the "Open Previous" menu *\/$/;"	m	struct:prefData
spanBackward	text.c	/^static int spanBackward(textBuffer *buf, int startPos, char *searchChars, int$/;"	f	file:
spanForward	text.c	/^static int spanForward(textBuffer *buf, int startPos, char *searchChars,$/;"	f	file:
spliceString	preferences.c	/^static void spliceString(char **intoString, char *insertString, char *atExpr)$/;"	f	file:
splitMS	macro.c	/^static int splitMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
splitPane	nedit.h	/^    Widget	splitPane;		\/* paned win. for splitting text area *\/$/;"	m	struct:_WindowInfo
splitWindowAP	menu.c	/^static void splitWindowAP(Widget w, XEvent *event, String *args,$/;"	f	file:
splitWindowItem	nedit.h	/^    Widget	splitWindowItem;$/;"	m	struct:_WindowInfo
stack	interpret.h	/^    DataValue *stack;$/;"	m	struct:
stackP	interpret.h	/^    DataValue *stackP;$/;"	m	struct:
start	textBuf.h	/^    int start;$/;"	m	struct:
startIncrFindAP	menu.c	/^static void startIncrFindAP(Widget w, XEvent *event, String *args,$/;"	f	file:
startLbl	highlightData.c	/^    Widget startLbl;$/;"	m	struct:
startOfWord	text.c	/^static int startOfWord(TextWidget w, int pos)$/;"	f	file:
startPos	nedit.h	/^    int		startPos;$/;"	m	struct:_UndoInfo
startPos	text.h	/^    int startPos;$/;"	m	struct:
startRE	export.c	/^    regexp *startRE;$/;"	m	struct:_highlightDataRec
startRE	highlight.c	/^    regexp *startRE;$/;"	m	struct:_highlightDataRec
startRE	highlight.h	/^    char *startRE;$/;"	m	struct:
startServer	nc.c	/^static void startServer(const char *message, const char *commandLineArgs)$/;"	f	file:
startSubexprs	export.c	/^    signed char startSubexprs[NSUBEXP+1];$/;"	m	struct:_highlightDataRec
startSubexprs	highlight.c	/^    signed char startSubexprs[NSUBEXP+1];$/;"	m	struct:_highlightDataRec
startW	highlightData.c	/^    Widget startW;$/;"	m	struct:
startp	regularExp.h	/^   char *startp [NSUBEXP];  \/* Captured text starting locations. *\/$/;"	m	struct:regexp
statisticsLineMV	macro.c	/^static int statisticsLineMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
statsCB	menu.c	/^static void statsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
statsLine	nedit.h	/^    Widget	statsLine;		\/* file stats information display *\/$/;"	m	struct:_WindowInfo
statsLine	preferences.c	/^    int statsLine;		\/* whether to show the statistics line *\/$/;"	m	struct:prefData
statsLineDefCB	menu.c	/^static void statsLineDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
statsLineDefItem	nedit.h	/^    Widget	statsLineDefItem;$/;"	m	struct:_WindowInfo
statsLineItem	nedit.h	/^    Widget	statsLineItem;$/;"	m	struct:_WindowInfo
stdOpenDialog	preferences.c	/^    int stdOpenDialog;		\/* w. to retain redundant text field in Open *\/$/;"	m	struct:prefData
stderrFD	shell.c	/^    int stdinFD, stdoutFD, stderrFD;$/;"	m	struct:
stderrInputID	shell.c	/^    XtInputId stdinInputID, stdoutInputID, stderrInputID;$/;"	m	struct:
stderrReadProc	shell.c	/^static void stderrReadProc(XtPointer clientData, int *source, XtInputId *id)$/;"	f	file:
stdinFD	shell.c	/^    int stdinFD, stdoutFD, stderrFD;$/;"	m	struct:
stdinInputID	shell.c	/^    XtInputId stdinInputID, stdoutInputID, stderrInputID;$/;"	m	struct:
stdinWriteProc	shell.c	/^static void stdinWriteProc(XtPointer clientData, int *source, XtInputId *id)$/;"	f	file:
stdoutFD	shell.c	/^    int stdinFD, stdoutFD, stderrFD;$/;"	m	struct:
stdoutInputID	shell.c	/^    XtInputId stdinInputID, stdoutInputID, stderrInputID;$/;"	m	struct:
stdoutReadProc	shell.c	/^static void stdoutReadProc(XtPointer clientData, int *source, XtInputId *id)$/;"	f	file:
stickyCaseSenseBtn	preferences.c	/^    int stickyCaseSenseBtn;     \/* whether Case Word Btn is sticky to Regex Btn *\/$/;"	m	struct:prefData
str	interpret.h	/^        char *str;$/;"	m	union:
str	rbTree.c	/^    char *str;$/;"	m	struct:TestNode
strCaseCmp	macro.c	/^static int strCaseCmp(char *str1, char *str2)$/;"	f	file:
strCaseCmp	menu.c	/^static int strCaseCmp(const char *str1, const char *str2)$/;"	f	file:
strCaseCmp	text.c	/^static int strCaseCmp(char *str1, char *str2)$/;"	f	file:
string	tags.c	/^    char       *string;$/;"	m	struct:rcs
stringCompareMS	macro.c	/^static int stringCompareMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
stringDialogBtnCB	macro.c	/^static void stringDialogBtnCB(Widget w, XtPointer clientData,$/;"	f	file:
stringDialogCloseCB	macro.c	/^static void stringDialogCloseCB(Widget w, XtPointer clientData,$/;"	f	file:
stringDialogMS	macro.c	/^static int stringDialogMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
stringToClipboardMS	macro.c	/^static int stringToClipboardMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
stringToNum	interpret.c	/^static int stringToNum(const char *string, int *number)$/;"	f	file:
stringWidth	textDisp.c	/^static int stringWidth(textDisp *textD, char *string, int length, int style)$/;"	f	file:
style	export.c	/^    char style;$/;"	m	struct:_highlightDataRec
style	highlight.c	/^    char style;$/;"	m	struct:_highlightDataRec
style	highlight.h	/^    char *style;$/;"	m	struct:
styleBuffer	export.c	/^    textBuffer *styleBuffer;$/;"	m	struct:
styleBuffer	highlight.c	/^    textBuffer *styleBuffer;$/;"	m	struct:
styleBuffer	textDisp.h	/^    textBuffer *styleBuffer;   	    	\/* Optional parallel buffer containing$/;"	m	struct:_textDisp
styleDialogCB	highlightData.c	/^static void styleDialogCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
styleError	highlightData.c	/^static int styleError(const char *stringStart, const char *stoppedAt, char *message)$/;"	f	file:
styleGC	textDisp.h	/^    GC styleGC;     	    	    	\/* GC with color and font unspecified$/;"	m	struct:_textDisp
styleOfPos	textDisp.c	/^static int styleOfPos(textDisp *textD, int lineStartPos,$/;"	f	file:
styleOptMenu	highlightData.c	/^    Widget styleOptMenu;$/;"	m	struct:
stylePulldown	highlightData.c	/^    Widget stylePulldown;$/;"	m	struct:
styleTable	export.c	/^    styleTableEntry *styleTable;$/;"	m	struct:
styleTable	highlight.c	/^    styleTableEntry *styleTable;$/;"	m	struct:
styleTable	textDisp.h	/^    styleTableEntry *styleTable;    	\/* Table of fonts and colors for$/;"	m	struct:_textDisp
styleTableEntry	textDisp.h	/^} styleTableEntry;$/;"	t
styles	preferences.c	/^    char *styles;$/;"	m	struct:
stylesDefCB	menu.c	/^static void stylesDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
subPatW	highlightData.c	/^    Widget subPatW;$/;"	m	struct:
subPatternOf	highlight.h	/^    char *subPatternOf;$/;"	m	struct:
subPatternRE	export.c	/^    regexp *subPatternRE;$/;"	m	struct:_highlightDataRec
subPatternRE	highlight.c	/^    regexp *subPatternRE;$/;"	m	struct:_highlightDataRec
subPatterns	export.c	/^    struct _highlightDataRec **subPatterns;$/;"	m	struct:_highlightDataRec
subPatterns	highlight.c	/^    struct _highlightDataRec **subPatterns;$/;"	m	struct:_highlightDataRec
subsChars	textBuf.c	/^static void subsChars(char *string, int length, char fromChar, char toChar)$/;"	f	file:
subscriptSepMV	macro.c	/^static int subscriptSepMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
substitutePercent	shell.c	/^static int substitutePercent(char *outStr, char *inStr, char *subsStr,$/;"	f	file:
substringMS	macro.c	/^static int substringMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
subtract	interpret.c	/^static int subtract(void)$/;"	f	file:
sym	parse.c	/^    Symbol *sym;$/;"	m	union:
symTypes	interpret.h	/^enum symTypes {CONST_SYM, GLOBAL_SYM, LOCAL_SYM, ARG_SYM, PROC_VALUE_SYM,$/;"	g
tPrintMS	macro.c	/^static int tPrintMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
tabDist	preferences.c	/^    int tabDist;		\/* number of characters between tab stops *\/$/;"	m	struct:prefData
tabDist	preferences.c	/^    int tabDist;	$/;"	m	struct:
tabDist	textBuf.h	/^    int tabDist;		\/* equiv. number of characters in a tab *\/$/;"	m	struct:_textBuffer
tabDistMV	macro.c	/^static int tabDistMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
tabW	preferences.c	/^    Widget tabW;$/;"	m	struct:
tabsCB	menu.c	/^static void tabsCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
tabsCancelCB	preferences.c	/^static void tabsCancelCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
tabsDefCB	menu.c	/^static void tabsDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
tabsHelpCB	preferences.c	/^static void tabsHelpCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
tabsOKCB	preferences.c	/^static void tabsOKCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
tag	interpret.h	/^    char tag;$/;"	m	struct:
tag	tags.h	/^} tag;$/;"	t
tagFile	preferences.c	/^    char tagFile[MAXPATHLEN];	\/* name of tags file to look for at startup *\/$/;"	m	struct:prefData
tagFile	tags.h	/^} tagFile;$/;"	t
tagFiles	tags.c	/^static char tagFiles[MAXDUPTAGS][MAXPATHLEN];$/;"	v	file:
tagMark	tags.c	/^static char *tagMark;$/;"	v	file:
tagName	tags.c	/^static char *tagName;$/;"	v	file:
tagSearch	tags.c	/^static char tagSearch[MAXDUPTAGS][MAXPATHLEN];$/;"	v	file:
tail	regularExp.c	/^static void tail (unsigned char *search_from, unsigned char *point_to) {$/;"	f	file:
talloc	tags.c	/^    int talloc, tshar, tgiveup, tbytes, tbyteshared;$/;"	m	struct:rcs_stats
tbytes	tags.c	/^    int talloc, tshar, tgiveup, tbytes, tbyteshared;$/;"	m	struct:rcs_stats
tbyteshared	tags.c	/^    int talloc, tshar, tgiveup, tbytes, tbyteshared;$/;"	m	struct:rcs_stats
text	smartIndent.c	/^    Widget text;$/;"	m	struct:
text	textP.h	/^   TextPart        text;$/;"	m	struct:_TextRec
textArea	nedit.h	/^    Widget	textArea;		\/* the first text editing area widget *\/$/;"	m	struct:_WindowInfo
textBuffer	textBuf.h	/^} textBuffer;$/;"	t
textCAutoIndent	text.h	63;"	d
textCAutoShowInsertPos	text.h	37;"	d
textCAutoWrap	text.h	57;"	d
textCAutoWrapPastedText	text.h	39;"	d
textCBlinkRate	text.h	43;"	d
textCColumns	text.h	11;"	d
textCContinuousWrap	text.h	59;"	d
textCCursorForeground	text.h	25;"	d
textCCursorMovementCallback	text.h	49;"	d
textCDragEndCallback	text.h	53;"	d
textCDragStartCallback	text.h	51;"	d
textCEmulateTabs	text.h	73;"	d
textCFocusCallback	text.h	45;"	d
textCFont	text.h	7;"	d
textCHScrollBar	text.h	31;"	d
textCHeavyCursor	text.h	69;"	d
textCHighlightBackground	text.h	23;"	d
textCHighlightForeground	text.h	21;"	d
textCLineNumCols	text.h	35;"	d
textCLineNumForeground	text.h	27;"	d
textCLosingFocusCallback	text.h	47;"	d
textCMarginHeight	text.h	15;"	d
textCMarginWidth	text.h	13;"	d
textCOverstrike	text.h	67;"	d
textCPendingDelete	text.h	29;"	d
textCReadOnly	text.h	71;"	d
textCRows	text.h	9;"	d
textCSelectBackground	text.h	19;"	d
textCSelectForeground	text.h	17;"	d
textCSmartIndent	text.h	65;"	d
textCSmartIndentCallback	text.h	55;"	d
textCVScrollBar	text.h	33;"	d
textCWordDelimiters	text.h	41;"	d
textCWrapMargin	text.h	61;"	d
textClassRec	text.c	/^TextClassRec textClassRec = {$/;"	v
textCols	preferences.c	/^    int textCols;		\/* initial window width in characters *\/$/;"	m	struct:prefData
textD	textP.h	/^    textDisp *textD;			\/* Pointer to display information *\/$/;"	m	struct:_TextPart
textDisp	textDisp.h	/^} textDisp;$/;"	t
textFieldNonEmpty	search.c	/^static int textFieldNonEmpty(Widget w)$/;"	f	file:
textNautoIndent	text.h	62;"	d
textNautoShowInsertPos	text.h	36;"	d
textNautoWrap	text.h	56;"	d
textNautoWrapPastedText	text.h	38;"	d
textNblinkRate	text.h	42;"	d
textNcolumns	text.h	10;"	d
textNcontinuousWrap	text.h	58;"	d
textNcursorForeground	text.h	24;"	d
textNcursorMovementCallback	text.h	48;"	d
textNdragEndCallback	text.h	52;"	d
textNdragStartCallback	text.h	50;"	d
textNemulateTabs	text.h	72;"	d
textNfocusCallback	text.h	44;"	d
textNfont	text.h	6;"	d
textNhScrollBar	text.h	30;"	d
textNheavyCursor	text.h	68;"	d
textNhighlightBackground	text.h	22;"	d
textNhighlightForeground	text.h	20;"	d
textNlineNumCols	text.h	34;"	d
textNlineNumForeground	text.h	26;"	d
textNlosingFocusCallback	text.h	46;"	d
textNmarginHeight	text.h	14;"	d
textNmarginWidth	text.h	12;"	d
textNoverstrike	text.h	66;"	d
textNpendingDelete	text.h	28;"	d
textNreadOnly	text.h	70;"	d
textNrows	text.h	8;"	d
textNselectBackground	text.h	18;"	d
textNselectForeground	text.h	16;"	d
textNsmartIndent	text.h	64;"	d
textNsmartIndentCallback	text.h	54;"	d
textNvScrollBar	text.h	32;"	d
textNwordDelimiters	text.h	40;"	d
textNwrapMargin	text.h	60;"	d
textPanes	nedit.h	/^    Widget	textPanes[MAX_PANES];	\/* additional ones created on demand *\/$/;"	m	struct:_WindowInfo
textRows	preferences.c	/^    int textRows;		\/* initial window height in characters *\/$/;"	m	struct:prefData
textW	shell.c	/^    Widget textW;$/;"	m	struct:
textWidgetClass	text.c	/^WidgetClass textWidgetClass = (WidgetClass)&textClassRec;$/;"	v
textWidth	textBuf.c	/^static int textWidth(const char *text, int tabDist, char nullSubsChar)$/;"	f	file:
text_class	textP.h	/^    TextClassPart  text_class;$/;"	m	struct:_TextClassRec
tgiveup	tags.c	/^    int talloc, tshar, tgiveup, tbytes, tbyteshared;$/;"	m	struct:rcs_stats
timeStamp	textSel.c	/^    Time timeStamp;$/;"	m	struct:
timeoutProcID	textSel.c	/^    XtIntervalId timeoutProcID;$/;"	m	struct:
toEndToggle	macro.c	/^    Widget inSelToggle, toEndToggle;$/;"	m	struct:
toggleOverstrikeAP	text.c	/^static void toggleOverstrikeAP(Widget w, XEvent *event, String *args,$/;"	f	file:
toggleShortItems	nedit.h	/^    Widget	toggleShortItems[MAX_SHORTENED_ITEMS]; \/* Menu items to be$/;"	m	struct:_WindowInfo
tolowerMS	macro.c	/^static int tolowerMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
tooFewArgsErr	macro.c	/^static int tooFewArgsErr(char **errMsg)$/;"	f	file:
top	textDisp.h	/^    int top, left, width, height, lineNumLeft, lineNumWidth;$/;"	m	struct:_textDisp
topLevelW	highlightData.c	/^    Widget topLevelW;$/;"	m	struct:
topLineMV	macro.c	/^static int topLineMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
topLineNum	textDisp.h	/^    int topLineNum;			\/* Line number of top displayed line$/;"	m	struct:_textDisp
toupperMS	macro.c	/^static int toupperMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
trackModifyRange	textDrag.c	/^static void trackModifyRange(int *rangeStart, int *modRangeEnd,$/;"	f	file:
translatePrefFormats	preferences.c	/^static void translatePrefFormats(int convertOld)$/;"	f	file:
trimUndoList	undo.c	/^static void trimUndoList(WindowInfo *window, int maxLength)$/;"	f	file:
truncateString	shell.c	/^static void truncateString(char *string, int length)$/;"	f	file:
tshar	tags.c	/^    int talloc, tshar, tgiveup, tbytes, tbyteshared;$/;"	m	struct:rcs_stats
type	interpret.h	/^    char type;$/;"	m	struct:SymbolRec
type	nedit.h	/^    int		type;$/;"	m	struct:_UndoInfo
typeTags	interpret.h	/^enum typeTags {NO_TAG, INT_TAG, STRING_TAG, ARRAY_TAG};$/;"	g
underline	textDisp.h	/^    Boolean underline;$/;"	m	struct:
undo	nedit.h	/^    UndoInfo	*undo;			\/* info for undoing last operation *\/$/;"	m	struct:_WindowInfo
undoAP	menu.c	/^static void undoAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
undoItem	nedit.h	/^    Widget	undoItem;$/;"	m	struct:_WindowInfo
undoMemUsed	nedit.h	/^    int		undoMemUsed;		\/* amount of memory (in bytes)$/;"	m	struct:_WindowInfo
undoOpCount	nedit.h	/^    int		undoOpCount;		\/* count of stored undo operations *\/$/;"	m	struct:_WindowInfo
undoTypes	undo.h	/^enum undoTypes {UNDO_NOOP, ONE_CHAR_INSERT, ONE_CHAR_REPLACE, ONE_CHAR_DELETE,$/;"	g
unexpandTabs	textBuf.c	/^static char *unexpandTabs(const char *text, int startIndent, int tabDist,$/;"	f	file:
unfinishedHighlightCB	textDisp.h	/^    	    unfinishedHighlightCB;  	\/*     regions *\/$/;"	m	struct:_textDisp
unfinishedStyle	textDisp.h	/^    char unfinishedStyle;   	    	\/* Style buffer entry which triggers$/;"	m	struct:_textDisp
unfinishedStyleCBProc	textDisp.h	/^typedef void (*unfinishedStyleCBProc)();$/;"	t
unloadTagsAP	menu.c	/^static void unloadTagsAP(Widget w, XEvent *event, String *args, Cardinal *nArgs) $/;"	f	file:
unloadTagsFileCB	menu.c	/^static void unloadTagsFileCB(Widget w, char *name, caddr_t callData)$/;"	f	file:
unloadTagsFileMenuCB	menu.c	/^static void unloadTagsFileMenuCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
unloadTagsMenuItem	nedit.h	/^    Widget  	unloadTagsMenuItem;$/;"	m	struct:_WindowInfo
unloadTagsMenuPane	nedit.h	/^    Widget  	unloadTagsMenuPane;$/;"	m	struct:_WindowInfo
unmanageReplaceDialogs	search.c	/^static void unmanageReplaceDialogs(WindowInfo *window)$/;"	f	file:
unmaskArgvKeywords	nedit.c	/^void unmaskArgvKeywords(int argc, char **argv, char **maskArgs)$/;"	f
upCaseString	search.c	/^static void upCaseString(char *outString, const char *inString)$/;"	f	file:
updateDialogFields	userCmds.c	/^static void updateDialogFields(menuItemRec *f, userCmdDialog *ucd)$/;"	f	file:
updateFonts	preferences.c	/^static void updateFonts(fontDialog *fd)$/;"	f	file:
updateHSList	highlightData.c	/^static int updateHSList(void)$/;"	f	file:
updateHScrollBarRange	textDisp.c	/^static int updateHScrollBarRange(textDisp *textD)$/;"	f	file:
updateHighlightStyleMenu	highlightData.c	/^static void updateHighlightStyleMenu(void)$/;"	f	file:
updateLMList	preferences.c	/^static int updateLMList(void)$/;"	f	file:
updateLabels	highlightData.c	/^static void updateLabels(void)$/;"	f	file:
updateLanguageModeSubmenu	preferences.c	/^static void updateLanguageModeSubmenu(WindowInfo *window)$/;"	f	file:
updateLineStarts	textDisp.c	/^static void updateLineStarts(textDisp *textD, int pos, int charsInserted,$/;"	f	file:
updateMenu	userCmds.c	/^static void updateMenu(WindowInfo *window, int menuType)$/;"	f	file:
updateMenus	userCmds.c	/^static void updateMenus(int menuType)$/;"	f	file:
updatePatternSet	highlightData.c	/^static int updatePatternSet(void)$/;"	f	file:
updatePatternsTo5dot1	preferences.c	/^static void updatePatternsTo5dot1(void)$/;"	f	file:
updatePrevOpenMenu	menu.c	/^static void updatePrevOpenMenu(WindowInfo *window)$/;"	f	file:
updateSelection	textBuf.c	/^static void updateSelection(selection *sel, int pos, int nDeleted,$/;"	f	file:
updateSelections	textBuf.c	/^static void updateSelections(textBuffer *buf, int pos, int nDeleted,$/;"	f	file:
updateSmartIndentCommonData	smartIndent.c	/^static int updateSmartIndentCommonData(void)$/;"	f	file:
updateSmartIndentData	smartIndent.c	/^static int updateSmartIndentData(void)$/;"	f	file:
updateTagsFileMenu	menu.c	/^static void updateTagsFileMenu(WindowInfo *window)$/;"	f	file:
updateVScrollBarRange	textDisp.c	/^static void updateVScrollBarRange(textDisp *textD)$/;"	f	file:
updateWindowHeight	highlight.c	/^static void updateWindowHeight(WindowInfo *window, int oldFontHeight)$/;"	f	file:
updateWindowMenu	menu.c	/^static void updateWindowMenu(const WindowInfo *window)$/;"	f	file:
updateWindowSizeMenu	menu.c	/^static void updateWindowSizeMenu(WindowInfo *win)$/;"	f	file:
updateWindowSizeMenus	menu.c	/^static void updateWindowSizeMenus(void)$/;"	f	file:
uploadFileListItems	search.c	/^static void uploadFileListItems(WindowInfo* window, Bool replace)$/;"	f	file:
usage	tags.c	/^    int         usage;$/;"	m	struct:rcs
useTabs	textBuf.h	/^    int useTabs;		\/* True if buffer routines are allowed to use$/;"	m	struct:_textBuffer
useTabsMV	macro.c	/^static int useTabsMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
userCmdDialog	userCmds.c	/^} userCmdDialog;$/;"	t	file:
vScrollBar	textDisp.h	/^    Widget hScrollBar, vScrollBar;$/;"	m	struct:_textDisp
vScrollBar	textP.h	/^    Widget hScrollBar, vScrollBar;$/;"	m	struct:_TextPart
vScrollCB	textDisp.c	/^static void vScrollCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
val	interpret.h	/^    } val;$/;"	m	struct:
value	interpret.h	/^    DataValue value;$/;"	m	struct:
value	interpret.h	/^    DataValue value;$/;"	m	struct:SymbolRec
visLineLength	textDisp.c	/^static int visLineLength(textDisp *textD, int visLineNum)$/;"	f	file:
visibility	textDisp.h	/^    int visibility;			\/* Window visibility (see XVisibility$/;"	m	struct:_textDisp
visibilityEH	textDisp.c	/^static void visibilityEH(Widget w, XtPointer data, XEvent *event,$/;"	f	file:
w	textDisp.h	/^    Widget w;$/;"	m	struct:_textDisp
warnExit	preferences.c	/^    int warnExit;	    	\/* whether to warn on exit *\/$/;"	m	struct:prefData
warnFileMods	preferences.c	/^    int warnFileMods;	    	\/* " warn user if files externally modified *\/$/;"	m	struct:prefData
wasSelected	nedit.h	/^    int 	wasSelected;		\/* last selection state (for dim\/undim$/;"	m	struct:_WindowInfo
widget	textSel.c	/^    Widget widget;$/;"	m	struct:
width	textDisp.h	/^    int top, left, width, height, lineNumLeft, lineNumWidth;$/;"	m	struct:_textDisp
winInpBtn	userCmds.c	/^    Widget loadAfterBtn, selInpBtn, winInpBtn, eitherInpBtn, noInpBtn;$/;"	m	struct:
winOutBtn	userCmds.c	/^    Widget repInpBtn, sameOutBtn, dlogOutBtn, winOutBtn, dlogShell;$/;"	m	struct:
window	preferences.c	/^    WindowInfo *window;$/;"	m	struct:
window	search.c	/^    WindowInfo* window;$/;"	m	struct:_SelectionInfo
window	userCmds.c	/^    WindowInfo *window;$/;"	m	struct:
windowHighlightData	export.c	/^} windowHighlightData;$/;"	t	file:
windowHighlightData	highlight.c	/^} windowHighlightData;$/;"	t	file:
windowMenuCB	menu.c	/^static void windowMenuCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
windowMenuPane	nedit.h	/^    Widget	windowMenuPane;$/;"	m	struct:_WindowInfo
windowMenuValid	nedit.h	/^    Boolean	windowMenuValid;	\/* is window menu is up to date? *\/$/;"	m	struct:_WindowInfo
windowSmartIndentData	smartIndent.c	/^} windowSmartIndentData;$/;"	t	file:
wmSizeUpdateProc	window.c	/^static void wmSizeUpdateProc(XtPointer clientData, XtIntervalId *id)$/;"	f	file:
wrapCancelCB	preferences.c	/^static void wrapCancelCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
wrapLine	text.c	/^static int wrapLine(TextWidget tw, textBuffer *buf, int bufOffset,$/;"	f	file:
wrapMargin	preferences.c	/^    int wrapMargin;		\/* 0=wrap at window width, other=wrap margin *\/$/;"	m	struct:prefData
wrapMargin	textDisp.h	/^    int wrapMargin; 	    	    	\/* Margin in # of char positions for$/;"	m	struct:_textDisp
wrapMargin	textP.h	/^    int wrapMargin;$/;"	m	struct:_TextPart
wrapMarginCB	menu.c	/^static void wrapMarginCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
wrapMarginDefCB	menu.c	/^static void wrapMarginDefCB(Widget w, WindowInfo *window, caddr_t callData)$/;"	f	file:
wrapMarginMV	macro.c	/^static int wrapMarginMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
wrapMode	nedit.h	/^    char	wrapMode;		\/* line wrap style: NO_WRAP,$/;"	m	struct:_WindowInfo
wrapOKCB	preferences.c	/^static void wrapOKCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
wrapStyle	nedit.h	/^enum wrapStyle {NO_WRAP, NEWLINE_WRAP, CONTINUOUS_WRAP};$/;"	g
wrapStyle	preferences.c	/^    int wrapStyle;		\/* what kind of wrapping to do *\/$/;"	m	struct:prefData
wrapStyle	preferences.c	/^    int wrapStyle;	$/;"	m	struct:
wrapText	text.c	/^static char *wrapText(TextWidget tw, char *startLine, char *text, int bufOffset,$/;"	f	file:
wrapTextMV	macro.c	/^static int wrapTextMV(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
wrapUsesCharacter	textDisp.c	/^static int wrapUsesCharacter(textDisp *textD, int lineEndPos)$/;"	f	file:
wrapWindowCB	preferences.c	/^static void wrapWindowCB(Widget w, XtPointer clientData, XtPointer callData)$/;"	f	file:
wrappedLineCounter	textDisp.c	/^static void wrappedLineCounter(textDisp *textD, textBuffer *buf, int startPos,$/;"	f	file:
writableWindows	nedit.h	/^		writableWindows;	\/* used during multi-file replacements *\/$/;"	m	struct:_WindowInfo
writeBckVersion	file.c	/^static int writeBckVersion(WindowInfo *window)$/;"	f	file:
writeFileMS	macro.c	/^static int writeFileMS(WindowInfo *window, DataValue *argList, int nArgs,$/;"	f	file:
writeLanguageModesString	preferences.c	/^static char *writeLanguageModesString(void)$/;"	f	file:
writeMenuItemString	userCmds.c	/^static char *writeMenuItemString(menuItemRec **menuItems, int nItems,$/;"	f	file:
writeOrAppendFile	macro.c	/^static int writeOrAppendFile(int append, WindowInfo *window,$/;"	f	file:
wrongNArgsErr	macro.c	/^static int wrongNArgsErr(char **errMsg)$/;"	f	file:
xyToPos	textDisp.c	/^static int xyToPos(textDisp *textD, int x, int y, int posType)$/;"	f	file:
xyToUnconstrainedPos	textDisp.c	/^static void xyToUnconstrainedPos(textDisp *textD, int x, int y, int *row,$/;"	f	file:
yychar	parse.c	/^int yychar;$/;"	v
yycheck	parse.c	/^const short yycheck[] = {                                      91,$/;"	v
yyclearin	parse.c	11;"	d	file:
yydebug	parse.c	/^int yydebug;$/;"	v
yydefred	parse.c	/^const short yydefred[] = {                                      0,$/;"	v
yydgoto	parse.c	/^const short yydgoto[] = {                                       2,$/;"	v
yyerrflag	parse.c	/^int yyerrflag;$/;"	v
yyerrok	parse.c	12;"	d	file:
yyerror	parse.c	/^static int yyerror(char *s)$/;"	f	file:
yygindex	parse.c	/^const short yygindex[] = {                                      0,$/;"	v
yygrowstack	parse.c	/^static int yygrowstack()$/;"	f	file:
yylen	parse.c	/^const short yylen[] = {                                         2,$/;"	v
yylex	parse.c	/^static int yylex(void)$/;"	f	file:
yylhs	parse.c	/^const short yylhs[] = {                                        -1,$/;"	v
yylval	parse.c	/^YYSTYPE yylval;$/;"	v
yyname	parse.c	/^const char * const yyname[] = {$/;"	v
yynerrs	parse.c	/^int yynerrs;$/;"	v
yyparse	parse.c	/^yyparse (YYPARSE_PARAM_ARG)$/;"	f
yyrcsid	parse.c	/^yyrcsid[] = "$FreeBSD: src\/usr.bin\/yacc\/skeleton.c,v 1.28 2000\/01\/17 02:04:06 bde Exp $";$/;"	v	file:
yyrindex	parse.c	/^const short yyrindex[] = {                                    954,$/;"	v
yyrule	parse.c	/^const char * const yyrule[] = {$/;"	v
yysindex	parse.c	/^const short yysindex[] = {                                   -253,$/;"	v
yyss	parse.c	/^short *yyss;$/;"	v
yysslim	parse.c	/^short *yysslim;$/;"	v
yyssp	parse.c	/^short *yyssp;$/;"	v
yystacksize	parse.c	/^int yystacksize;$/;"	v
yytable	parse.c	/^const short yytable[] = {                                      92,$/;"	v
yyval	parse.c	/^YYSTYPE yyval;$/;"	v
yyvs	parse.c	/^YYSTYPE *yyvs;$/;"	v
yyvsp	parse.c	/^YYSTYPE *yyvsp;$/;"	v
